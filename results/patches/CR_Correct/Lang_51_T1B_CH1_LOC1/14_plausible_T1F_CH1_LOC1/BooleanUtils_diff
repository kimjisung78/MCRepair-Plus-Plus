--- "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Lang_51/14/BooleanUtils_Origin.java"	2023-02-22 16:34:46.624696585 +0900
+++ "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Lang_51/14/BooleanUtils.java"	2023-02-22 16:34:46.624696585 +0900
@@ -646,59 +646,7 @@
      * @param str  the String to check
      * @return the boolean value of the string, <code>false</code> if no match
      */
-    public static boolean toBoolean(String str) {
-        // Previously used equalsIgnoreCase, which was fast for interned 'true'.
-        // Non interned 'true' matched 15 times slower.
-        // 
-        // Optimisation provides same performance as before for interned 'true'.
-        // Similar performance for null, 'false', and other strings not length 2/3/4.
-        // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
-        if (str == "true") {
-            return true;
-        }
-        if (str == null) {
-            return false;
-        }
-        switch (str.length()) {
-            case 2: {
-                char ch0 = str.charAt(0);
-                char ch1 = str.charAt(1);
-                return 
-                    (ch0 == 'o' || ch0 == 'O') &&
-                    (ch1 == 'n' || ch1 == 'N');
-            }
-            case 3: {
-                char ch = str.charAt(0);
-                if (ch == 'y') {
-                    return 
-                        (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&
-                        (str.charAt(2) == 's' || str.charAt(2) == 'S');
-                }
-                if (ch == 'Y') {
-                    return 
-                        (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&
-                        (str.charAt(2) == 'S' || str.charAt(2) == 's');
-                }
-            }
-            case 4: {
-                char ch = str.charAt(0);
-                if (ch == 't') {
-                    return 
-                        (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&
-                        (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&
-                        (str.charAt(3) == 'e' || str.charAt(3) == 'E');
-                }
-                if (ch == 'T') {
-                    return 
-                        (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&
-                        (str.charAt(2) == 'U' || str.charAt(2) == 'u') &&
-                        (str.charAt(3) == 'E' || str.charAt(3) == 'e');
-                }
-            }
-        }
-        return false;
-    }
-    
+public static boolean toBoolean ( String str ) { if ( str == "true" ) { return true ; } if ( str == null ) { return false ; } switch ( str . length ( ) ) { case 2 : { char ch0 = str . charAt ( 0 ) ; char ch1 = str . charAt ( 1 ) ; return ( ch0 == 'o' || ch0 == 'O' ) && ( ch1 == 'n' || ch1 == 'N' ) ; } case 3 : { char ch = str . charAt ( 0 ) ; if ( ch == 'y' ) { return ( str . charAt ( 1 ) == 'e' || str . charAt ( 1 ) == 'E' ) && ( str . charAt ( 2 ) == 's' || str . charAt ( 2 ) == 'S' ) ; } if ( ch == 'Y' ) { return ( str . charAt ( 1 ) == 'E' || str . charAt ( 1 ) == 'e' ) && ( str . charAt ( 2 ) == 'S' || str . charAt ( 2 ) == 's' ) ; } break ; } case 4 : { char ch = str . charAt ( 0 ) ; if ( ch == 't' ) { return ( str . charAt ( 1 ) == 'r' || str . charAt ( 1 ) == 'R' ) && ( str . charAt ( 2 ) == 'u' || str . charAt ( 2 ) == 'U' ) && ( str . charAt ( 3 ) == 'e' || str . charAt ( 3 ) == 'E' ) ; } if ( ch == 'T' ) { return ( str . charAt ( 1 ) == 'R' || str . charAt ( 1 ) == 'r' ) && ( str . charAt ( 2 ) == 'U' || str . charAt ( 2 ) == 'u' ) && ( str . charAt ( 3 ) == 'E' || str . charAt ( 3 ) == 'e' ) ; } } } return false ; }    
 //    public static void main(String[] args) {
 //        long start = System.currentTimeMillis();
 //        boolean flag = true;
