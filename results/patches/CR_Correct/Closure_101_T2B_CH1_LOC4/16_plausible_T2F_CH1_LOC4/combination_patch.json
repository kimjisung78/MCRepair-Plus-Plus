{
    "CommandLineRunner": {
        "0": {
            "action_judgements": null,
            "action_score": 0.875,
            "buggy_code": "@ Override protected CompilerOptions createOptions ( ) { CompilerOptions options = new CompilerOptions ( ) ; options . setCodingConvention ( new ClosureCodingConvention ( ) ) ; CompilationLevel level = flags . compilation_level ; level . setOptionsForCompilationLevel ( options ) ; if ( flags . debug ) { level . setDebugOptionsForCompilationLevel ( options ) ; } WarningLevel wLevel = flags . warning_level ; wLevel . setOptionsForWarningLevel ( options ) ; for ( FormattingOption formattingOption : flags . formatting ) { formattingOption . applyToOptions ( options ) ; }  if ( flags . process_closure_primitives ) {   options . closurePass = true ;   }   initOptionsFromFlags ( options ) ;  return options ; }",
            "buggy_dir": "",
            "criteria_token_length": 145,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#@",
                "{#@#Override",
                "@#Override#protected",
                "Override#protected#compiler",
                "protected#compiler#options",
                "compiler#options#create",
                "options#create#options",
                "create#options#(",
                "options#(#)",
                "(#)#{",
                ")#{#compiler",
                "{#compiler#options",
                "compiler#options#options",
                "options#options#=",
                "options#=#new",
                "=#new#compiler",
                "new#compiler#options",
                "compiler#options#(",
                "options#(#)",
                "(#)#;",
                ")#;#options",
                ";#options#.",
                "options#.#coding",
                ".#coding#convention",
                "coding#convention#(",
                "convention#(#new",
                "(#new#closure",
                "new#closure#coding",
                "closure#coding#convention",
                "coding#convention#(",
                "convention#(#)",
                "(#)#)",
                ")#)#;",
                ")#;#compilation",
                ";#compilation#level",
                "compilation#level#level",
                "level#level#=",
                "level#=#flags",
                "=#flags#.",
                "flags#.#compilation",
                ".#compilation#level",
                "compilation#level#;",
                "level#;#level",
                ";#level#.",
                "level#.#options",
                ".#options#for",
                "options#for#compilation",
                "for#compilation#level",
                "compilation#level#(",
                "level#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#flags",
                "(#flags#.",
                "flags#.#debug",
                ".#debug#)",
                "debug#)#{",
                ")#{#level",
                "{#level#.",
                "level#.#debug",
                ".#debug#options",
                "debug#options#for",
                "options#for#compilation",
                "for#compilation#level",
                "compilation#level#(",
                "level#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#}",
                ";#}#warning",
                "}#warning#level",
                "warning#level#w",
                "level#w#level",
                "w#level#=",
                "level#=#flags",
                "=#flags#.",
                "flags#.#warning",
                ".#warning#level",
                "warning#level#;",
                "level#;#w",
                ";#w#level",
                "w#level#.",
                "level#.#options",
                ".#options#for",
                "options#for#warning",
                "for#warning#level",
                "warning#level#(",
                "level#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#for",
                ";#for#(",
                "for#(#formatting",
                "(#formatting#option",
                "formatting#option#formatting",
                "option#formatting#option",
                "formatting#option#:",
                "option#:#flags",
                ":#flags#.",
                "flags#.#formatting",
                ".#formatting#)",
                "formatting#)#{",
                ")#{#formatting",
                "{#formatting#option",
                "formatting#option#.",
                "option#.#to",
                ".#to#options",
                "to#options#(",
                "options#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#flags",
                "(#flags#.",
                "flags#.#process",
                ".#process#closure",
                "process#closure#primitives",
                "closure#primitives#)",
                "primitives#)#{",
                ")#{#options",
                "{#options#.",
                "options#.#closure",
                ".#closure#pass",
                "closure#pass#=",
                "pass#=#true",
                "=#true#;",
                "true#;#}",
                ";#}#options",
                "}#options#from",
                "options#from#flags",
                "from#flags#(",
                "flags#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#return",
                ";#return#options",
                "return#options#;",
                "options#;#}",
                ";#}#}"
            ],
            "diffs": {
                "16": {
                    "action": "CHANGE",
                    "buggy_end_line": 18,
                    "buggy_size": 3,
                    "buggy_start_line": 16,
                    "fixed_end_line": 16,
                    "fixed_size": 1,
                    "fixed_start_line": 16
                }
            },
            "end_line": 439,
            "exp_ins": 1,
            "exp_other": 3,
            "file_ext": ".java",
            "file_key": "Closure_101_src_com_google_javascript_jscomp_CommandLineRunner",
            "file_name": "CommandLineRunner",
            "module_dir": "src/com/google/javascript/jscomp",
            "module_id": "Closure_101",
            "module_name": "Closure",
            "module_num": "101",
            "multi_chunk_key": "Closure_101_src_com_google_javascript_jscomp_CommandLineRunner_method1_createOptions",
            "ngram_score": 0.7793103448275862,
            "patch": "@ Override protected CompilerOptions createOptions ( ) { CompilerOptions options = new CompilerOptions ( ) ; options . setCodingConvention ( new ClosureCodingConvention ( ) ) ; CompilationLevel level = flags . compilation_level ; level . setOptionsForCompilationLevel ( options ) ; if ( flags . debug ) { level . setDebugOptionsForCompilationLevel ( options ) ; } WarningLevel wLevel = flags . warning_level ; wLevel . setOptionsForWarningLevel ( options ) ; for ( FormattingOption formattingOption : flags . formatting ) { formattingOption . applyToOptions ( options ) ; } options . closurePass = flags . process_closure_primitives ; initOptionsFromFlags ( options ) ; return options ; }",
            "patch_index": 197,
            "per_ins": 0,
            "per_other": 3,
            "score_total": 0.827,
            "set_index": null,
            "start_line": 418,
            "tf_token_length": 139,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#@",
                "{#@#Override",
                "@#Override#protected",
                "Override#protected#compiler",
                "protected#compiler#options",
                "compiler#options#create",
                "options#create#options",
                "create#options#(",
                "options#(#)",
                "(#)#{",
                ")#{#compiler",
                "{#compiler#options",
                "compiler#options#options",
                "options#options#=",
                "options#=#new",
                "=#new#compiler",
                "new#compiler#options",
                "compiler#options#(",
                "options#(#)",
                "(#)#;",
                ")#;#options",
                ";#options#.",
                "options#.#coding",
                ".#coding#convention",
                "coding#convention#(",
                "convention#(#new",
                "(#new#closure",
                "new#closure#coding",
                "closure#coding#convention",
                "coding#convention#(",
                "convention#(#)",
                "(#)#)",
                ")#)#;",
                ")#;#compilation",
                ";#compilation#level",
                "compilation#level#level",
                "level#level#=",
                "level#=#flags",
                "=#flags#.",
                "flags#.#compilation",
                ".#compilation#level",
                "compilation#level#;",
                "level#;#level",
                ";#level#.",
                "level#.#options",
                ".#options#for",
                "options#for#compilation",
                "for#compilation#level",
                "compilation#level#(",
                "level#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#flags",
                "(#flags#.",
                "flags#.#debug",
                ".#debug#)",
                "debug#)#{",
                ")#{#level",
                "{#level#.",
                "level#.#debug",
                ".#debug#options",
                "debug#options#for",
                "options#for#compilation",
                "for#compilation#level",
                "compilation#level#(",
                "level#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#}",
                ";#}#warning",
                "}#warning#level",
                "warning#level#w",
                "level#w#level",
                "w#level#=",
                "level#=#flags",
                "=#flags#.",
                "flags#.#warning",
                ".#warning#level",
                "warning#level#;",
                "level#;#w",
                ";#w#level",
                "w#level#.",
                "level#.#options",
                ".#options#for",
                "options#for#warning",
                "for#warning#level",
                "warning#level#(",
                "level#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#for",
                ";#for#(",
                "for#(#formatting",
                "(#formatting#option",
                "formatting#option#formatting",
                "option#formatting#option",
                "formatting#option#:",
                "option#:#flags",
                ":#flags#.",
                "flags#.#formatting",
                ".#formatting#)",
                "formatting#)#{",
                ")#{#formatting",
                "{#formatting#option",
                "formatting#option#.",
                "option#.#to",
                ".#to#options",
                "to#options#(",
                "options#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#}",
                ";#}#options",
                "}#options#.",
                "options#.#closure",
                ".#closure#pass",
                "closure#pass#=",
                "pass#=#flags",
                "=#flags#.",
                "flags#.#process",
                ".#process#closure",
                "process#closure#primitives",
                "closure#primitives#;",
                "primitives#;#options",
                ";#options#from",
                "options#from#flags",
                "from#flags#(",
                "flags#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#return",
                ";#return#options",
                "return#options#;",
                "options#;#}",
                ";#}#}"
            ]
        }
    }
}