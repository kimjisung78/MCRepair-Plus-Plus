{
    "CharSequenceTranslator": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "public final void translate ( CharSequence input , Writer out ) throws IOException { if ( out == null ) { throw new IllegalArgumentException ( \"The Writer must not be null\" ) ; } if ( input == null ) { return ; } int pos = 0 ; int len = input . length ( ) ; while ( pos < len ) { int consumed = translate ( input , pos , out ) ; if ( consumed == 0 ) { char [ ] c = Character . toChars ( Character . codePointAt ( input , pos ) ) ; out . write ( c ) ; pos += c . length ; continue ; } for ( int pt = 0 ; pt < consumed ; pt ++ ) {  pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ;  } } }",
            "buggy_dir": "",
            "criteria_token_length": 161,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#final",
                "public#final#void",
                "final#void#translate",
                "void#translate#(",
                "translate#(#char",
                "(#char#sequence",
                "char#sequence#input",
                "sequence#input#,",
                "input#,#Writer",
                ",#Writer#out",
                "Writer#out#)",
                "out#)#throws",
                ")#throws#i",
                "throws#i#o",
                "i#o#exception",
                "o#exception#{",
                "exception#{#if",
                "{#if#(",
                "if#(#out",
                "(#out#==",
                "out#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#illegal",
                "new#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#the ",
                "(#the #writer must not be null\"",
                "the #writer must not be null\"#)",
                "writer must not be null\"#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#input",
                "(#input#==",
                "input#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#return",
                "{#return#;",
                "return#;#}",
                ";#}#int",
                "}#int#pos",
                "int#pos#=",
                "pos#=#0",
                "=#0#;",
                "0#;#int",
                ";#int#len",
                "int#len#=",
                "len#=#input",
                "=#input#.",
                "input#.#length",
                ".#length#(",
                "length#(#)",
                "(#)#;",
                ")#;#while",
                ";#while#(",
                "while#(#pos",
                "(#pos#<",
                "pos#<#len",
                "<#len#)",
                "len#)#{",
                ")#{#int",
                "{#int#consumed",
                "int#consumed#=",
                "consumed#=#translate",
                "=#translate#(",
                "translate#(#input",
                "(#input#,",
                "input#,#pos",
                ",#pos#,",
                "pos#,#out",
                ",#out#)",
                "out#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#consumed",
                "(#consumed#==",
                "consumed#==#0",
                "==#0#)",
                "0#)#{",
                ")#{#char",
                "{#char#[",
                "char#[#]",
                "[#]#c",
                "]#c#=",
                "c#=#Character",
                "=#Character#.",
                "Character#.#to",
                ".#to#chars",
                "to#chars#(",
                "chars#(#Character",
                "(#Character#.",
                "Character#.#point",
                ".#point#at",
                "point#at#(",
                "at#(#input",
                "(#input#,",
                "input#,#pos",
                ",#pos#)",
                "pos#)#)",
                ")#)#;",
                ")#;#out",
                ";#out#.",
                "out#.#write",
                ".#write#(",
                "write#(#c",
                "(#c#)",
                "c#)#;",
                ")#;#pos",
                ";#pos#+=",
                "pos#+=#c",
                "+=#c#.",
                "c#.#length",
                ".#length#;",
                "length#;#continue",
                ";#continue#;",
                "continue#;#}",
                ";#}#for",
                "}#for#(",
                "for#(#int",
                "(#int#pt",
                "int#pt#=",
                "pt#=#0",
                "=#0#;",
                "0#;#pt",
                ";#pt#<",
                "pt#<#consumed",
                "<#consumed#;",
                "consumed#;#pt",
                ";#pt#++",
                "pt#++#)",
                "++#)#{",
                ")#{#pos",
                "{#pos#+=",
                "pos#+=#Character",
                "+=#Character#.",
                "Character#.#char",
                ".#char#count",
                "char#count#(",
                "count#(#Character",
                "(#Character#.",
                "Character#.#point",
                ".#point#at",
                "point#at#(",
                "at#(#input",
                "(#input#,",
                "input#,#pos",
                ",#pos#)",
                "pos#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}",
                "}#}#}"
            ],
            "diffs": {
                "20": {
                    "action": "CHANGE",
                    "buggy_end_line": 20,
                    "buggy_size": 1,
                    "buggy_start_line": 20,
                    "fixed_end_line": 20,
                    "fixed_size": 1,
                    "fixed_start_line": 20
                }
            },
            "end_line": 98,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Lang_6_src_main_java_org_apache_commons_lang3_text_translate_CharSequenceTranslator",
            "file_name": "CharSequenceTranslator",
            "module_dir": "src/main/java/org/apache/commons/lang3/text/translate",
            "module_id": "Lang_6",
            "module_name": "Lang",
            "module_num": "6",
            "multi_chunk_key": "Lang_6_src_main_java_org_apache_commons_lang3_text_translate_CharSequenceTranslator_method1_translate_CharSequence_Writer",
            "ngram_score": 0.8944099378881988,
            "patch": "public final void translate ( CharSequence input , Writer out ) throws IOException { if ( out == null ) { throw new IllegalArgumentException ( \"The Writer must not be null\" ) ; } if ( input == null ) { return ; } int pos = 0 ; int len = input . length ( ) ; while ( pos < len ) { int consumed = translate ( input , pos , out ) ; if ( consumed == 0 ) { char [ ] c = Character . toChars ( Character . codePointAt ( input , pos ) ) ; out . write ( c ) ; pos += c . length ; continue ; } for ( int pt = 0 ; pt < consumed ; pt ++ ) { pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; } } }",
            "patch_index": 872,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.947,
            "set_index": null,
            "start_line": 75,
            "tf_token_length": 161,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#final",
                "public#final#void",
                "final#void#translate",
                "void#translate#(",
                "translate#(#char",
                "(#char#sequence",
                "char#sequence#input",
                "sequence#input#,",
                "input#,#Writer",
                ",#Writer#out",
                "Writer#out#)",
                "out#)#throws",
                ")#throws#i",
                "throws#i#o",
                "i#o#exception",
                "o#exception#{",
                "exception#{#if",
                "{#if#(",
                "if#(#out",
                "(#out#==",
                "out#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#illegal",
                "new#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#the ",
                "(#the #writer must not be null\"",
                "the #writer must not be null\"#)",
                "writer must not be null\"#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#input",
                "(#input#==",
                "input#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#return",
                "{#return#;",
                "return#;#}",
                ";#}#int",
                "}#int#pos",
                "int#pos#=",
                "pos#=#0",
                "=#0#;",
                "0#;#int",
                ";#int#len",
                "int#len#=",
                "len#=#input",
                "=#input#.",
                "input#.#length",
                ".#length#(",
                "length#(#)",
                "(#)#;",
                ")#;#while",
                ";#while#(",
                "while#(#pos",
                "(#pos#<",
                "pos#<#len",
                "<#len#)",
                "len#)#{",
                ")#{#int",
                "{#int#consumed",
                "int#consumed#=",
                "consumed#=#translate",
                "=#translate#(",
                "translate#(#input",
                "(#input#,",
                "input#,#pos",
                ",#pos#,",
                "pos#,#out",
                ",#out#)",
                "out#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#consumed",
                "(#consumed#==",
                "consumed#==#0",
                "==#0#)",
                "0#)#{",
                ")#{#char",
                "{#char#[",
                "char#[#]",
                "[#]#c",
                "]#c#=",
                "c#=#Character",
                "=#Character#.",
                "Character#.#to",
                ".#to#chars",
                "to#chars#(",
                "chars#(#Character",
                "(#Character#.",
                "Character#.#point",
                ".#point#at",
                "point#at#(",
                "at#(#input",
                "(#input#,",
                "input#,#pos",
                ",#pos#)",
                "pos#)#)",
                ")#)#;",
                ")#;#out",
                ";#out#.",
                "out#.#write",
                ".#write#(",
                "write#(#c",
                "(#c#)",
                "c#)#;",
                ")#;#pos",
                ";#pos#+=",
                "pos#+=#c",
                "+=#c#.",
                "c#.#length",
                ".#length#;",
                "length#;#continue",
                ";#continue#;",
                "continue#;#}",
                ";#}#for",
                "}#for#(",
                "for#(#int",
                "(#int#pt",
                "int#pt#=",
                "pt#=#0",
                "=#0#;",
                "0#;#pt",
                ";#pt#<",
                "pt#<#consumed",
                "<#consumed#;",
                "consumed#;#pt",
                ";#pt#++",
                "pt#++#)",
                "++#)#{",
                ")#{#pos",
                "{#pos#+=",
                "pos#+=#Character",
                "+=#Character#.",
                "Character#.#char",
                ".#char#count",
                "char#count#(",
                "count#(#Character",
                "(#Character#.",
                "Character#.#point",
                ".#point#at",
                "point#at#(",
                "at#(#input",
                "(#input#,",
                "input#,#pt",
                ",#pt#)",
                "pt#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}",
                "}#}#}"
            ]
        }
    }
}