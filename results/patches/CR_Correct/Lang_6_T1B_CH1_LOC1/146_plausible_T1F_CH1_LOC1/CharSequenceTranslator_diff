--- "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Lang_6/146/CharSequenceTranslator_Origin.java"	2023-02-22 15:26:38.092326703 +0900
+++ "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Lang_6/146/CharSequenceTranslator.java"	2023-02-22 15:26:38.092326703 +0900
@@ -72,31 +72,7 @@
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
-    public final void translate(CharSequence input, Writer out) throws IOException {
-        if (out == null) {
-            throw new IllegalArgumentException("The Writer must not be null");
-        }
-        if (input == null) {
-            return;
-        }
-        int pos = 0;
-        int len = input.length();
-        while (pos < len) {
-            int consumed = translate(input, pos, out);
-            if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-                pos+= c.length;
-                continue;
-            }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-            }
-        }
-    }
-
+public final void translate ( CharSequence input , Writer out ) throws IOException { if ( out == null ) { throw new IllegalArgumentException ( "The Writer must not be null" ) ; } if ( input == null ) { return ; } int pos = 0 ; int len = input . length ( ) ; while ( pos < len ) { int consumed = translate ( input , pos , out ) ; if ( consumed == 0 ) { char [ ] c = Character . toChars ( Character . codePointAt ( input , pos ) ) ; out . write ( c ) ; pos += c . length ; continue ; } for ( int pt = 0 ; pt < consumed ; pt ++ ) { pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; } } }
     /**
      * Helper method to create a merger of this translator with another set of 
      * translators. Useful in customizing the standard functionality.
