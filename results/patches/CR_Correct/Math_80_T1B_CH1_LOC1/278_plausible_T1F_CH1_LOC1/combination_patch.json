{
    "EigenDecompositionImpl": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "private boolean flipIfWarranted ( final int n , final int step ) { if ( 1.5 * work [ pingPong ] < work [ 4 * ( n - 1 ) + pingPong ] ) {  int j = 4 * n - 1 ;  for ( int i = 0 ; i < j ; i += 4 ) { for ( int k = 0 ; k < 4 ; k += step ) { final double tmp = work [ i + k ] ; work [ i + k ] = work [ j - k ] ; work [ j - k ] = tmp ; } j -= 4 ; } return true ; } return false ; }",
            "buggy_dir": "",
            "criteria_token_length": 131,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#boolean",
                "private#boolean#if",
                "boolean#if#warranted",
                "if#warranted#(",
                "warranted#(#final",
                "(#final#int",
                "final#int#n",
                "int#n#,",
                "n#,#final",
                ",#final#int",
                "final#int#step",
                "int#step#)",
                "step#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#1.5",
                "(#1.5#*",
                "1.5#*#work",
                "*#work#[",
                "work#[#ping",
                "[#ping#pong",
                "ping#pong#]",
                "pong#]#<",
                "]#<#work",
                "<#work#[",
                "work#[#4",
                "[#4#*",
                "4#*#(",
                "*#(#n",
                "(#n#-",
                "n#-#1",
                "-#1#)",
                "1#)#+",
                ")#+#ping",
                "+#ping#pong",
                "ping#pong#]",
                "pong#]#)",
                "]#)#{",
                ")#{#int",
                "{#int#j",
                "int#j#=",
                "j#=#4",
                "=#4#*",
                "4#*#n",
                "*#n#-",
                "n#-#1",
                "-#1#;",
                "1#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#j",
                "<#j#;",
                "j#;#i",
                ";#i#+=",
                "i#+=#4",
                "+=#4#)",
                "4#)#{",
                ")#{#for",
                "{#for#(",
                "for#(#int",
                "(#int#k",
                "int#k#=",
                "k#=#0",
                "=#0#;",
                "0#;#k",
                ";#k#<",
                "k#<#4",
                "<#4#;",
                "4#;#k",
                ";#k#+=",
                "k#+=#step",
                "+=#step#)",
                "step#)#{",
                ")#{#final",
                "{#final#double",
                "final#double#tmp",
                "double#tmp#=",
                "tmp#=#work",
                "=#work#[",
                "work#[#i",
                "[#i#+",
                "i#+#k",
                "+#k#]",
                "k#]#;",
                "]#;#work",
                ";#work#[",
                "work#[#i",
                "[#i#+",
                "i#+#k",
                "+#k#]",
                "k#]#=",
                "]#=#work",
                "=#work#[",
                "work#[#j",
                "[#j#-",
                "j#-#k",
                "-#k#]",
                "k#]#;",
                "]#;#work",
                ";#work#[",
                "work#[#j",
                "[#j#-",
                "j#-#k",
                "-#k#]",
                "k#]#=",
                "]#=#tmp",
                "=#tmp#;",
                "tmp#;#}",
                ";#}#j",
                "}#j#-=",
                "j#-=#4",
                "-=#4#;",
                "4#;#}",
                ";#}#return",
                "}#return#true",
                "return#true#;",
                "true#;#}",
                ";#}#return",
                "}#return#false",
                "return#false#;",
                "false#;#}",
                ";#}#}"
            ],
            "diffs": {
                "4": {
                    "action": "CHANGE",
                    "buggy_end_line": 4,
                    "buggy_size": 1,
                    "buggy_start_line": 4,
                    "fixed_end_line": 4,
                    "fixed_size": 1,
                    "fixed_start_line": 4
                }
            },
            "end_line": 1147,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Math_80_src_main_java_org_apache_commons_math_linear_EigenDecompositionImpl",
            "file_name": "EigenDecompositionImpl",
            "module_dir": "src/main/java/org/apache/commons/math/linear",
            "module_id": "Math_80",
            "module_name": "Math",
            "module_num": "80",
            "multi_chunk_key": "Math_80_src_main_java_org_apache_commons_math_linear_EigenDecompositionImpl_method1_flipIfWarranted_int_int",
            "ngram_score": 0.8120300751879699,
            "patch": "private boolean flipIfWarranted ( final int n , final int step ) { if ( 1.5 * work [ pingPong ] < work [ 4 * ( n - 1 ) + pingPong ] ) { int j = 4 * ( n - 1 ) ; for ( int i = 0 ; i < j ; i += 4 ) { for ( int k = 0 ; k < 4 ; k += step ) { final double tmp = work [ i + k ] ; work [ i + k ] = work [ j - k ] ; work [ j - k ] = tmp ; } j -= 4 ; } return true ; } return false ; }",
            "patch_index": 639,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.906,
            "set_index": null,
            "start_line": 1132,
            "tf_token_length": 133,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#boolean",
                "private#boolean#if",
                "boolean#if#warranted",
                "if#warranted#(",
                "warranted#(#final",
                "(#final#int",
                "final#int#n",
                "int#n#,",
                "n#,#final",
                ",#final#int",
                "final#int#step",
                "int#step#)",
                "step#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#1.5",
                "(#1.5#*",
                "1.5#*#work",
                "*#work#[",
                "work#[#ping",
                "[#ping#pong",
                "ping#pong#]",
                "pong#]#<",
                "]#<#work",
                "<#work#[",
                "work#[#4",
                "[#4#*",
                "4#*#(",
                "*#(#n",
                "(#n#-",
                "n#-#1",
                "-#1#)",
                "1#)#+",
                ")#+#ping",
                "+#ping#pong",
                "ping#pong#]",
                "pong#]#)",
                "]#)#{",
                ")#{#int",
                "{#int#j",
                "int#j#=",
                "j#=#4",
                "=#4#*",
                "4#*#(",
                "*#(#n",
                "(#n#-",
                "n#-#1",
                "-#1#)",
                "1#)#;",
                ")#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#j",
                "<#j#;",
                "j#;#i",
                ";#i#+=",
                "i#+=#4",
                "+=#4#)",
                "4#)#{",
                ")#{#for",
                "{#for#(",
                "for#(#int",
                "(#int#k",
                "int#k#=",
                "k#=#0",
                "=#0#;",
                "0#;#k",
                ";#k#<",
                "k#<#4",
                "<#4#;",
                "4#;#k",
                ";#k#+=",
                "k#+=#step",
                "+=#step#)",
                "step#)#{",
                ")#{#final",
                "{#final#double",
                "final#double#tmp",
                "double#tmp#=",
                "tmp#=#work",
                "=#work#[",
                "work#[#i",
                "[#i#+",
                "i#+#k",
                "+#k#]",
                "k#]#;",
                "]#;#work",
                ";#work#[",
                "work#[#i",
                "[#i#+",
                "i#+#k",
                "+#k#]",
                "k#]#=",
                "]#=#work",
                "=#work#[",
                "work#[#j",
                "[#j#-",
                "j#-#k",
                "-#k#]",
                "k#]#;",
                "]#;#work",
                ";#work#[",
                "work#[#j",
                "[#j#-",
                "j#-#k",
                "-#k#]",
                "k#]#=",
                "]#=#tmp",
                "=#tmp#;",
                "tmp#;#}",
                ";#}#j",
                "}#j#-=",
                "j#-=#4",
                "-=#4#;",
                "4#;#}",
                ";#}#return",
                "}#return#true",
                "return#true#;",
                "true#;#}",
                ";#}#return",
                "}#return#false",
                "return#false#;",
                "false#;#}",
                ";#}#}"
            ]
        }
    }
}