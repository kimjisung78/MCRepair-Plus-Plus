{
    "ShapeUtilities": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "public static boolean equal ( GeneralPath p1 , GeneralPath p2 ) { if ( p1 == null ) { return ( p2 == null ) ; } if ( p2 == null ) { return false ; } if ( p1 . getWindingRule ( ) != p2 . getWindingRule ( ) ) { return false ; } PathIterator iterator1 = p1 . getPathIterator ( null ) ;  PathIterator iterator2 = p1 . getPathIterator ( null ) ;  double [ ] d1 = new double [ 6 ] ; double [ ] d2 = new double [ 6 ] ; boolean done = iterator1 . isDone ( ) && iterator2 . isDone ( ) ; while ( ! done ) { if ( iterator1 . isDone ( ) != iterator2 . isDone ( ) ) { return false ; } int seg1 = iterator1 . currentSegment ( d1 ) ; int seg2 = iterator2 . currentSegment ( d2 ) ; if ( seg1 != seg2 ) { return false ; } if ( ! Arrays . equals ( d1 , d2 ) ) { return false ; } iterator1 . next ( ) ; iterator2 . next ( ) ; done = iterator1 . isDone ( ) && iterator2 . isDone ( ) ; } return true ; }",
            "buggy_dir": "",
            "criteria_token_length": 237,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#static",
                "public#static#boolean",
                "static#boolean#equal",
                "boolean#equal#(",
                "equal#(#general",
                "(#general#path",
                "general#path#p1",
                "path#p1#,",
                "p1#,#general",
                ",#general#path",
                "general#path#p2",
                "path#p2#)",
                "p2#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#p1",
                "(#p1#==",
                "p1#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#return",
                "{#return#(",
                "return#(#p2",
                "(#p2#==",
                "p2#==#null",
                "==#null#)",
                "null#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#p2",
                "(#p2#==",
                "p2#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#return",
                "{#return#false",
                "return#false#;",
                "false#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#p1",
                "(#p1#.",
                "p1#.#winding",
                ".#winding#rule",
                "winding#rule#(",
                "rule#(#)",
                "(#)#!=",
                ")#!=#p2",
                "!=#p2#.",
                "p2#.#winding",
                ".#winding#rule",
                "winding#rule#(",
                "rule#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#false",
                "return#false#;",
                "false#;#}",
                ";#}#path",
                "}#path#iterator",
                "path#iterator#iterator1",
                "iterator#iterator1#=",
                "iterator1#=#p1",
                "=#p1#.",
                "p1#.#path",
                ".#path#iterator",
                "path#iterator#(",
                "iterator#(#null",
                "(#null#)",
                "null#)#;",
                ")#;#path",
                ";#path#iterator",
                "path#iterator#iterator2",
                "iterator#iterator2#=",
                "iterator2#=#p1",
                "=#p1#.",
                "p1#.#path",
                ".#path#iterator",
                "path#iterator#(",
                "iterator#(#null",
                "(#null#)",
                "null#)#;",
                ")#;#double",
                ";#double#[",
                "double#[#]",
                "[#]#d1",
                "]#d1#=",
                "d1#=#new",
                "=#new#double",
                "new#double#[",
                "double#[#6",
                "[#6#]",
                "6#]#;",
                "]#;#double",
                ";#double#[",
                "double#[#]",
                "[#]#d2",
                "]#d2#=",
                "d2#=#new",
                "=#new#double",
                "new#double#[",
                "double#[#6",
                "[#6#]",
                "6#]#;",
                "]#;#boolean",
                ";#boolean#done",
                "boolean#done#=",
                "done#=#iterator1",
                "=#iterator1#.",
                "iterator1#.#is",
                ".#is#done",
                "is#done#(",
                "done#(#)",
                "(#)#&&",
                ")#&&#iterator2",
                "&&#iterator2#.",
                "iterator2#.#is",
                ".#is#done",
                "is#done#(",
                "done#(#)",
                "(#)#;",
                ")#;#while",
                ";#while#(",
                "while#(#!",
                "(#!#done",
                "!#done#)",
                "done#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#iterator1",
                "(#iterator1#.",
                "iterator1#.#is",
                ".#is#done",
                "is#done#(",
                "done#(#)",
                "(#)#!=",
                ")#!=#iterator2",
                "!=#iterator2#.",
                "iterator2#.#is",
                ".#is#done",
                "is#done#(",
                "done#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#false",
                "return#false#;",
                "false#;#}",
                ";#}#int",
                "}#int#seg1",
                "int#seg1#=",
                "seg1#=#iterator1",
                "=#iterator1#.",
                "iterator1#.#current",
                ".#current#segment",
                "current#segment#(",
                "segment#(#d1",
                "(#d1#)",
                "d1#)#;",
                ")#;#int",
                ";#int#seg2",
                "int#seg2#=",
                "seg2#=#iterator2",
                "=#iterator2#.",
                "iterator2#.#current",
                ".#current#segment",
                "current#segment#(",
                "segment#(#d2",
                "(#d2#)",
                "d2#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#seg1",
                "(#seg1#!=",
                "seg1#!=#seg2",
                "!=#seg2#)",
                "seg2#)#{",
                ")#{#return",
                "{#return#false",
                "return#false#;",
                "false#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#!",
                "(#!#Arrays",
                "!#Arrays#.",
                "Arrays#.#equals",
                ".#equals#(",
                "equals#(#d1",
                "(#d1#,",
                "d1#,#d2",
                ",#d2#)",
                "d2#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#false",
                "return#false#;",
                "false#;#}",
                ";#}#iterator1",
                "}#iterator1#.",
                "iterator1#.#next",
                ".#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#iterator2",
                ";#iterator2#.",
                "iterator2#.#next",
                ".#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#done",
                ";#done#=",
                "done#=#iterator1",
                "=#iterator1#.",
                "iterator1#.#is",
                ".#is#done",
                "is#done#(",
                "done#(#)",
                "(#)#&&",
                ")#&&#iterator2",
                "&&#iterator2#.",
                "iterator2#.#is",
                ".#is#done",
                "is#done#(",
                "done#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#true",
                "return#true#;",
                "true#;#}",
                ";#}#}"
            ],
            "diffs": {
                "12": {
                    "action": "CHANGE",
                    "buggy_end_line": 12,
                    "buggy_size": 1,
                    "buggy_start_line": 12,
                    "fixed_end_line": 12,
                    "fixed_size": 1,
                    "fixed_start_line": 12
                }
            },
            "end_line": 296,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Chart_11_source_org_jfree_chart_util_ShapeUtilities",
            "file_name": "ShapeUtilities",
            "module_dir": "source/org/jfree/chart/util",
            "module_id": "Chart_11",
            "module_name": "Chart",
            "module_num": "11",
            "multi_chunk_key": "Chart_11_source_org_jfree_chart_util_ShapeUtilities_method1_equal_GeneralPath_GeneralPath",
            "ngram_score": 0.6413502109704642,
            "patch": "public static boolean equal ( GeneralPath p1 , GeneralPath p2 ) { if ( p1 == null ) { return ( p2 == null ) ; } if ( p2 == null ) { return false ; } if ( p1 . getWindingRule ( ) != p2 . getWindingRule ( ) ) { return false ; } PathIterator iterator1 = p2 . getPathIterator ( null ) ; PathIterator iterator2 = p1 . getPathIterator ( null ) ; double [ ] d1 = new double [ 6 ] ; double [ ] d2 = new double [ 6 ] ; boolean done = iterator1 . isDone ( ) && iterator2 . isDone ( ) ; while ( ! done ) { if ( iterator1 . isDone ( ) != iterator2 . isDone ( ) ) { return false ; } int seg1 = iterator1 . currentSegment ( d1 ) ; int seg2 = iterator2 . currentSegment ( d2 ) ; if ( seg1 != seg2 ) { return false ; } if ( ! Arrays . equals ( d1 , d2 ) ) { return false ; } iterator1 . next ( ) ; iterator2 . next ( ) ; done = iterator1 . isDone ( ) && iterator2 . isDone ( ) ; } return true ; }",
            "patch_index": 439,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.821,
            "set_index": null,
            "start_line": 264,
            "tf_token_length": 237,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#static",
                "public#static#boolean",
                "static#boolean#equal",
                "boolean#equal#(",
                "equal#(#general",
                "(#general#path",
                "general#path#p1",
                "path#p1#,",
                "p1#,#general",
                ",#general#path",
                "general#path#p2",
                "path#p2#)",
                "p2#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#p1",
                "(#p1#==",
                "p1#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#return",
                "{#return#(",
                "return#(#p2",
                "(#p2#==",
                "p2#==#null",
                "==#null#)",
                "null#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#p2",
                "(#p2#==",
                "p2#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#return",
                "{#return#false",
                "return#false#;",
                "false#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#p1",
                "(#p1#.",
                "p1#.#winding",
                ".#winding#rule",
                "winding#rule#(",
                "rule#(#)",
                "(#)#!=",
                ")#!=#p2",
                "!=#p2#.",
                "p2#.#winding",
                ".#winding#rule",
                "winding#rule#(",
                "rule#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#false",
                "return#false#;",
                "false#;#}",
                ";#}#path",
                "}#path#iterator",
                "path#iterator#iterator1",
                "iterator#iterator1#=",
                "iterator1#=#p2",
                "=#p2#.",
                "p2#.#path",
                ".#path#iterator",
                "path#iterator#(",
                "iterator#(#null",
                "(#null#)",
                "null#)#;",
                ")#;#path",
                ";#path#iterator",
                "path#iterator#iterator2",
                "iterator#iterator2#=",
                "iterator2#=#p1",
                "=#p1#.",
                "p1#.#path",
                ".#path#iterator",
                "path#iterator#(",
                "iterator#(#null",
                "(#null#)",
                "null#)#;",
                ")#;#double",
                ";#double#[",
                "double#[#]",
                "[#]#d1",
                "]#d1#=",
                "d1#=#new",
                "=#new#double",
                "new#double#[",
                "double#[#6",
                "[#6#]",
                "6#]#;",
                "]#;#double",
                ";#double#[",
                "double#[#]",
                "[#]#d2",
                "]#d2#=",
                "d2#=#new",
                "=#new#double",
                "new#double#[",
                "double#[#6",
                "[#6#]",
                "6#]#;",
                "]#;#boolean",
                ";#boolean#done",
                "boolean#done#=",
                "done#=#iterator1",
                "=#iterator1#.",
                "iterator1#.#is",
                ".#is#done",
                "is#done#(",
                "done#(#)",
                "(#)#&&",
                ")#&&#iterator2",
                "&&#iterator2#.",
                "iterator2#.#is",
                ".#is#done",
                "is#done#(",
                "done#(#)",
                "(#)#;",
                ")#;#while",
                ";#while#(",
                "while#(#!",
                "(#!#done",
                "!#done#)",
                "done#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#iterator1",
                "(#iterator1#.",
                "iterator1#.#is",
                ".#is#done",
                "is#done#(",
                "done#(#)",
                "(#)#!=",
                ")#!=#iterator2",
                "!=#iterator2#.",
                "iterator2#.#is",
                ".#is#done",
                "is#done#(",
                "done#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#false",
                "return#false#;",
                "false#;#}",
                ";#}#int",
                "}#int#seg1",
                "int#seg1#=",
                "seg1#=#iterator1",
                "=#iterator1#.",
                "iterator1#.#current",
                ".#current#segment",
                "current#segment#(",
                "segment#(#d1",
                "(#d1#)",
                "d1#)#;",
                ")#;#int",
                ";#int#seg2",
                "int#seg2#=",
                "seg2#=#iterator2",
                "=#iterator2#.",
                "iterator2#.#current",
                ".#current#segment",
                "current#segment#(",
                "segment#(#d2",
                "(#d2#)",
                "d2#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#seg1",
                "(#seg1#!=",
                "seg1#!=#seg2",
                "!=#seg2#)",
                "seg2#)#{",
                ")#{#return",
                "{#return#false",
                "return#false#;",
                "false#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#!",
                "(#!#Arrays",
                "!#Arrays#.",
                "Arrays#.#equals",
                ".#equals#(",
                "equals#(#d1",
                "(#d1#,",
                "d1#,#d2",
                ",#d2#)",
                "d2#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#false",
                "return#false#;",
                "false#;#}",
                ";#}#iterator1",
                "}#iterator1#.",
                "iterator1#.#next",
                ".#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#iterator2",
                ";#iterator2#.",
                "iterator2#.#next",
                ".#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#done",
                ";#done#=",
                "done#=#iterator1",
                "=#iterator1#.",
                "iterator1#.#is",
                ".#is#done",
                "is#done#(",
                "done#(#)",
                "(#)#&&",
                ")#&&#iterator2",
                "&&#iterator2#.",
                "iterator2#.#is",
                ".#is#done",
                "is#done#(",
                "done#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#true",
                "return#true#;",
                "true#;#}",
                ";#}#}"
            ]
        }
    }
}