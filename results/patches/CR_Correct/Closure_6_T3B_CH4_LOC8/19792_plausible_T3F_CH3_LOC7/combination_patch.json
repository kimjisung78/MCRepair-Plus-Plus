{
    "TypeValidator": {
        "0": {
            "action_judgements": null,
            "action_score": 0.875,
            "buggy_code": "boolean expectCanAssignToPropertyOf ( NodeTraversal t , Node n , JSType rightType , JSType leftType , Node owner , String propName ) { if ( ! leftType . isNoType ( ) && ! rightType . canAssignTo ( leftType ) ) {  if ( ( leftType . isConstructor ( ) || leftType . isEnumType ( ) ) && ( rightType . isConstructor ( ) || rightType . isEnumType ( ) ) ) {   registerMismatch ( rightType , leftType , null ) ;   } else {  JSType ownerType = getJSType ( owner ) ; if ( ownerType . isFunctionPrototypeType ( ) ) { FunctionType ownerFn = ownerType . toObjectType ( ) . getOwnerFunction ( ) ; if ( ownerFn . isInterface ( ) && rightType . isFunctionType ( ) && leftType . isFunctionType ( ) ) { return true ; } } mismatch ( t , n , \"assignment to property \" + propName + \" of \" + getReadableJSTypeName ( owner , true ) , rightType , leftType ) ;  }  return false ; } return true ; }",
            "buggy_dir": "",
            "criteria_token_length": 229,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#boolean",
                "{#boolean#can",
                "boolean#can#assign",
                "can#assign#to",
                "assign#to#property",
                "to#property#of",
                "property#of#(",
                "of#(#node",
                "(#node#traversal",
                "node#traversal#t",
                "traversal#t#,",
                "t#,#Node",
                ",#Node#n",
                "Node#n#,",
                "n#,#j",
                ",#j#s",
                "j#s#type",
                "s#type#right",
                "type#right#type",
                "right#type#,",
                "type#,#j",
                ",#j#s",
                "j#s#type",
                "s#type#left",
                "type#left#type",
                "left#type#,",
                "type#,#Node",
                ",#Node#owner",
                "Node#owner#,",
                "owner#,#String",
                ",#String#prop",
                "String#prop#name",
                "prop#name#)",
                "name#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#!",
                "(#!#left",
                "!#left#type",
                "left#type#.",
                "type#.#no",
                ".#no#type",
                "no#type#(",
                "type#(#)",
                "(#)#&&",
                ")#&&#!",
                "&&#!#right",
                "!#right#type",
                "right#type#.",
                "type#.#assign",
                ".#assign#to",
                "assign#to#(",
                "to#(#left",
                "(#left#type",
                "left#type#)",
                "type#)#)",
                ")#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#(",
                "(#(#left",
                "(#left#type",
                "left#type#.",
                "type#.#is",
                ".#is#constructor",
                "is#constructor#(",
                "constructor#(#)",
                "(#)#||",
                ")#||#left",
                "||#left#type",
                "left#type#.",
                "type#.#enum",
                ".#enum#type",
                "enum#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#&&",
                ")#&&#(",
                "&&#(#right",
                "(#right#type",
                "right#type#.",
                "type#.#is",
                ".#is#constructor",
                "is#constructor#(",
                "constructor#(#)",
                "(#)#||",
                ")#||#right",
                "||#right#type",
                "right#type#.",
                "type#.#enum",
                ".#enum#type",
                "enum#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#)",
                ")#)#{",
                ")#{#register",
                "{#register#mismatch",
                "register#mismatch#(",
                "mismatch#(#right",
                "(#right#type",
                "right#type#,",
                "type#,#left",
                ",#left#type",
                "left#type#,",
                "type#,#null",
                ",#null#)",
                "null#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#j",
                "{#j#s",
                "j#s#type",
                "s#type#owner",
                "type#owner#type",
                "owner#type#=",
                "type#=#j",
                "=#j#s",
                "j#s#type",
                "s#type#(",
                "type#(#owner",
                "(#owner#)",
                "owner#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#owner",
                "(#owner#type",
                "owner#type#.",
                "type#.#function",
                ".#function#prototype",
                "function#prototype#type",
                "prototype#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#function",
                "{#function#type",
                "function#type#owner",
                "type#owner#fn",
                "owner#fn#=",
                "fn#=#owner",
                "=#owner#type",
                "owner#type#.",
                "type#.#object",
                ".#object#type",
                "object#type#(",
                "type#(#)",
                "(#)#.",
                ")#.#owner",
                ".#owner#function",
                "owner#function#(",
                "function#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#owner",
                "(#owner#fn",
                "owner#fn#.",
                "fn#.#is",
                ".#is#interface",
                "is#interface#(",
                "interface#(#)",
                "(#)#&&",
                ")#&&#right",
                "&&#right#type",
                "right#type#.",
                "type#.#function",
                ".#function#type",
                "function#type#(",
                "type#(#)",
                "(#)#&&",
                ")#&&#left",
                "&&#left#type",
                "left#type#.",
                "type#.#function",
                ".#function#type",
                "function#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#true",
                "return#true#;",
                "true#;#}",
                ";#}#}",
                "}#}#mismatch",
                "}#mismatch#(",
                "mismatch#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#,",
                "n#,#\"assignment to property \"",
                ",#\"assignment to property \"#+",
                "\"assignment to property \"#+#prop",
                "+#prop#name",
                "prop#name#+",
                "name#+#\" of \"",
                "+#\" of \"#+",
                "\" of \"#+#readable",
                "+#readable#j",
                "readable#j#s",
                "j#s#type",
                "s#type#name",
                "type#name#(",
                "name#(#owner",
                "(#owner#,",
                "owner#,#true",
                ",#true#)",
                "true#)#,",
                ")#,#right",
                ",#right#type",
                "right#type#,",
                "type#,#left",
                ",#left#type",
                "left#type#)",
                "type#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#false",
                "return#false#;",
                "false#;#}",
                ";#}#return",
                "}#return#true",
                "return#true#;",
                "true#;#}",
                ";#}#}"
            ],
            "diffs": {
                "4": {
                    "action": "CHANGE",
                    "buggy_end_line": 6,
                    "buggy_size": 3,
                    "buggy_start_line": 4,
                    "fixed_end_line": 4,
                    "fixed_size": 1,
                    "fixed_start_line": 4
                }
            },
            "end_line": 389,
            "exp_ins": 0,
            "exp_other": 4,
            "file_ext": ".java",
            "file_key": "Closure_6_src_com_google_javascript_jscomp_TypeValidator",
            "file_name": "TypeValidator",
            "module_dir": "src/com/google/javascript/jscomp",
            "module_id": "Closure_6",
            "module_name": "Closure",
            "module_num": "6",
            "multi_chunk_key": "Closure_6_src_com_google_javascript_jscomp_TypeValidator_method1_expectCanAssignToPropertyOf_NodeTraversal_Node_JSType_JSType_Node_String",
            "ngram_score": 0.6462882096069869,
            "patch": "boolean expectCanAssignToPropertyOf ( NodeTraversal t , Node n , JSType rightType , JSType leftType , Node owner , String propName ) { if ( ! leftType . isNoType ( ) && ! rightType . canAssignTo ( leftType ) ) { if ( ! leftType . isConstructor ( ) && ! rightType . canAssignTo ( leftType ) ) { JSType ownerType = getJSType ( owner ) ; if ( ownerType . isFunctionPrototypeType ( ) ) { FunctionType ownerFn = ownerType . toObjectType ( ) . getOwnerFunction ( ) ; if ( ownerFn . isInterface ( ) && rightType . isFunctionType ( ) && leftType . isFunctionType ( ) ) { return true ; } } mismatch ( t , n , \"assignment to property \" + propName + \" of \" + getReadableJSTypeName ( owner , true ) , rightType , leftType ) ; } return false ; } return true ; }",
            "patch_index": 246,
            "per_ins": 0,
            "per_other": 3,
            "score_total": 0.761,
            "set_index": null,
            "start_line": 362,
            "tf_token_length": 198,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#boolean",
                "{#boolean#can",
                "boolean#can#assign",
                "can#assign#to",
                "assign#to#property",
                "to#property#of",
                "property#of#(",
                "of#(#node",
                "(#node#traversal",
                "node#traversal#t",
                "traversal#t#,",
                "t#,#Node",
                ",#Node#n",
                "Node#n#,",
                "n#,#j",
                ",#j#s",
                "j#s#type",
                "s#type#right",
                "type#right#type",
                "right#type#,",
                "type#,#j",
                ",#j#s",
                "j#s#type",
                "s#type#left",
                "type#left#type",
                "left#type#,",
                "type#,#Node",
                ",#Node#owner",
                "Node#owner#,",
                "owner#,#String",
                ",#String#prop",
                "String#prop#name",
                "prop#name#)",
                "name#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#!",
                "(#!#left",
                "!#left#type",
                "left#type#.",
                "type#.#no",
                ".#no#type",
                "no#type#(",
                "type#(#)",
                "(#)#&&",
                ")#&&#!",
                "&&#!#right",
                "!#right#type",
                "right#type#.",
                "type#.#assign",
                ".#assign#to",
                "assign#to#(",
                "to#(#left",
                "(#left#type",
                "left#type#)",
                "type#)#)",
                ")#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#!",
                "(#!#left",
                "!#left#type",
                "left#type#.",
                "type#.#is",
                ".#is#constructor",
                "is#constructor#(",
                "constructor#(#)",
                "(#)#&&",
                ")#&&#!",
                "&&#!#right",
                "!#right#type",
                "right#type#.",
                "type#.#assign",
                ".#assign#to",
                "assign#to#(",
                "to#(#left",
                "(#left#type",
                "left#type#)",
                "type#)#)",
                ")#)#{",
                ")#{#j",
                "{#j#s",
                "j#s#type",
                "s#type#owner",
                "type#owner#type",
                "owner#type#=",
                "type#=#j",
                "=#j#s",
                "j#s#type",
                "s#type#(",
                "type#(#owner",
                "(#owner#)",
                "owner#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#owner",
                "(#owner#type",
                "owner#type#.",
                "type#.#function",
                ".#function#prototype",
                "function#prototype#type",
                "prototype#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#function",
                "{#function#type",
                "function#type#owner",
                "type#owner#fn",
                "owner#fn#=",
                "fn#=#owner",
                "=#owner#type",
                "owner#type#.",
                "type#.#object",
                ".#object#type",
                "object#type#(",
                "type#(#)",
                "(#)#.",
                ")#.#owner",
                ".#owner#function",
                "owner#function#(",
                "function#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#owner",
                "(#owner#fn",
                "owner#fn#.",
                "fn#.#is",
                ".#is#interface",
                "is#interface#(",
                "interface#(#)",
                "(#)#&&",
                ")#&&#right",
                "&&#right#type",
                "right#type#.",
                "type#.#function",
                ".#function#type",
                "function#type#(",
                "type#(#)",
                "(#)#&&",
                ")#&&#left",
                "&&#left#type",
                "left#type#.",
                "type#.#function",
                ".#function#type",
                "function#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#true",
                "return#true#;",
                "true#;#}",
                ";#}#}",
                "}#}#mismatch",
                "}#mismatch#(",
                "mismatch#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#,",
                "n#,#\"assignment to property \"",
                ",#\"assignment to property \"#+",
                "\"assignment to property \"#+#prop",
                "+#prop#name",
                "prop#name#+",
                "name#+#\" of \"",
                "+#\" of \"#+",
                "\" of \"#+#readable",
                "+#readable#j",
                "readable#j#s",
                "j#s#type",
                "s#type#name",
                "type#name#(",
                "name#(#owner",
                "(#owner#,",
                "owner#,#true",
                ",#true#)",
                "true#)#,",
                ")#,#right",
                ",#right#type",
                "right#type#,",
                "type#,#left",
                ",#left#type",
                "left#type#)",
                "type#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#false",
                "return#false#;",
                "false#;#}",
                ";#}#return",
                "}#return#true",
                "return#true#;",
                "true#;#}",
                ";#}#}"
            ]
        },
        "1": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "boolean expectCanAssignTo ( NodeTraversal t , Node n , JSType rightType , JSType leftType , String msg ) { if ( ! rightType . canAssignTo ( leftType ) ) {  if ( ( leftType . isConstructor ( ) || leftType . isEnumType ( ) ) && ( rightType . isConstructor ( ) || rightType . isEnumType ( ) ) ) {   registerMismatch ( rightType , leftType , null ) ;   } else {  mismatch ( t , n , msg , rightType , leftType ) ;  }  return false ; } return true ; }",
            "buggy_dir": "",
            "criteria_token_length": 123,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#boolean",
                "{#boolean#can",
                "boolean#can#assign",
                "can#assign#to",
                "assign#to#(",
                "to#(#node",
                "(#node#traversal",
                "node#traversal#t",
                "traversal#t#,",
                "t#,#Node",
                ",#Node#n",
                "Node#n#,",
                "n#,#j",
                ",#j#s",
                "j#s#type",
                "s#type#right",
                "type#right#type",
                "right#type#,",
                "type#,#j",
                ",#j#s",
                "j#s#type",
                "s#type#left",
                "type#left#type",
                "left#type#,",
                "type#,#String",
                ",#String#msg",
                "String#msg#)",
                "msg#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#!",
                "(#!#right",
                "!#right#type",
                "right#type#.",
                "type#.#assign",
                ".#assign#to",
                "assign#to#(",
                "to#(#left",
                "(#left#type",
                "left#type#)",
                "type#)#)",
                ")#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#(",
                "(#(#left",
                "(#left#type",
                "left#type#.",
                "type#.#is",
                ".#is#constructor",
                "is#constructor#(",
                "constructor#(#)",
                "(#)#||",
                ")#||#left",
                "||#left#type",
                "left#type#.",
                "type#.#enum",
                ".#enum#type",
                "enum#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#&&",
                ")#&&#(",
                "&&#(#right",
                "(#right#type",
                "right#type#.",
                "type#.#is",
                ".#is#constructor",
                "is#constructor#(",
                "constructor#(#)",
                "(#)#||",
                ")#||#right",
                "||#right#type",
                "right#type#.",
                "type#.#enum",
                ".#enum#type",
                "enum#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#)",
                ")#)#{",
                ")#{#register",
                "{#register#mismatch",
                "register#mismatch#(",
                "mismatch#(#right",
                "(#right#type",
                "right#type#,",
                "type#,#left",
                ",#left#type",
                "left#type#,",
                "type#,#null",
                ",#null#)",
                "null#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#mismatch",
                "{#mismatch#(",
                "mismatch#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#,",
                "n#,#msg",
                ",#msg#,",
                "msg#,#right",
                ",#right#type",
                "right#type#,",
                "type#,#left",
                ",#left#type",
                "left#type#)",
                "type#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#false",
                "return#false#;",
                "false#;#}",
                ";#}#return",
                "}#return#true",
                "return#true#;",
                "true#;#}",
                ";#}#}"
            ],
            "diffs": {
                "4": {
                    "action": "CHANGE",
                    "buggy_end_line": 6,
                    "buggy_size": 3,
                    "buggy_start_line": 4,
                    "fixed_end_line": 4,
                    "fixed_size": 1,
                    "fixed_start_line": 4
                },
                "8": {
                    "action": "CHANGE",
                    "buggy_end_line": 8,
                    "buggy_size": 1,
                    "buggy_start_line": 8,
                    "fixed_end_line": 7,
                    "fixed_size": 2,
                    "fixed_start_line": 6
                }
            },
            "end_line": 413,
            "exp_ins": 0,
            "exp_other": 4,
            "file_ext": ".java",
            "file_key": "Closure_6_src_com_google_javascript_jscomp_TypeValidator",
            "file_name": "TypeValidator",
            "module_dir": "src/com/google/javascript/jscomp",
            "module_id": "Closure_6",
            "module_name": "Closure",
            "module_num": "6",
            "multi_chunk_key": "Closure_6_src_com_google_javascript_jscomp_TypeValidator_method1_expectCanAssignTo_NodeTraversal_Node_JSType_JSType_String",
            "ngram_score": 0.6097560975609756,
            "patch": "boolean expectCanAssignTo ( NodeTraversal t , Node n , JSType rightType , JSType leftType , String msg ) { if ( ! rightType . canAssignTo ( leftType ) ) { if ( leftType . isConstructor ( ) || leftType . isEnumType ( ) ) { mismatch ( t , n , msg , rightType , leftType ) ; } else mismatch ( t , n , msg , rightType , leftType ) ; return false ; } return true ; }",
            "patch_index": 368,
            "per_ins": 0,
            "per_other": 4,
            "score_total": 0.805,
            "set_index": null,
            "start_line": 402,
            "tf_token_length": 104,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#boolean",
                "{#boolean#can",
                "boolean#can#assign",
                "can#assign#to",
                "assign#to#(",
                "to#(#node",
                "(#node#traversal",
                "node#traversal#t",
                "traversal#t#,",
                "t#,#Node",
                ",#Node#n",
                "Node#n#,",
                "n#,#j",
                ",#j#s",
                "j#s#type",
                "s#type#right",
                "type#right#type",
                "right#type#,",
                "type#,#j",
                ",#j#s",
                "j#s#type",
                "s#type#left",
                "type#left#type",
                "left#type#,",
                "type#,#String",
                ",#String#msg",
                "String#msg#)",
                "msg#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#!",
                "(#!#right",
                "!#right#type",
                "right#type#.",
                "type#.#assign",
                ".#assign#to",
                "assign#to#(",
                "to#(#left",
                "(#left#type",
                "left#type#)",
                "type#)#)",
                ")#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#left",
                "(#left#type",
                "left#type#.",
                "type#.#is",
                ".#is#constructor",
                "is#constructor#(",
                "constructor#(#)",
                "(#)#||",
                ")#||#left",
                "||#left#type",
                "left#type#.",
                "type#.#enum",
                ".#enum#type",
                "enum#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#mismatch",
                "{#mismatch#(",
                "mismatch#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#,",
                "n#,#msg",
                ",#msg#,",
                "msg#,#right",
                ",#right#type",
                "right#type#,",
                "type#,#left",
                ",#left#type",
                "left#type#)",
                "type#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#mismatch",
                "else#mismatch#(",
                "mismatch#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#,",
                "n#,#msg",
                ",#msg#,",
                "msg#,#right",
                ",#right#type",
                "right#type#,",
                "type#,#left",
                ",#left#type",
                "left#type#)",
                "type#)#;",
                ")#;#return",
                ";#return#false",
                "return#false#;",
                "false#;#}",
                ";#}#return",
                "}#return#true",
                "return#true#;",
                "true#;#}",
                ";#}#}"
            ]
        }
    }
}