--- "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Closure_6/19792/TypeValidator_Origin.java"	2023-02-22 12:32:43.691819987 +0900
+++ "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Closure_6/19792/TypeValidator.java"	2023-02-22 12:32:43.691819987 +0900
@@ -359,35 +359,7 @@
    * @param propName The name of the property being assigned to.
    * @return True if the types matched, false otherwise.
    */
-  boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType,
-      JSType leftType, Node owner, String propName) {
-    // The NoType check is a hack to make typedefs work OK.
-    if (!leftType.isNoType() && !rightType.canAssignTo(leftType)) {
-      if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {
-        registerMismatch(rightType, leftType, null);
-      } else {
-      // Do not type-check interface methods, because we expect that
-      // they will have dummy implementations that do not match the type
-      // annotations.
-      JSType ownerType = getJSType(owner);
-      if (ownerType.isFunctionPrototypeType()) {
-        FunctionType ownerFn = ownerType.toObjectType().getOwnerFunction();
-        if (ownerFn.isInterface() &&
-            rightType.isFunctionType() && leftType.isFunctionType()) {
-          return true;
-        }
-      }
-
-      mismatch(t, n,
-          "assignment to property " + propName + " of " +
-          getReadableJSTypeName(owner, true),
-          rightType, leftType);
-      }
-      return false;
-    }
-    return true;
-  }
-
+boolean expectCanAssignToPropertyOf ( NodeTraversal t , Node n , JSType rightType , JSType leftType , Node owner , String propName ) { if ( ! leftType . isNoType ( ) && ! rightType . canAssignTo ( leftType ) ) { if ( ! leftType . isConstructor ( ) && ! rightType . canAssignTo ( leftType ) ) { JSType ownerType = getJSType ( owner ) ; if ( ownerType . isFunctionPrototypeType ( ) ) { FunctionType ownerFn = ownerType . toObjectType ( ) . getOwnerFunction ( ) ; if ( ownerFn . isInterface ( ) && rightType . isFunctionType ( ) && leftType . isFunctionType ( ) ) { return true ; } } mismatch ( t , n , "assignment to property " + propName + " of " + getReadableJSTypeName ( owner , true ) , rightType , leftType ) ; } return false ; } return true ; }
   /**
    * Expect that the first type can be assigned to a symbol of the second
    * type.
@@ -399,19 +371,7 @@
    * @param msg An extra message for the mismatch warning, if necessary.
    * @return True if the types matched, false otherwise.
    */
-  boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType,
-      JSType leftType, String msg) {
-    if (!rightType.canAssignTo(leftType)) {
-      if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {
-        registerMismatch(rightType, leftType, null);
-      } else {
-      mismatch(t, n, msg, rightType, leftType);
-      }
-      return false;
-    }
-    return true;
-  }
-
+boolean expectCanAssignTo ( NodeTraversal t , Node n , JSType rightType , JSType leftType , String msg ) { if ( ! rightType . canAssignTo ( leftType ) ) { if ( leftType . isConstructor ( ) || leftType . isEnumType ( ) ) { mismatch ( t , n , msg , rightType , leftType ) ; } else mismatch ( t , n , msg , rightType , leftType ) ; return false ; } return true ; }
   /**
    * Expect that the type of an argument matches the type of the parameter
    * that it's fulfilling.
