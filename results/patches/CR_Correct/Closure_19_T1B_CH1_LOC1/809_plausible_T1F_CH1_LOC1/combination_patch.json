{
    "ChainableReverseAbstractInterpreter": {
        "0": {
            "action_judgements": null,
            "action_score": 0.5,
            "buggy_code": "protected void declareNameInScope ( FlowScope scope , Node node , JSType type ) { switch ( node . getType ( ) ) { case Token . NAME : scope . inferSlotType ( node . getString ( ) , type ) ; break ; case Token . GETPROP : String qualifiedName = node . getQualifiedName ( ) ; Preconditions . checkNotNull ( qualifiedName ) ; JSType origType = node . getJSType ( ) ; origType = origType == null ? getNativeType ( UNKNOWN_TYPE ) : origType ; scope . inferQualifiedSlot ( node , qualifiedName , origType , type ) ; break ;  default :  throw new IllegalArgumentException ( \"Node cannot be refined. \\n\" + node . toStringTree ( ) ) ; } }",
            "buggy_dir": "",
            "criteria_token_length": 168,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#protected",
                "{#protected#void",
                "protected#void#name",
                "void#name#in",
                "name#in#scope",
                "in#scope#(",
                "scope#(#flow",
                "(#flow#scope",
                "flow#scope#scope",
                "scope#scope#,",
                "scope#,#Node",
                ",#Node#node",
                "Node#node#,",
                "node#,#j",
                ",#j#s",
                "j#s#type",
                "s#type#type",
                "type#type#)",
                "type#)#{",
                ")#{#switch",
                "{#switch#(",
                "switch#(#node",
                "(#node#.",
                "node#.#get",
                ".#get#type",
                "get#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#case",
                "{#case#Token",
                "case#Token#.",
                "Token#.#n",
                ".#n#a",
                "n#a#m",
                "a#m#e",
                "m#e#:",
                "e#:#scope",
                ":#scope#.",
                "scope#.#slot",
                ".#slot#type",
                "slot#type#(",
                "type#(#node",
                "(#node#.",
                "node#.#get",
                ".#get#string",
                "get#string#(",
                "string#(#)",
                "(#)#,",
                ")#,#type",
                ",#type#)",
                "type#)#;",
                ")#;#break",
                ";#break#;",
                "break#;#case",
                ";#case#Token",
                "case#Token#.",
                "Token#.#g",
                ".#g#e",
                "g#e#t",
                "e#t#p",
                "t#p#r",
                "p#r#o",
                "r#o#p",
                "o#p#:",
                "p#:#String",
                ":#String#qualified",
                "String#qualified#name",
                "qualified#name#=",
                "name#=#node",
                "=#node#.",
                "node#.#qualified",
                ".#qualified#name",
                "qualified#name#(",
                "name#(#)",
                "(#)#;",
                ")#;#Preconditions",
                ";#Preconditions#.",
                "Preconditions#.#not",
                ".#not#null",
                "not#null#(",
                "null#(#qualified",
                "(#qualified#name",
                "qualified#name#)",
                "name#)#;",
                ")#;#j",
                ";#j#s",
                "j#s#type",
                "s#type#orig",
                "type#orig#type",
                "orig#type#=",
                "type#=#node",
                "=#node#.",
                "node#.#j",
                ".#j#s",
                "j#s#type",
                "s#type#(",
                "type#(#)",
                "(#)#;",
                ")#;#orig",
                ";#orig#type",
                "orig#type#=",
                "type#=#orig",
                "=#orig#type",
                "orig#type#==",
                "type#==#null",
                "==#null#?",
                "null#?#native",
                "?#native#type",
                "native#type#(",
                "type#(#u",
                "(#u#n",
                "u#n#k",
                "n#k#n",
                "k#n#o",
                "n#o#w",
                "o#w#n",
                "w#n#t",
                "n#t#y",
                "t#y#p",
                "y#p#e",
                "p#e#)",
                "e#)#:",
                ")#:#orig",
                ":#orig#type",
                "orig#type#;",
                "type#;#scope",
                ";#scope#.",
                "scope#.#qualified",
                ".#qualified#slot",
                "qualified#slot#(",
                "slot#(#node",
                "(#node#,",
                "node#,#qualified",
                ",#qualified#name",
                "qualified#name#,",
                "name#,#orig",
                ",#orig#type",
                "orig#type#,",
                "type#,#type",
                ",#type#)",
                "type#)#;",
                ")#;#break",
                ";#break#;",
                "break#;#default",
                ";#default#:",
                "default#:#throw",
                ":#throw#new",
                "throw#new#illegal",
                "new#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"",
                "(#\"#node cannot be refined. \\n\"",
                "\"#node cannot be refined. \\n\"#+",
                "node cannot be refined. \\n\"#+#node",
                "+#node#.",
                "node#.#string",
                ".#string#tree",
                "string#tree#(",
                "tree#(#)",
                "(#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}"
            ],
            "diffs": {
                "15": {
                    "action": "CHANGE",
                    "buggy_end_line": 15,
                    "buggy_size": 1,
                    "buggy_start_line": 15,
                    "fixed_end_line": 15,
                    "fixed_size": 1,
                    "fixed_start_line": 15
                }
            },
            "end_line": 178,
            "exp_ins": 1,
            "exp_other": 0,
            "file_ext": ".java",
            "file_key": "Closure_19_src_com_google_javascript_jscomp_type_ChainableReverseAbstractInterpreter",
            "file_name": "ChainableReverseAbstractInterpreter",
            "module_dir": "src/com/google/javascript/jscomp/type",
            "module_id": "Closure_19",
            "module_name": "Closure",
            "module_num": "19",
            "multi_chunk_key": "Closure_19_src_com_google_javascript_jscomp_type_ChainableReverseAbstractInterpreter_method1_declareNameInScope_FlowScope_Node_JSType",
            "ngram_score": 0.8154761904761905,
            "patch": "protected void declareNameInScope ( FlowScope scope , Node node , JSType type ) { switch ( node . getType ( ) ) { case Token . NAME : scope . inferSlotType ( node . getString ( ) , type ) ; break ; case Token . GETPROP : String qualifiedName = node . getQualifiedName ( ) ; Preconditions . checkNotNull ( qualifiedName ) ; JSType origType = node . getJSType ( ) ; origType = origType == null ? getNativeType ( UNKNOWN_TYPE ) : origType ; scope . inferQualifiedSlot ( node , qualifiedName , origType , type ) ; break ; default : return ; } }",
            "patch_index": 778,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.658,
            "set_index": null,
            "start_line": 157,
            "tf_token_length": 153,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#protected",
                "{#protected#void",
                "protected#void#name",
                "void#name#in",
                "name#in#scope",
                "in#scope#(",
                "scope#(#flow",
                "(#flow#scope",
                "flow#scope#scope",
                "scope#scope#,",
                "scope#,#Node",
                ",#Node#node",
                "Node#node#,",
                "node#,#j",
                ",#j#s",
                "j#s#type",
                "s#type#type",
                "type#type#)",
                "type#)#{",
                ")#{#switch",
                "{#switch#(",
                "switch#(#node",
                "(#node#.",
                "node#.#get",
                ".#get#type",
                "get#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#case",
                "{#case#Token",
                "case#Token#.",
                "Token#.#n",
                ".#n#a",
                "n#a#m",
                "a#m#e",
                "m#e#:",
                "e#:#scope",
                ":#scope#.",
                "scope#.#slot",
                ".#slot#type",
                "slot#type#(",
                "type#(#node",
                "(#node#.",
                "node#.#get",
                ".#get#string",
                "get#string#(",
                "string#(#)",
                "(#)#,",
                ")#,#type",
                ",#type#)",
                "type#)#;",
                ")#;#break",
                ";#break#;",
                "break#;#case",
                ";#case#Token",
                "case#Token#.",
                "Token#.#g",
                ".#g#e",
                "g#e#t",
                "e#t#p",
                "t#p#r",
                "p#r#o",
                "r#o#p",
                "o#p#:",
                "p#:#String",
                ":#String#qualified",
                "String#qualified#name",
                "qualified#name#=",
                "name#=#node",
                "=#node#.",
                "node#.#qualified",
                ".#qualified#name",
                "qualified#name#(",
                "name#(#)",
                "(#)#;",
                ")#;#Preconditions",
                ";#Preconditions#.",
                "Preconditions#.#not",
                ".#not#null",
                "not#null#(",
                "null#(#qualified",
                "(#qualified#name",
                "qualified#name#)",
                "name#)#;",
                ")#;#j",
                ";#j#s",
                "j#s#type",
                "s#type#orig",
                "type#orig#type",
                "orig#type#=",
                "type#=#node",
                "=#node#.",
                "node#.#j",
                ".#j#s",
                "j#s#type",
                "s#type#(",
                "type#(#)",
                "(#)#;",
                ")#;#orig",
                ";#orig#type",
                "orig#type#=",
                "type#=#orig",
                "=#orig#type",
                "orig#type#==",
                "type#==#null",
                "==#null#?",
                "null#?#native",
                "?#native#type",
                "native#type#(",
                "type#(#u",
                "(#u#n",
                "u#n#k",
                "n#k#n",
                "k#n#o",
                "n#o#w",
                "o#w#n",
                "w#n#t",
                "n#t#y",
                "t#y#p",
                "y#p#e",
                "p#e#)",
                "e#)#:",
                ")#:#orig",
                ":#orig#type",
                "orig#type#;",
                "type#;#scope",
                ";#scope#.",
                "scope#.#qualified",
                ".#qualified#slot",
                "qualified#slot#(",
                "slot#(#node",
                "(#node#,",
                "node#,#qualified",
                ",#qualified#name",
                "qualified#name#,",
                "name#,#orig",
                ",#orig#type",
                "orig#type#,",
                "type#,#type",
                ",#type#)",
                "type#)#;",
                ")#;#break",
                ";#break#;",
                "break#;#default",
                ";#default#:",
                "default#:#return",
                ":#return#;",
                "return#;#}",
                ";#}#}",
                "}#}#}"
            ]
        }
    }
}