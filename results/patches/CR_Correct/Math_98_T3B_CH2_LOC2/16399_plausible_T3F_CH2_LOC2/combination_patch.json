{
    "BigMatrixImpl": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "public BigDecimal [ ] operate ( BigDecimal [ ] v ) throws IllegalArgumentException { if ( v . length != this . getColumnDimension ( ) ) { throw new IllegalArgumentException ( \"vector has wrong length\" ) ; } final int nRows = this . getRowDimension ( ) ; final int nCols = this . getColumnDimension ( ) ;  final BigDecimal [ ] out = new BigDecimal [ v . length ] ;  for ( int row = 0 ; row < nRows ; row ++ ) { BigDecimal sum = ZERO ; for ( int i = 0 ; i < nCols ; i ++ ) { sum = sum . add ( data [ row ] [ i ] . multiply ( v [ i ] ) ) ; } out [ row ] = sum ; } return out ; }",
            "buggy_dir": "",
            "criteria_token_length": 162,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#big",
                "public#big#decimal",
                "big#decimal#[",
                "decimal#[#]",
                "[#]#operate",
                "]#operate#(",
                "operate#(#big",
                "(#big#decimal",
                "big#decimal#[",
                "decimal#[#]",
                "[#]#v",
                "]#v#)",
                "v#)#throws",
                ")#throws#illegal",
                "throws#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#{",
                "exception#{#if",
                "{#if#(",
                "if#(#v",
                "(#v#.",
                "v#.#length",
                ".#length#!=",
                "length#!=#this",
                "!=#this#.",
                "this#.#column",
                ".#column#dimension",
                "column#dimension#(",
                "dimension#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#illegal",
                "new#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"vector has wrong length\"",
                "(#\"vector has wrong length\"#)",
                "\"vector has wrong length\"#)#;",
                ")#;#}",
                ";#}#final",
                "}#final#int",
                "final#int#n",
                "int#n#rows",
                "n#rows#=",
                "rows#=#this",
                "=#this#.",
                "this#.#row",
                ".#row#dimension",
                "row#dimension#(",
                "dimension#(#)",
                "(#)#;",
                ")#;#final",
                ";#final#int",
                "final#int#n",
                "int#n#cols",
                "n#cols#=",
                "cols#=#this",
                "=#this#.",
                "this#.#column",
                ".#column#dimension",
                "column#dimension#(",
                "dimension#(#)",
                "(#)#;",
                ")#;#final",
                ";#final#big",
                "final#big#decimal",
                "big#decimal#[",
                "decimal#[#]",
                "[#]#out",
                "]#out#=",
                "out#=#new",
                "=#new#big",
                "new#big#decimal",
                "big#decimal#[",
                "decimal#[#v",
                "[#v#.",
                "v#.#length",
                ".#length#]",
                "length#]#;",
                "]#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#row",
                "int#row#=",
                "row#=#0",
                "=#0#;",
                "0#;#row",
                ";#row#<",
                "row#<#n",
                "<#n#rows",
                "n#rows#;",
                "rows#;#row",
                ";#row#++",
                "row#++#)",
                "++#)#{",
                ")#{#big",
                "{#big#decimal",
                "big#decimal#sum",
                "decimal#sum#=",
                "sum#=#z",
                "=#z#e",
                "z#e#r",
                "e#r#o",
                "r#o#;",
                "o#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#n",
                "<#n#cols",
                "n#cols#;",
                "cols#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#sum",
                "{#sum#=",
                "sum#=#sum",
                "=#sum#.",
                "sum#.#add",
                ".#add#(",
                "add#(#data",
                "(#data#[",
                "data#[#row",
                "[#row#]",
                "row#]#[",
                "]#[#i",
                "[#i#]",
                "i#]#.",
                "]#.#multiply",
                ".#multiply#(",
                "multiply#(#v",
                "(#v#[",
                "v#[#i",
                "[#i#]",
                "i#]#)",
                "]#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#out",
                "}#out#[",
                "out#[#row",
                "[#row#]",
                "row#]#=",
                "]#=#sum",
                "=#sum#;",
                "sum#;#}",
                ";#}#return",
                "}#return#out",
                "return#out#;",
                "out#;#}",
                ";#}#}"
            ],
            "diffs": {
                "8": {
                    "action": "CHANGE",
                    "buggy_end_line": 8,
                    "buggy_size": 1,
                    "buggy_start_line": 8,
                    "fixed_end_line": 8,
                    "fixed_size": 1,
                    "fixed_start_line": 8
                }
            },
            "end_line": 1000,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Math_98_src_java_org_apache_commons_math_linear_BigMatrixImpl",
            "file_name": "BigMatrixImpl",
            "module_dir": "src/java/org/apache/commons/math/linear",
            "module_id": "Math_98",
            "module_name": "Math",
            "module_num": "98",
            "multi_chunk_key": "Math_98_src_java_org_apache_commons_math_linear_BigMatrixImpl_method1_operate_BigDecimal[]",
            "ngram_score": 0.845679012345679,
            "patch": "public BigDecimal [ ] operate ( BigDecimal [ ] v ) throws IllegalArgumentException { if ( v . length != this . getColumnDimension ( ) ) { throw new IllegalArgumentException ( \"vector has wrong length\" ) ; } final int nRows = this . getRowDimension ( ) ; final int nCols = this . getColumnDimension ( ) ; final BigDecimal [ ] out = new BigDecimal [ data . length ] ; for ( int row = 0 ; row < nRows ; row ++ ) { BigDecimal sum = ZERO ; for ( int i = 0 ; i < nCols ; i ++ ) { sum = sum . add ( data [ row ] [ i ] . multiply ( v [ i ] ) ) ; } out [ row ] = sum ; } return out ; }",
            "patch_index": 744,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.923,
            "set_index": null,
            "start_line": 985,
            "tf_token_length": 162,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#big",
                "public#big#decimal",
                "big#decimal#[",
                "decimal#[#]",
                "[#]#operate",
                "]#operate#(",
                "operate#(#big",
                "(#big#decimal",
                "big#decimal#[",
                "decimal#[#]",
                "[#]#v",
                "]#v#)",
                "v#)#throws",
                ")#throws#illegal",
                "throws#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#{",
                "exception#{#if",
                "{#if#(",
                "if#(#v",
                "(#v#.",
                "v#.#length",
                ".#length#!=",
                "length#!=#this",
                "!=#this#.",
                "this#.#column",
                ".#column#dimension",
                "column#dimension#(",
                "dimension#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#illegal",
                "new#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"vector has wrong length\"",
                "(#\"vector has wrong length\"#)",
                "\"vector has wrong length\"#)#;",
                ")#;#}",
                ";#}#final",
                "}#final#int",
                "final#int#n",
                "int#n#rows",
                "n#rows#=",
                "rows#=#this",
                "=#this#.",
                "this#.#row",
                ".#row#dimension",
                "row#dimension#(",
                "dimension#(#)",
                "(#)#;",
                ")#;#final",
                ";#final#int",
                "final#int#n",
                "int#n#cols",
                "n#cols#=",
                "cols#=#this",
                "=#this#.",
                "this#.#column",
                ".#column#dimension",
                "column#dimension#(",
                "dimension#(#)",
                "(#)#;",
                ")#;#final",
                ";#final#big",
                "final#big#decimal",
                "big#decimal#[",
                "decimal#[#]",
                "[#]#out",
                "]#out#=",
                "out#=#new",
                "=#new#big",
                "new#big#decimal",
                "big#decimal#[",
                "decimal#[#data",
                "[#data#.",
                "data#.#length",
                ".#length#]",
                "length#]#;",
                "]#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#row",
                "int#row#=",
                "row#=#0",
                "=#0#;",
                "0#;#row",
                ";#row#<",
                "row#<#n",
                "<#n#rows",
                "n#rows#;",
                "rows#;#row",
                ";#row#++",
                "row#++#)",
                "++#)#{",
                ")#{#big",
                "{#big#decimal",
                "big#decimal#sum",
                "decimal#sum#=",
                "sum#=#z",
                "=#z#e",
                "z#e#r",
                "e#r#o",
                "r#o#;",
                "o#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#n",
                "<#n#cols",
                "n#cols#;",
                "cols#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#sum",
                "{#sum#=",
                "sum#=#sum",
                "=#sum#.",
                "sum#.#add",
                ".#add#(",
                "add#(#data",
                "(#data#[",
                "data#[#row",
                "[#row#]",
                "row#]#[",
                "]#[#i",
                "[#i#]",
                "i#]#.",
                "]#.#multiply",
                ".#multiply#(",
                "multiply#(#v",
                "(#v#[",
                "v#[#i",
                "[#i#]",
                "i#]#)",
                "]#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#out",
                "}#out#[",
                "out#[#row",
                "[#row#]",
                "row#]#=",
                "]#=#sum",
                "=#sum#;",
                "sum#;#}",
                ";#}#return",
                "}#return#out",
                "return#out#;",
                "out#;#}",
                ";#}#}"
            ]
        }
    },
    "RealMatrixImpl": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "public double [ ] operate ( double [ ] v ) throws IllegalArgumentException { final int nRows = this . getRowDimension ( ) ; final int nCols = this . getColumnDimension ( ) ; if ( v . length != nCols ) { throw new IllegalArgumentException ( \"vector has wrong length\" ) ; }  final double [ ] out = new double [ v . length ] ;  for ( int row = 0 ; row < nRows ; row ++ ) { final double [ ] dataRow = data [ row ] ; double sum = 0 ; for ( int i = 0 ; i < nCols ; i ++ ) { sum += dataRow [ i ] * v [ i ] ; } out [ row ] = sum ; } return out ; }",
            "buggy_dir": "",
            "criteria_token_length": 152,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#double",
                "public#double#[",
                "double#[#]",
                "[#]#operate",
                "]#operate#(",
                "operate#(#double",
                "(#double#[",
                "double#[#]",
                "[#]#v",
                "]#v#)",
                "v#)#throws",
                ")#throws#illegal",
                "throws#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#{",
                "exception#{#final",
                "{#final#int",
                "final#int#n",
                "int#n#rows",
                "n#rows#=",
                "rows#=#this",
                "=#this#.",
                "this#.#row",
                ".#row#dimension",
                "row#dimension#(",
                "dimension#(#)",
                "(#)#;",
                ")#;#final",
                ";#final#int",
                "final#int#n",
                "int#n#cols",
                "n#cols#=",
                "cols#=#this",
                "=#this#.",
                "this#.#column",
                ".#column#dimension",
                "column#dimension#(",
                "dimension#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#v",
                "(#v#.",
                "v#.#length",
                ".#length#!=",
                "length#!=#n",
                "!=#n#cols",
                "n#cols#)",
                "cols#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#illegal",
                "new#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"vector has wrong length\"",
                "(#\"vector has wrong length\"#)",
                "\"vector has wrong length\"#)#;",
                ")#;#}",
                ";#}#final",
                "}#final#double",
                "final#double#[",
                "double#[#]",
                "[#]#out",
                "]#out#=",
                "out#=#new",
                "=#new#double",
                "new#double#[",
                "double#[#v",
                "[#v#.",
                "v#.#length",
                ".#length#]",
                "length#]#;",
                "]#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#row",
                "int#row#=",
                "row#=#0",
                "=#0#;",
                "0#;#row",
                ";#row#<",
                "row#<#n",
                "<#n#rows",
                "n#rows#;",
                "rows#;#row",
                ";#row#++",
                "row#++#)",
                "++#)#{",
                ")#{#final",
                "{#final#double",
                "final#double#[",
                "double#[#]",
                "[#]#data",
                "]#data#row",
                "data#row#=",
                "row#=#data",
                "=#data#[",
                "data#[#row",
                "[#row#]",
                "row#]#;",
                "]#;#double",
                ";#double#sum",
                "double#sum#=",
                "sum#=#0",
                "=#0#;",
                "0#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#n",
                "<#n#cols",
                "n#cols#;",
                "cols#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#sum",
                "{#sum#+=",
                "sum#+=#data",
                "+=#data#row",
                "data#row#[",
                "row#[#i",
                "[#i#]",
                "i#]#*",
                "]#*#v",
                "*#v#[",
                "v#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#}",
                ";#}#out",
                "}#out#[",
                "out#[#row",
                "[#row#]",
                "row#]#=",
                "]#=#sum",
                "=#sum#;",
                "sum#;#}",
                ";#}#return",
                "}#return#out",
                "return#out#;",
                "out#;#}",
                ";#}#}"
            ],
            "diffs": {
                "8": {
                    "action": "CHANGE",
                    "buggy_end_line": 8,
                    "buggy_size": 1,
                    "buggy_start_line": 8,
                    "fixed_end_line": 8,
                    "fixed_size": 1,
                    "fixed_start_line": 8
                }
            },
            "end_line": 789,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Math_98_src_java_org_apache_commons_math_linear_RealMatrixImpl",
            "file_name": "RealMatrixImpl",
            "module_dir": "src/java/org/apache/commons/math/linear",
            "module_id": "Math_98",
            "module_name": "Math",
            "module_num": "98",
            "multi_chunk_key": "Math_98_src_java_org_apache_commons_math_linear_RealMatrixImpl_method1_operate_double[]",
            "ngram_score": 0.875,
            "patch": "public double [ ] operate ( double [ ] v ) throws IllegalArgumentException { final int nRows = this . getRowDimension ( ) ; final int nCols = this . getColumnDimension ( ) ; if ( v . length != nCols ) { throw new IllegalArgumentException ( \"vector has wrong length\" ) ; } final double [ ] out = new double [ data . length ] ; for ( int row = 0 ; row < nRows ; row ++ ) { final double [ ] dataRow = data [ row ] ; double sum = 0 ; for ( int i = 0 ; i < nCols ; i ++ ) { sum += dataRow [ i ] * v [ i ] ; } out [ row ] = sum ; } return out ; }",
            "patch_index": 417,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.938,
            "set_index": null,
            "start_line": 773,
            "tf_token_length": 152,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#double",
                "public#double#[",
                "double#[#]",
                "[#]#operate",
                "]#operate#(",
                "operate#(#double",
                "(#double#[",
                "double#[#]",
                "[#]#v",
                "]#v#)",
                "v#)#throws",
                ")#throws#illegal",
                "throws#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#{",
                "exception#{#final",
                "{#final#int",
                "final#int#n",
                "int#n#rows",
                "n#rows#=",
                "rows#=#this",
                "=#this#.",
                "this#.#row",
                ".#row#dimension",
                "row#dimension#(",
                "dimension#(#)",
                "(#)#;",
                ")#;#final",
                ";#final#int",
                "final#int#n",
                "int#n#cols",
                "n#cols#=",
                "cols#=#this",
                "=#this#.",
                "this#.#column",
                ".#column#dimension",
                "column#dimension#(",
                "dimension#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#v",
                "(#v#.",
                "v#.#length",
                ".#length#!=",
                "length#!=#n",
                "!=#n#cols",
                "n#cols#)",
                "cols#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#illegal",
                "new#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"vector has wrong length\"",
                "(#\"vector has wrong length\"#)",
                "\"vector has wrong length\"#)#;",
                ")#;#}",
                ";#}#final",
                "}#final#double",
                "final#double#[",
                "double#[#]",
                "[#]#out",
                "]#out#=",
                "out#=#new",
                "=#new#double",
                "new#double#[",
                "double#[#data",
                "[#data#.",
                "data#.#length",
                ".#length#]",
                "length#]#;",
                "]#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#row",
                "int#row#=",
                "row#=#0",
                "=#0#;",
                "0#;#row",
                ";#row#<",
                "row#<#n",
                "<#n#rows",
                "n#rows#;",
                "rows#;#row",
                ";#row#++",
                "row#++#)",
                "++#)#{",
                ")#{#final",
                "{#final#double",
                "final#double#[",
                "double#[#]",
                "[#]#data",
                "]#data#row",
                "data#row#=",
                "row#=#data",
                "=#data#[",
                "data#[#row",
                "[#row#]",
                "row#]#;",
                "]#;#double",
                ";#double#sum",
                "double#sum#=",
                "sum#=#0",
                "=#0#;",
                "0#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#n",
                "<#n#cols",
                "n#cols#;",
                "cols#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#sum",
                "{#sum#+=",
                "sum#+=#data",
                "+=#data#row",
                "data#row#[",
                "row#[#i",
                "[#i#]",
                "i#]#*",
                "]#*#v",
                "*#v#[",
                "v#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#}",
                ";#}#out",
                "}#out#[",
                "out#[#row",
                "[#row#]",
                "row#]#=",
                "]#=#sum",
                "=#sum#;",
                "sum#;#}",
                ";#}#return",
                "}#return#out",
                "return#out#;",
                "out#;#}",
                ";#}#}"
            ]
        }
    }
}