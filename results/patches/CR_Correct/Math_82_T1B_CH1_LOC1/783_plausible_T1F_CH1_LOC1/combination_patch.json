{
    "SimplexSolver": {
        "0": {
            "action_judgements": null,
            "action_score": 0.75,
            "buggy_code": "private Integer getPivotRow ( final int col , final SimplexTableau tableau ) { double minRatio = Double . MAX_VALUE ; Integer minRatioPos = null ; for ( int i = tableau . getNumObjectiveFunctions ( ) ; i < tableau . getHeight ( ) ; i ++ ) { final double rhs = tableau . getEntry ( i , tableau . getWidth ( ) - 1 ) ; final double entry = tableau . getEntry ( i , col ) ;  if ( MathUtils . compareTo ( entry , 0 , epsilon ) >= 0 ) {  final double ratio = rhs / entry ; if ( ratio < minRatio ) { minRatio = ratio ; minRatioPos = i ; } } } return minRatioPos ; }",
            "buggy_dir": "",
            "criteria_token_length": 152,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#Integer",
                "private#Integer#pivot",
                "Integer#pivot#row",
                "pivot#row#(",
                "row#(#final",
                "(#final#int",
                "final#int#col",
                "int#col#,",
                "col#,#final",
                ",#final#simplex",
                "final#simplex#tableau",
                "simplex#tableau#tableau",
                "tableau#tableau#)",
                "tableau#)#{",
                ")#{#double",
                "{#double#min",
                "double#min#ratio",
                "min#ratio#=",
                "ratio#=#Double",
                "=#Double#.",
                "Double#.#m",
                ".#m#a",
                "m#a#x",
                "a#x#v",
                "x#v#a",
                "v#a#l",
                "a#l#u",
                "l#u#e",
                "u#e#;",
                "e#;#Integer",
                ";#Integer#ratio",
                "Integer#ratio#pos",
                "ratio#pos#=",
                "pos#=#null",
                "=#null#;",
                "null#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#tableau",
                "=#tableau#.",
                "tableau#.#num",
                ".#num#objective",
                "num#objective#functions",
                "objective#functions#(",
                "functions#(#)",
                "(#)#;",
                ")#;#i",
                ";#i#<",
                "i#<#tableau",
                "<#tableau#.",
                "tableau#.#get",
                ".#get#height",
                "get#height#(",
                "height#(#)",
                "(#)#;",
                ")#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#final",
                "{#final#double",
                "final#double#rhs",
                "double#rhs#=",
                "rhs#=#tableau",
                "=#tableau#.",
                "tableau#.#get",
                ".#get#entry",
                "get#entry#(",
                "entry#(#i",
                "(#i#,",
                "i#,#tableau",
                ",#tableau#.",
                "tableau#.#get",
                ".#get#width",
                "get#width#(",
                "width#(#)",
                "(#)#-",
                ")#-#1",
                "-#1#)",
                "1#)#;",
                ")#;#final",
                ";#final#double",
                "final#double#entry",
                "double#entry#=",
                "entry#=#tableau",
                "=#tableau#.",
                "tableau#.#get",
                ".#get#entry",
                "get#entry#(",
                "entry#(#i",
                "(#i#,",
                "i#,#col",
                ",#col#)",
                "col#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#math",
                "(#math#utils",
                "math#utils#.",
                "utils#.#compare",
                ".#compare#to",
                "compare#to#(",
                "to#(#entry",
                "(#entry#,",
                "entry#,#0",
                ",#0#,",
                "0#,#epsilon",
                ",#epsilon#)",
                "epsilon#)#>=",
                ")#>=#0",
                ">=#0#)",
                "0#)#{",
                ")#{#final",
                "{#final#double",
                "final#double#ratio",
                "double#ratio#=",
                "ratio#=#rhs",
                "=#rhs#/",
                "rhs#/#entry",
                "/#entry#;",
                "entry#;#if",
                ";#if#(",
                "if#(#ratio",
                "(#ratio#<",
                "ratio#<#min",
                "<#min#ratio",
                "min#ratio#)",
                "ratio#)#{",
                ")#{#min",
                "{#min#ratio",
                "min#ratio#=",
                "ratio#=#ratio",
                "=#ratio#;",
                "ratio#;#ratio",
                ";#ratio#pos",
                "ratio#pos#=",
                "pos#=#i",
                "=#i#;",
                "i#;#}",
                ";#}#}",
                "}#}#}",
                "}#}#return",
                "}#return#ratio",
                "return#ratio#pos",
                "ratio#pos#;",
                "pos#;#}",
                ";#}#}"
            ],
            "diffs": {
                "14": {
                    "action": "INSERT",
                    "buggy_end_line": 14,
                    "buggy_size": 0,
                    "buggy_start_line": 14,
                    "fixed_end_line": 14,
                    "fixed_size": 1,
                    "fixed_start_line": 14
                },
                "8": {
                    "action": "CHANGE",
                    "buggy_end_line": 8,
                    "buggy_size": 1,
                    "buggy_start_line": 8,
                    "fixed_end_line": 8,
                    "fixed_size": 1,
                    "fixed_start_line": 8
                }
            },
            "end_line": 91,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Math_82_src_main_java_org_apache_commons_math_optimization_linear_SimplexSolver",
            "file_name": "SimplexSolver",
            "module_dir": "src/main/java/org/apache/commons/math/optimization/linear",
            "module_id": "Math_82",
            "module_name": "Math",
            "module_num": "82",
            "multi_chunk_key": "Math_82_src_main_java_org_apache_commons_math_optimization_linear_SimplexSolver_method1_getPivotRow_int_SimplexTableau",
            "ngram_score": 0.8562091503267973,
            "patch": "private Integer getPivotRow ( final int col , final SimplexTableau tableau ) { double minRatio = Double . MAX_VALUE ; Integer minRatioPos = null ; for ( int i = tableau . getNumObjectiveFunctions ( ) ; i < tableau . getHeight ( ) ; i ++ ) { final double rhs = tableau . getEntry ( i , tableau . getWidth ( ) - 1 ) ; final double entry = tableau . getEntry ( i , col ) ; if ( MathUtils . compareTo ( entry , 0 , epsilon ) > 0 ) { final double ratio = rhs / entry ; if ( ratio < minRatio ) { minRatio = ratio ; minRatioPos = i ; } ; } } return minRatioPos ; }",
            "patch_index": 579,
            "per_ins": 1,
            "per_other": 1,
            "score_total": 0.803,
            "set_index": null,
            "start_line": 76,
            "tf_token_length": 153,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#Integer",
                "private#Integer#pivot",
                "Integer#pivot#row",
                "pivot#row#(",
                "row#(#final",
                "(#final#int",
                "final#int#col",
                "int#col#,",
                "col#,#final",
                ",#final#simplex",
                "final#simplex#tableau",
                "simplex#tableau#tableau",
                "tableau#tableau#)",
                "tableau#)#{",
                ")#{#double",
                "{#double#min",
                "double#min#ratio",
                "min#ratio#=",
                "ratio#=#Double",
                "=#Double#.",
                "Double#.#m",
                ".#m#a",
                "m#a#x",
                "a#x#v",
                "x#v#a",
                "v#a#l",
                "a#l#u",
                "l#u#e",
                "u#e#;",
                "e#;#Integer",
                ";#Integer#ratio",
                "Integer#ratio#pos",
                "ratio#pos#=",
                "pos#=#null",
                "=#null#;",
                "null#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#tableau",
                "=#tableau#.",
                "tableau#.#num",
                ".#num#objective",
                "num#objective#functions",
                "objective#functions#(",
                "functions#(#)",
                "(#)#;",
                ")#;#i",
                ";#i#<",
                "i#<#tableau",
                "<#tableau#.",
                "tableau#.#get",
                ".#get#height",
                "get#height#(",
                "height#(#)",
                "(#)#;",
                ")#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#final",
                "{#final#double",
                "final#double#rhs",
                "double#rhs#=",
                "rhs#=#tableau",
                "=#tableau#.",
                "tableau#.#get",
                ".#get#entry",
                "get#entry#(",
                "entry#(#i",
                "(#i#,",
                "i#,#tableau",
                ",#tableau#.",
                "tableau#.#get",
                ".#get#width",
                "get#width#(",
                "width#(#)",
                "(#)#-",
                ")#-#1",
                "-#1#)",
                "1#)#;",
                ")#;#final",
                ";#final#double",
                "final#double#entry",
                "double#entry#=",
                "entry#=#tableau",
                "=#tableau#.",
                "tableau#.#get",
                ".#get#entry",
                "get#entry#(",
                "entry#(#i",
                "(#i#,",
                "i#,#col",
                ",#col#)",
                "col#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#math",
                "(#math#utils",
                "math#utils#.",
                "utils#.#compare",
                ".#compare#to",
                "compare#to#(",
                "to#(#entry",
                "(#entry#,",
                "entry#,#0",
                ",#0#,",
                "0#,#epsilon",
                ",#epsilon#)",
                "epsilon#)#>",
                ")#>#0",
                ">#0#)",
                "0#)#{",
                ")#{#final",
                "{#final#double",
                "final#double#ratio",
                "double#ratio#=",
                "ratio#=#rhs",
                "=#rhs#/",
                "rhs#/#entry",
                "/#entry#;",
                "entry#;#if",
                ";#if#(",
                "if#(#ratio",
                "(#ratio#<",
                "ratio#<#min",
                "<#min#ratio",
                "min#ratio#)",
                "ratio#)#{",
                ")#{#min",
                "{#min#ratio",
                "min#ratio#=",
                "ratio#=#ratio",
                "=#ratio#;",
                "ratio#;#ratio",
                ";#ratio#pos",
                "ratio#pos#=",
                "pos#=#i",
                "=#i#;",
                "i#;#}",
                ";#}#;",
                "}#;#}",
                ";#}#}",
                "}#}#return",
                "}#return#ratio",
                "return#ratio#pos",
                "ratio#pos#;",
                "pos#;#}",
                ";#}#}"
            ]
        }
    }
}