{
    "Complex": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "public Complex reciprocal ( ) { if ( isNaN ) { return NaN ; } if ( real == 0.0 && imaginary == 0.0 ) {  return NaN ;  } if ( isInfinite ) { return ZERO ; } if ( FastMath . abs ( real ) < FastMath . abs ( imaginary ) ) { double q = real / imaginary ; double scale = 1. / ( real * q + imaginary ) ; return createComplex ( scale * q , - scale ) ; } else { double q = imaginary / real ; double scale = 1. / ( imaginary * q + real ) ; return createComplex ( scale , - scale * q ) ; } }",
            "buggy_dir": "",
            "criteria_token_length": 137,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#Complex",
                "public#Complex#reciprocal",
                "Complex#reciprocal#(",
                "reciprocal#(#)",
                "(#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#na",
                "(#na#n",
                "na#n#)",
                "n#)#{",
                ")#{#return",
                "{#return#na",
                "return#na#n",
                "na#n#;",
                "n#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#real",
                "(#real#==",
                "real#==#0.0",
                "==#0.0#&&",
                "0.0#&&#imaginary",
                "&&#imaginary#==",
                "imaginary#==#0.0",
                "==#0.0#)",
                "0.0#)#{",
                ")#{#return",
                "{#return#na",
                "return#na#n",
                "na#n#;",
                "n#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#is",
                "(#is#infinite",
                "is#infinite#)",
                "infinite#)#{",
                ")#{#return",
                "{#return#z",
                "return#z#e",
                "z#e#r",
                "e#r#o",
                "r#o#;",
                "o#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#fast",
                "(#fast#math",
                "fast#math#.",
                "math#.#abs",
                ".#abs#(",
                "abs#(#real",
                "(#real#)",
                "real#)#<",
                ")#<#fast",
                "<#fast#math",
                "fast#math#.",
                "math#.#abs",
                ".#abs#(",
                "abs#(#imaginary",
                "(#imaginary#)",
                "imaginary#)#)",
                ")#)#{",
                ")#{#double",
                "{#double#q",
                "double#q#=",
                "q#=#real",
                "=#real#/",
                "real#/#imaginary",
                "/#imaginary#;",
                "imaginary#;#double",
                ";#double#scale",
                "double#scale#=",
                "scale#=#1.",
                "=#1.#/",
                "1.#/#(",
                "/#(#real",
                "(#real#*",
                "real#*#q",
                "*#q#+",
                "q#+#imaginary",
                "+#imaginary#)",
                "imaginary#)#;",
                ")#;#return",
                ";#return#create",
                "return#create#complex",
                "create#complex#(",
                "complex#(#scale",
                "(#scale#*",
                "scale#*#q",
                "*#q#,",
                "q#,#-",
                ",#-#scale",
                "-#scale#)",
                "scale#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#double",
                "{#double#q",
                "double#q#=",
                "q#=#imaginary",
                "=#imaginary#/",
                "imaginary#/#real",
                "/#real#;",
                "real#;#double",
                ";#double#scale",
                "double#scale#=",
                "scale#=#1.",
                "=#1.#/",
                "1.#/#(",
                "/#(#imaginary",
                "(#imaginary#*",
                "imaginary#*#q",
                "*#q#+",
                "q#+#real",
                "+#real#)",
                "real#)#;",
                ")#;#return",
                ";#return#create",
                "return#create#complex",
                "create#complex#(",
                "complex#(#scale",
                "(#scale#,",
                "scale#,#-",
                ",#-#scale",
                "-#scale#*",
                "scale#*#q",
                "*#q#)",
                "q#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}"
            ],
            "diffs": {
                "7": {
                    "action": "CHANGE",
                    "buggy_end_line": 7,
                    "buggy_size": 1,
                    "buggy_start_line": 7,
                    "fixed_end_line": 7,
                    "fixed_size": 1,
                    "fixed_start_line": 7
                }
            },
            "end_line": 321,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Math_5_src_main_java_org_apache_commons_math3_complex_Complex",
            "file_name": "Complex",
            "module_dir": "src/main/java/org/apache/commons/math3/complex",
            "module_id": "Math_5",
            "module_name": "Math",
            "module_num": "5",
            "multi_chunk_key": "Math_5_src_main_java_org_apache_commons_math3_complex_Complex_method1_reciprocal",
            "ngram_score": 0.782608695652174,
            "patch": "public Complex reciprocal ( ) { if ( isNaN ) { return NaN ; } if ( real == 0.0 && imaginary == 0.0 ) { return INF ; } if ( isInfinite ) { return ZERO ; } if ( FastMath . abs ( real ) < FastMath . abs ( imaginary ) ) { double q = real / imaginary ; double scale = 1. / ( real * q + imaginary ) ; return createComplex ( scale * q , - scale ) ; } else { double q = imaginary / real ; double scale = 1. / ( imaginary * q + real ) ; return createComplex ( scale , - scale * q ) ; } }",
            "patch_index": 56,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.891,
            "set_index": null,
            "start_line": 299,
            "tf_token_length": 138,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#Complex",
                "public#Complex#reciprocal",
                "Complex#reciprocal#(",
                "reciprocal#(#)",
                "(#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#na",
                "(#na#n",
                "na#n#)",
                "n#)#{",
                ")#{#return",
                "{#return#na",
                "return#na#n",
                "na#n#;",
                "n#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#real",
                "(#real#==",
                "real#==#0.0",
                "==#0.0#&&",
                "0.0#&&#imaginary",
                "&&#imaginary#==",
                "imaginary#==#0.0",
                "==#0.0#)",
                "0.0#)#{",
                ")#{#return",
                "{#return#i",
                "return#i#n",
                "i#n#f",
                "n#f#;",
                "f#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#is",
                "(#is#infinite",
                "is#infinite#)",
                "infinite#)#{",
                ")#{#return",
                "{#return#z",
                "return#z#e",
                "z#e#r",
                "e#r#o",
                "r#o#;",
                "o#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#fast",
                "(#fast#math",
                "fast#math#.",
                "math#.#abs",
                ".#abs#(",
                "abs#(#real",
                "(#real#)",
                "real#)#<",
                ")#<#fast",
                "<#fast#math",
                "fast#math#.",
                "math#.#abs",
                ".#abs#(",
                "abs#(#imaginary",
                "(#imaginary#)",
                "imaginary#)#)",
                ")#)#{",
                ")#{#double",
                "{#double#q",
                "double#q#=",
                "q#=#real",
                "=#real#/",
                "real#/#imaginary",
                "/#imaginary#;",
                "imaginary#;#double",
                ";#double#scale",
                "double#scale#=",
                "scale#=#1.",
                "=#1.#/",
                "1.#/#(",
                "/#(#real",
                "(#real#*",
                "real#*#q",
                "*#q#+",
                "q#+#imaginary",
                "+#imaginary#)",
                "imaginary#)#;",
                ")#;#return",
                ";#return#create",
                "return#create#complex",
                "create#complex#(",
                "complex#(#scale",
                "(#scale#*",
                "scale#*#q",
                "*#q#,",
                "q#,#-",
                ",#-#scale",
                "-#scale#)",
                "scale#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#double",
                "{#double#q",
                "double#q#=",
                "q#=#imaginary",
                "=#imaginary#/",
                "imaginary#/#real",
                "/#real#;",
                "real#;#double",
                ";#double#scale",
                "double#scale#=",
                "scale#=#1.",
                "=#1.#/",
                "1.#/#(",
                "/#(#imaginary",
                "(#imaginary#*",
                "imaginary#*#q",
                "*#q#+",
                "q#+#real",
                "+#real#)",
                "real#)#;",
                ")#;#return",
                ";#return#create",
                "return#create#complex",
                "create#complex#(",
                "complex#(#scale",
                "(#scale#,",
                "scale#,#-",
                ",#-#scale",
                "-#scale#*",
                "scale#*#q",
                "*#q#)",
                "q#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}"
            ]
        }
    }
}