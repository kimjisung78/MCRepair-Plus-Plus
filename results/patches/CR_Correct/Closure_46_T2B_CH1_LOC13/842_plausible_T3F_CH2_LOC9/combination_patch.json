{
    "RecordType": {
        "0": {
            "action_judgements": null,
            "action_score": 0.8461538461538461,
            "buggy_code": " @ Override   public JSType getLeastSupertype ( JSType that ) {   if ( ! that . isRecordType ( ) ) {   return super . getLeastSupertype ( that ) ;   }   RecordTypeBuilder builder = new RecordTypeBuilder ( registry ) ;   for ( String property : properties . keySet ( ) ) {   if ( that . toMaybeRecordType ( ) . hasProperty ( property ) && that . toMaybeRecordType ( ) . getPropertyType ( property ) . isEquivalentTo ( getPropertyType ( property ) ) ) {   builder . addProperty ( property , getPropertyType ( property ) , getPropertyNode ( property ) ) ;   }   }   return builder . build ( ) ;   } ",
            "buggy_dir": "",
            "criteria_token_length": 136,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#@",
                "{#@#Override",
                "@#Override#public",
                "Override#public#j",
                "public#j#s",
                "j#s#type",
                "s#type#least",
                "type#least#supertype",
                "least#supertype#(",
                "supertype#(#j",
                "(#j#s",
                "j#s#type",
                "s#type#that",
                "type#that#)",
                "that#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#!",
                "(#!#that",
                "!#that#.",
                "that#.#record",
                ".#record#type",
                "record#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#super",
                "return#super#.",
                "super#.#least",
                ".#least#supertype",
                "least#supertype#(",
                "supertype#(#that",
                "(#that#)",
                "that#)#;",
                ")#;#}",
                ";#}#record",
                "}#record#type",
                "record#type#builder",
                "type#builder#builder",
                "builder#builder#=",
                "builder#=#new",
                "=#new#record",
                "new#record#type",
                "record#type#builder",
                "type#builder#(",
                "builder#(#registry",
                "(#registry#)",
                "registry#)#;",
                ")#;#for",
                ";#for#(",
                "for#(#String",
                "(#String#property",
                "String#property#:",
                "property#:#properties",
                ":#properties#.",
                "properties#.#key",
                ".#key#set",
                "key#set#(",
                "set#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#that",
                "(#that#.",
                "that#.#maybe",
                ".#maybe#record",
                "maybe#record#type",
                "record#type#(",
                "type#(#)",
                "(#)#.",
                ")#.#has",
                ".#has#property",
                "has#property#(",
                "property#(#property",
                "(#property#)",
                "property#)#&&",
                ")#&&#that",
                "&&#that#.",
                "that#.#maybe",
                ".#maybe#record",
                "maybe#record#type",
                "record#type#(",
                "type#(#)",
                "(#)#.",
                ")#.#property",
                ".#property#type",
                "property#type#(",
                "type#(#property",
                "(#property#)",
                "property#)#.",
                ")#.#equivalent",
                ".#equivalent#to",
                "equivalent#to#(",
                "to#(#property",
                "(#property#type",
                "property#type#(",
                "type#(#property",
                "(#property#)",
                "property#)#)",
                ")#)#)",
                ")#)#{",
                ")#{#builder",
                "{#builder#.",
                "builder#.#add",
                ".#add#property",
                "add#property#(",
                "property#(#property",
                "(#property#,",
                "property#,#property",
                ",#property#type",
                "property#type#(",
                "type#(#property",
                "(#property#)",
                "property#)#,",
                ")#,#property",
                ",#property#node",
                "property#node#(",
                "node#(#property",
                "(#property#)",
                "property#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#return",
                "}#return#builder",
                "return#builder#.",
                "builder#.#build",
                ".#build#(",
                "build#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#}"
            ],
            "diffs": {
                "4": {
                    "action": "CHANGE",
                    "buggy_end_line": 4,
                    "buggy_size": 1,
                    "buggy_start_line": 4,
                    "fixed_end_line": 4,
                    "fixed_size": 1,
                    "fixed_start_line": 4
                },
                "6": {
                    "action": "DELETE",
                    "buggy_end_line": 13,
                    "buggy_size": 8,
                    "buggy_start_line": 6,
                    "fixed_end_line": 6,
                    "fixed_size": 0,
                    "fixed_start_line": 6
                }
            },
            "end_line": 155,
            "exp_ins": 0,
            "exp_other": 13,
            "file_ext": ".java",
            "file_key": "Closure_46_src_com_google_javascript_rhino_jstype_RecordType",
            "file_name": "RecordType",
            "module_dir": "src/com/google/javascript/rhino/jstype",
            "module_id": "Closure_46",
            "module_name": "Closure",
            "module_num": "46",
            "multi_chunk_key": "Closure_46_src_com_google_javascript_rhino_jstype_RecordType_method1_getLeastSupertype_JSType",
            "ngram_score": 0.17647058823529413,
            "patch": "@ Override public JSType getLeastSupertype ( JSType that ) { super . getLeastSupertype ( that ) ; return super . getLeastSupertype ( that ) ; }",
            "patch_index": 43,
            "per_ins": 0,
            "per_other": 9,
            "score_total": 0.511,
            "set_index": null,
            "start_line": 140,
            "tf_token_length": 36,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#@",
                "{#@#Override",
                "@#Override#public",
                "Override#public#j",
                "public#j#s",
                "j#s#type",
                "s#type#least",
                "type#least#supertype",
                "least#supertype#(",
                "supertype#(#j",
                "(#j#s",
                "j#s#type",
                "s#type#that",
                "type#that#)",
                "that#)#{",
                ")#{#super",
                "{#super#.",
                "super#.#least",
                ".#least#supertype",
                "least#supertype#(",
                "supertype#(#that",
                "(#that#)",
                "that#)#;",
                ")#;#return",
                ";#return#super",
                "return#super#.",
                "super#.#least",
                ".#least#supertype",
                "least#supertype#(",
                "supertype#(#that",
                "(#that#)",
                "that#)#;",
                ")#;#}",
                ";#}#}"
            ]
        }
    }
}