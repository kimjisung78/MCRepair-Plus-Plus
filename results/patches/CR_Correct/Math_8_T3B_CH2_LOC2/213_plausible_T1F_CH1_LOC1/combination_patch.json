{
    "DiscreteDistribution": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": " public T [ ] sample ( int sampleSize ) throws NotStrictlyPositiveException {  if ( sampleSize <= 0 ) { throw new NotStrictlyPositiveException ( LocalizedFormats . NUMBER_OF_SAMPLES , sampleSize ) ; }  final T [ ] out = ( T [ ] ) java . lang . reflect . Array . newInstance ( singletons . get ( 0 ) . getClass ( ) , sampleSize ) ;  for ( int i = 0 ; i < sampleSize ; i ++ ) { out [ i ] = sample ( ) ; } return out ; }",
            "buggy_dir": "",
            "criteria_token_length": 126,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#T",
                "public#T#[",
                "T#[#]",
                "[#]#sample",
                "]#sample#(",
                "sample#(#int",
                "(#int#sample",
                "int#sample#size",
                "sample#size#)",
                "size#)#throws",
                ")#throws#not",
                "throws#not#strictly",
                "not#strictly#positive",
                "strictly#positive#exception",
                "positive#exception#{",
                "exception#{#if",
                "{#if#(",
                "if#(#sample",
                "(#sample#size",
                "sample#size#<=",
                "size#<=#0",
                "<=#0#)",
                "0#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#not",
                "new#not#strictly",
                "not#strictly#positive",
                "strictly#positive#exception",
                "positive#exception#(",
                "exception#(#localized",
                "(#localized#formats",
                "localized#formats#.",
                "formats#.#n",
                ".#n#u",
                "n#u#m",
                "u#m#b",
                "m#b#e",
                "b#e#r",
                "e#r#o",
                "r#o#f",
                "o#f#s",
                "f#s#a",
                "s#a#m",
                "a#m#p",
                "m#p#l",
                "p#l#e",
                "l#e#s",
                "e#s#,",
                "s#,#sample",
                ",#sample#size",
                "sample#size#)",
                "size#)#;",
                ")#;#}",
                ";#}#final",
                "}#final#T",
                "final#T#[",
                "T#[#]",
                "[#]#out",
                "]#out#=",
                "out#=#(",
                "=#(#T",
                "(#T#[",
                "T#[#]",
                "[#]#)",
                "]#)#java",
                ")#java#.",
                "java#.#lang",
                ".#lang#.",
                "lang#.#reflect",
                ".#reflect#.",
                "reflect#.#Array",
                ".#Array#.",
                "Array#.#new",
                ".#new#instance",
                "new#instance#(",
                "instance#(#singletons",
                "(#singletons#.",
                "singletons#.#get",
                ".#get#(",
                "get#(#0",
                "(#0#)",
                "0#)#.",
                ")#.#get",
                ".#get#class",
                "get#class#(",
                "class#(#)",
                "(#)#,",
                ")#,#sample",
                ",#sample#size",
                "sample#size#)",
                "size#)#;",
                ")#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#sample",
                "<#sample#size",
                "sample#size#;",
                "size#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#out",
                "{#out#[",
                "out#[#i",
                "[#i#]",
                "i#]#=",
                "]#=#sample",
                "=#sample#(",
                "sample#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#out",
                "return#out#;",
                "out#;#}",
                ";#}#}"
            ],
            "diffs": {
                "2": {
                    "action": "CHANGE",
                    "buggy_end_line": 2,
                    "buggy_size": 1,
                    "buggy_start_line": 2,
                    "fixed_end_line": 2,
                    "fixed_size": 1,
                    "fixed_start_line": 2
                },
                "6": {
                    "action": "CHANGE",
                    "buggy_end_line": 6,
                    "buggy_size": 1,
                    "buggy_start_line": 6,
                    "fixed_end_line": 6,
                    "fixed_size": 1,
                    "fixed_start_line": 6
                }
            },
            "end_line": 195,
            "exp_ins": 0,
            "exp_other": 2,
            "file_ext": ".java",
            "file_key": "Math_8_src_main_java_org_apache_commons_math3_distribution_DiscreteDistribution",
            "file_name": "DiscreteDistribution",
            "module_dir": "src/main/java/org/apache/commons/math3/distribution",
            "module_id": "Math_8",
            "module_name": "Math",
            "module_num": "8",
            "multi_chunk_key": "Math_8_src_main_java_org_apache_commons_math3_distribution_DiscreteDistribution_method1_sample_int",
            "ngram_score": 0.8650793650793651,
            "patch": "public T [ ] sample ( int sampleSize ) { if ( sampleSize <= 0 ) { throw new NotStrictlyPositiveException ( LocalizedFormats . NUMBER_OF_SAMPLES , sampleSize ) ; } final T [ ] out = ( T [ ] ) java . lang . reflect . Array . newInstance ( singletons . get ( sampleSize ) . getClass ( ) , sampleSize ) ; for ( int i = 0 ; i < sampleSize ; i ++ ) { out [ i ] = sample ( ) ; } return out ; }",
            "patch_index": 557,
            "per_ins": 0,
            "per_other": 2,
            "score_total": 0.933,
            "set_index": null,
            "start_line": 181,
            "tf_token_length": 122,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#T",
                "public#T#[",
                "T#[#]",
                "[#]#sample",
                "]#sample#(",
                "sample#(#int",
                "(#int#sample",
                "int#sample#size",
                "sample#size#)",
                "size#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#sample",
                "(#sample#size",
                "sample#size#<=",
                "size#<=#0",
                "<=#0#)",
                "0#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#not",
                "new#not#strictly",
                "not#strictly#positive",
                "strictly#positive#exception",
                "positive#exception#(",
                "exception#(#localized",
                "(#localized#formats",
                "localized#formats#.",
                "formats#.#n",
                ".#n#u",
                "n#u#m",
                "u#m#b",
                "m#b#e",
                "b#e#r",
                "e#r#o",
                "r#o#f",
                "o#f#s",
                "f#s#a",
                "s#a#m",
                "a#m#p",
                "m#p#l",
                "p#l#e",
                "l#e#s",
                "e#s#,",
                "s#,#sample",
                ",#sample#size",
                "sample#size#)",
                "size#)#;",
                ")#;#}",
                ";#}#final",
                "}#final#T",
                "final#T#[",
                "T#[#]",
                "[#]#out",
                "]#out#=",
                "out#=#(",
                "=#(#T",
                "(#T#[",
                "T#[#]",
                "[#]#)",
                "]#)#java",
                ")#java#.",
                "java#.#lang",
                ".#lang#.",
                "lang#.#reflect",
                ".#reflect#.",
                "reflect#.#Array",
                ".#Array#.",
                "Array#.#new",
                ".#new#instance",
                "new#instance#(",
                "instance#(#singletons",
                "(#singletons#.",
                "singletons#.#get",
                ".#get#(",
                "get#(#sample",
                "(#sample#size",
                "sample#size#)",
                "size#)#.",
                ")#.#get",
                ".#get#class",
                "get#class#(",
                "class#(#)",
                "(#)#,",
                ")#,#sample",
                ",#sample#size",
                "sample#size#)",
                "size#)#;",
                ")#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#sample",
                "<#sample#size",
                "sample#size#;",
                "size#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#out",
                "{#out#[",
                "out#[#i",
                "[#i#]",
                "i#]#=",
                "]#=#sample",
                "=#sample#(",
                "sample#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#out",
                "return#out#;",
                "out#;#}",
                ";#}#}"
            ]
        }
    }
}