--- "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Closure_102/755/Normalize_Origin.java"	2023-02-22 14:53:24.300120888 +0900
+++ "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Closure_102/755/Normalize.java"	2023-02-22 14:53:24.300120888 +0900
@@ -83,19 +83,7 @@
     compiler.reportCodeChange();
   }
 
-  @Override
-  public void process(Node externs, Node root) {
-    NodeTraversal.traverse(compiler, root, this);
-    if (MAKE_LOCAL_NAMES_UNIQUE) {
-      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
-      NodeTraversal t = new NodeTraversal(compiler, renamer);
-      t.traverseRoots(externs, root);
-    }
-    removeDuplicateDeclarations(root);
-    new PropogateConstantAnnotations(compiler, assertOnChange)
-        .process(externs, root);
-  }
-
+@ Override public void process ( Node externs , Node root ) { NodeTraversal . traverse ( compiler , root , this ) ; removeDuplicateDeclarations ( root ) ; if ( MAKE_LOCAL_NAMES_UNIQUE ) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique ( ) ; NodeTraversal t = new NodeTraversal ( compiler , renamer ) ; t . traverseRoots ( externs , root ) ; } new PropogateConstantAnnotations ( compiler , assertOnChange ) . process ( externs , root ) ; return ; }
   @Override
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
     doStatementNormalizations(t, n, parent);
