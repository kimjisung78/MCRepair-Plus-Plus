{
    "Normalize": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "@ Override public void process ( Node externs , Node root ) { NodeTraversal . traverse ( compiler , root , this ) ;  if ( MAKE_LOCAL_NAMES_UNIQUE ) {  MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique ( ) ; NodeTraversal t = new NodeTraversal ( compiler , renamer ) ; t . traverseRoots ( externs , root ) ; }  removeDuplicateDeclarations ( root ) ;  new PropogateConstantAnnotations ( compiler , assertOnChange ) . process ( externs , root ) ; }",
            "buggy_dir": "",
            "criteria_token_length": 115,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#@",
                "{#@#Override",
                "@#Override#public",
                "Override#public#void",
                "public#void#process",
                "void#process#(",
                "process#(#Node",
                "(#Node#externs",
                "Node#externs#,",
                "externs#,#Node",
                ",#Node#root",
                "Node#root#)",
                "root#)#{",
                ")#{#node",
                "{#node#traversal",
                "node#traversal#.",
                "traversal#.#traverse",
                ".#traverse#(",
                "traverse#(#compiler",
                "(#compiler#,",
                "compiler#,#root",
                ",#root#,",
                "root#,#this",
                ",#this#)",
                "this#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#m",
                "(#m#a",
                "m#a#k",
                "a#k#e",
                "k#e#l",
                "e#l#o",
                "l#o#c",
                "o#c#a",
                "c#a#l",
                "a#l#n",
                "l#n#a",
                "n#a#m",
                "a#m#e",
                "m#e#s",
                "e#s#u",
                "s#u#n",
                "u#n#i",
                "n#i#q",
                "i#q#u",
                "q#u#e",
                "u#e#)",
                "e#)#{",
                ")#{#make",
                "{#make#declared",
                "make#declared#names",
                "declared#names#unique",
                "names#unique#renamer",
                "unique#renamer#=",
                "renamer#=#new",
                "=#new#make",
                "new#make#declared",
                "make#declared#names",
                "declared#names#unique",
                "names#unique#(",
                "unique#(#)",
                "(#)#;",
                ")#;#node",
                ";#node#traversal",
                "node#traversal#t",
                "traversal#t#=",
                "t#=#new",
                "=#new#node",
                "new#node#traversal",
                "node#traversal#(",
                "traversal#(#compiler",
                "(#compiler#,",
                "compiler#,#renamer",
                ",#renamer#)",
                "renamer#)#;",
                ")#;#t",
                ";#t#.",
                "t#.#traverse",
                ".#traverse#roots",
                "traverse#roots#(",
                "roots#(#externs",
                "(#externs#,",
                "externs#,#root",
                ",#root#)",
                "root#)#;",
                ")#;#}",
                ";#}#duplicate",
                "}#duplicate#declarations",
                "duplicate#declarations#(",
                "declarations#(#root",
                "(#root#)",
                "root#)#;",
                ")#;#new",
                ";#new#propogate",
                "new#propogate#constant",
                "propogate#constant#annotations",
                "constant#annotations#(",
                "annotations#(#compiler",
                "(#compiler#,",
                "compiler#,#on",
                ",#on#change",
                "on#change#)",
                "change#)#.",
                ")#.#process",
                ".#process#(",
                "process#(#externs",
                "(#externs#,",
                "externs#,#root",
                ",#root#)",
                "root#)#;",
                ")#;#}",
                ";#}#}"
            ],
            "diffs": {
                "10": {
                    "action": "DELETE",
                    "buggy_end_line": 10,
                    "buggy_size": 1,
                    "buggy_start_line": 10,
                    "fixed_end_line": 11,
                    "fixed_size": 0,
                    "fixed_start_line": 11
                },
                "5": {
                    "action": "INSERT",
                    "buggy_end_line": 5,
                    "buggy_size": 0,
                    "buggy_start_line": 5,
                    "fixed_end_line": 5,
                    "fixed_size": 1,
                    "fixed_start_line": 5
                }
            },
            "end_line": 97,
            "exp_ins": 1,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Closure_102_src_com_google_javascript_jscomp_Normalize",
            "file_name": "Normalize",
            "module_dir": "src/com/google/javascript/jscomp",
            "module_id": "Closure_102",
            "module_name": "Closure",
            "module_num": "102",
            "multi_chunk_key": "Closure_102_src_com_google_javascript_jscomp_Normalize_method1_process_Node_Node",
            "ngram_score": 0.8782608695652174,
            "patch": "@ Override public void process ( Node externs , Node root ) { NodeTraversal . traverse ( compiler , root , this ) ; removeDuplicateDeclarations ( root ) ; if ( MAKE_LOCAL_NAMES_UNIQUE ) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique ( ) ; NodeTraversal t = new NodeTraversal ( compiler , renamer ) ; t . traverseRoots ( externs , root ) ; } new PropogateConstantAnnotations ( compiler , assertOnChange ) . process ( externs , root ) ; }",
            "patch_index": 644,
            "per_ins": 1,
            "per_other": 1,
            "score_total": 0.939,
            "set_index": null,
            "start_line": 86,
            "tf_token_length": 115,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#@",
                "{#@#Override",
                "@#Override#public",
                "Override#public#void",
                "public#void#process",
                "void#process#(",
                "process#(#Node",
                "(#Node#externs",
                "Node#externs#,",
                "externs#,#Node",
                ",#Node#root",
                "Node#root#)",
                "root#)#{",
                ")#{#node",
                "{#node#traversal",
                "node#traversal#.",
                "traversal#.#traverse",
                ".#traverse#(",
                "traverse#(#compiler",
                "(#compiler#,",
                "compiler#,#root",
                ",#root#,",
                "root#,#this",
                ",#this#)",
                "this#)#;",
                ")#;#duplicate",
                ";#duplicate#declarations",
                "duplicate#declarations#(",
                "declarations#(#root",
                "(#root#)",
                "root#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#m",
                "(#m#a",
                "m#a#k",
                "a#k#e",
                "k#e#l",
                "e#l#o",
                "l#o#c",
                "o#c#a",
                "c#a#l",
                "a#l#n",
                "l#n#a",
                "n#a#m",
                "a#m#e",
                "m#e#s",
                "e#s#u",
                "s#u#n",
                "u#n#i",
                "n#i#q",
                "i#q#u",
                "q#u#e",
                "u#e#)",
                "e#)#{",
                ")#{#make",
                "{#make#declared",
                "make#declared#names",
                "declared#names#unique",
                "names#unique#renamer",
                "unique#renamer#=",
                "renamer#=#new",
                "=#new#make",
                "new#make#declared",
                "make#declared#names",
                "declared#names#unique",
                "names#unique#(",
                "unique#(#)",
                "(#)#;",
                ")#;#node",
                ";#node#traversal",
                "node#traversal#t",
                "traversal#t#=",
                "t#=#new",
                "=#new#node",
                "new#node#traversal",
                "node#traversal#(",
                "traversal#(#compiler",
                "(#compiler#,",
                "compiler#,#renamer",
                ",#renamer#)",
                "renamer#)#;",
                ")#;#t",
                ";#t#.",
                "t#.#traverse",
                ".#traverse#roots",
                "traverse#roots#(",
                "roots#(#externs",
                "(#externs#,",
                "externs#,#root",
                ",#root#)",
                "root#)#;",
                ")#;#}",
                ";#}#new",
                "}#new#propogate",
                "new#propogate#constant",
                "propogate#constant#annotations",
                "constant#annotations#(",
                "annotations#(#compiler",
                "(#compiler#,",
                "compiler#,#on",
                ",#on#change",
                "on#change#)",
                "change#)#.",
                ")#.#process",
                ".#process#(",
                "process#(#externs",
                "(#externs#,",
                "externs#,#root",
                ",#root#)",
                "root#)#;",
                ")#;#}",
                ";#}#}"
            ]
        }
    }
}