--- "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Chart_9/361/TimeSeries_Origin.java"	2023-02-22 11:34:36.233394901 +0900
+++ "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Chart_9/361/TimeSeries.java"	2023-02-22 11:34:36.237394920 +0900
@@ -915,46 +915,7 @@
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
-    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
-        throws CloneNotSupportedException {
-
-        if (start == null) {
-            throw new IllegalArgumentException("Null 'start' argument.");
-        }
-        if (end == null) {
-            throw new IllegalArgumentException("Null 'end' argument.");
-        }
-        if (start.compareTo(end) > 0) {
-            throw new IllegalArgumentException(
-                    "Requires start on or before end.");
-        }
-        boolean emptyRange = false;
-        int startIndex = getIndex(start);
-        if (startIndex < 0) {
-            startIndex = -(startIndex + 1);
-            if (startIndex == this.data.size()) {
-                emptyRange = true;  // start is after last data item
-            }
-        }
-        int endIndex = getIndex(end);
-        if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
-        }
-        if (endIndex < 0) {
-            emptyRange = true;
-        }
-        if (emptyRange) {
-            TimeSeries copy = (TimeSeries) super.clone();
-            copy.data = new java.util.ArrayList();
-            return copy;
-        }
-        else {
-            return createCopy(startIndex, endIndex);
-        }
-
-    }
-
+public TimeSeries createCopy ( RegularTimePeriod start , RegularTimePeriod end ) throws CloneNotSupportedException { if ( start == null ) { throw new IllegalArgumentException ( "Null 'start' argument." ) ; } if ( end == null ) { throw new IllegalArgumentException ( "Null 'end' argument." ) ; } if ( start . compareTo ( end ) > 0 ) { throw new IllegalArgumentException ( "Requires start on or before end." ) ; } boolean emptyRange = false ; int startIndex = getIndex ( start ) ; if ( startIndex < 0 ) { startIndex = - ( startIndex + 1 ) ; if ( startIndex == this . data . size ( ) ) { emptyRange = true ; } } int endIndex = getIndex ( end ) ; if ( endIndex < 0 ) { endIndex = - ( endIndex + 1 ) ; endIndex = endIndex - 1 ; } if ( endIndex < startIndex ) { emptyRange = true ; } if ( emptyRange ) { TimeSeries copy = ( TimeSeries ) super . clone ( ) ; copy . data = new java . util . ArrayList ( ) ; return copy ; } else { return createCopy ( startIndex , endIndex ) ; } }
     /**
      * Tests the series for equality with an arbitrary object.
      *
