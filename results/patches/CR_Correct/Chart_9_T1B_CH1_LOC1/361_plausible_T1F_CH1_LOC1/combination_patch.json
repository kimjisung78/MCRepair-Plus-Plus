{
    "TimeSeries": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "public TimeSeries createCopy ( RegularTimePeriod start , RegularTimePeriod end ) throws CloneNotSupportedException { if ( start == null ) { throw new IllegalArgumentException ( \"Null 'start' argument.\" ) ; } if ( end == null ) { throw new IllegalArgumentException ( \"Null 'end' argument.\" ) ; } if ( start . compareTo ( end ) > 0 ) { throw new IllegalArgumentException ( \"Requires start on or before end.\" ) ; } boolean emptyRange = false ; int startIndex = getIndex ( start ) ; if ( startIndex < 0 ) { startIndex = - ( startIndex + 1 ) ; if ( startIndex == this . data . size ( ) ) { emptyRange = true ; } } int endIndex = getIndex ( end ) ; if ( endIndex < 0 ) { endIndex = - ( endIndex + 1 ) ; endIndex = endIndex - 1 ; }  if ( endIndex < 0 ) {  emptyRange = true ; } if ( emptyRange ) { TimeSeries copy = ( TimeSeries ) super . clone ( ) ; copy . data = new java . util . ArrayList ( ) ; return copy ; } else { return createCopy ( startIndex , endIndex ) ; } }",
            "buggy_dir": "",
            "criteria_token_length": 246,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#time",
                "public#time#series",
                "time#series#create",
                "series#create#copy",
                "create#copy#(",
                "copy#(#regular",
                "(#regular#time",
                "regular#time#period",
                "time#period#start",
                "period#start#,",
                "start#,#regular",
                ",#regular#time",
                "regular#time#period",
                "time#period#end",
                "period#end#)",
                "end#)#throws",
                ")#throws#clone",
                "throws#clone#not",
                "clone#not#supported",
                "not#supported#exception",
                "supported#exception#{",
                "exception#{#if",
                "{#if#(",
                "if#(#start",
                "(#start#==",
                "start#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#illegal",
                "new#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"",
                "(#\"#null 'start' argument.\"",
                "\"#null 'start' argument.\"#)",
                "null 'start' argument.\"#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#end",
                "(#end#==",
                "end#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#illegal",
                "new#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"",
                "(#\"#null 'end' argument.\"",
                "\"#null 'end' argument.\"#)",
                "null 'end' argument.\"#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#start",
                "(#start#.",
                "start#.#compare",
                ".#compare#to",
                "compare#to#(",
                "to#(#end",
                "(#end#)",
                "end#)#>",
                ")#>#0",
                ">#0#)",
                "0#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#illegal",
                "new#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"",
                "(#\"#requires start on or before end.\"",
                "\"#requires start on or before end.\"#)",
                "requires start on or before end.\"#)#;",
                ")#;#}",
                ";#}#boolean",
                "}#boolean#empty",
                "boolean#empty#range",
                "empty#range#=",
                "range#=#false",
                "=#false#;",
                "false#;#int",
                ";#int#start",
                "int#start#index",
                "start#index#=",
                "index#=#get",
                "=#get#index",
                "get#index#(",
                "index#(#start",
                "(#start#)",
                "start#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#start",
                "(#start#index",
                "start#index#<",
                "index#<#0",
                "<#0#)",
                "0#)#{",
                ")#{#start",
                "{#start#index",
                "start#index#=",
                "index#=#-",
                "=#-#(",
                "-#(#start",
                "(#start#index",
                "start#index#+",
                "index#+#1",
                "+#1#)",
                "1#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#start",
                "(#start#index",
                "start#index#==",
                "index#==#this",
                "==#this#.",
                "this#.#data",
                ".#data#.",
                "data#.#size",
                ".#size#(",
                "size#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#empty",
                "{#empty#range",
                "empty#range#=",
                "range#=#true",
                "=#true#;",
                "true#;#}",
                ";#}#}",
                "}#}#int",
                "}#int#end",
                "int#end#index",
                "end#index#=",
                "index#=#get",
                "=#get#index",
                "get#index#(",
                "index#(#end",
                "(#end#)",
                "end#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#end",
                "(#end#index",
                "end#index#<",
                "index#<#0",
                "<#0#)",
                "0#)#{",
                ")#{#end",
                "{#end#index",
                "end#index#=",
                "index#=#-",
                "=#-#(",
                "-#(#end",
                "(#end#index",
                "end#index#+",
                "index#+#1",
                "+#1#)",
                "1#)#;",
                ")#;#end",
                ";#end#index",
                "end#index#=",
                "index#=#end",
                "=#end#index",
                "end#index#-",
                "index#-#1",
                "-#1#;",
                "1#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#end",
                "(#end#index",
                "end#index#<",
                "index#<#0",
                "<#0#)",
                "0#)#{",
                ")#{#empty",
                "{#empty#range",
                "empty#range#=",
                "range#=#true",
                "=#true#;",
                "true#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#empty",
                "(#empty#range",
                "empty#range#)",
                "range#)#{",
                ")#{#time",
                "{#time#series",
                "time#series#copy",
                "series#copy#=",
                "copy#=#(",
                "=#(#time",
                "(#time#series",
                "time#series#)",
                "series#)#super",
                ")#super#.",
                "super#.#clone",
                ".#clone#(",
                "clone#(#)",
                "(#)#;",
                ")#;#copy",
                ";#copy#.",
                "copy#.#data",
                ".#data#=",
                "data#=#new",
                "=#new#java",
                "new#java#.",
                "java#.#util",
                ".#util#.",
                "util#.#array",
                ".#array#list",
                "array#list#(",
                "list#(#)",
                "(#)#;",
                ")#;#return",
                ";#return#copy",
                "return#copy#;",
                "copy#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#return",
                "{#return#create",
                "return#create#copy",
                "create#copy#(",
                "copy#(#start",
                "(#start#index",
                "start#index#,",
                "index#,#end",
                ",#end#index",
                "end#index#)",
                "index#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}"
            ],
            "diffs": {
                "25": {
                    "action": "CHANGE",
                    "buggy_end_line": 25,
                    "buggy_size": 1,
                    "buggy_start_line": 25,
                    "fixed_end_line": 25,
                    "fixed_size": 1,
                    "fixed_start_line": 25
                }
            },
            "end_line": 956,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Chart_9_source_org_jfree_data_time_TimeSeries",
            "file_name": "TimeSeries",
            "module_dir": "source/org/jfree/data/time",
            "module_id": "Chart_9",
            "module_name": "Chart",
            "module_num": "9",
            "multi_chunk_key": "Chart_9_source_org_jfree_data_time_TimeSeries_method1_createCopy_RegularTimePeriod_RegularTimePeriod",
            "ngram_score": 0.7125506072874493,
            "patch": "public TimeSeries createCopy ( RegularTimePeriod start , RegularTimePeriod end ) throws CloneNotSupportedException { if ( start == null ) { throw new IllegalArgumentException ( \"Null 'start' argument.\" ) ; } if ( end == null ) { throw new IllegalArgumentException ( \"Null 'end' argument.\" ) ; } if ( start . compareTo ( end ) > 0 ) { throw new IllegalArgumentException ( \"Requires start on or before end.\" ) ; } boolean emptyRange = false ; int startIndex = getIndex ( start ) ; if ( startIndex < 0 ) { startIndex = - ( startIndex + 1 ) ; if ( startIndex == this . data . size ( ) ) { emptyRange = true ; } } int endIndex = getIndex ( end ) ; if ( endIndex < 0 ) { endIndex = - ( endIndex + 1 ) ; endIndex = endIndex - 1 ; } if ( endIndex < startIndex ) { emptyRange = true ; } if ( emptyRange ) { TimeSeries copy = ( TimeSeries ) super . clone ( ) ; copy . data = new java . util . ArrayList ( ) ; return copy ; } else { return createCopy ( startIndex , endIndex ) ; } }",
            "patch_index": 67,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.856,
            "set_index": null,
            "start_line": 918,
            "tf_token_length": 247,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#time",
                "public#time#series",
                "time#series#create",
                "series#create#copy",
                "create#copy#(",
                "copy#(#regular",
                "(#regular#time",
                "regular#time#period",
                "time#period#start",
                "period#start#,",
                "start#,#regular",
                ",#regular#time",
                "regular#time#period",
                "time#period#end",
                "period#end#)",
                "end#)#throws",
                ")#throws#clone",
                "throws#clone#not",
                "clone#not#supported",
                "not#supported#exception",
                "supported#exception#{",
                "exception#{#if",
                "{#if#(",
                "if#(#start",
                "(#start#==",
                "start#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#illegal",
                "new#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"",
                "(#\"#null 'start' argument.\"",
                "\"#null 'start' argument.\"#)",
                "null 'start' argument.\"#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#end",
                "(#end#==",
                "end#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#illegal",
                "new#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"",
                "(#\"#null 'end' argument.\"",
                "\"#null 'end' argument.\"#)",
                "null 'end' argument.\"#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#start",
                "(#start#.",
                "start#.#compare",
                ".#compare#to",
                "compare#to#(",
                "to#(#end",
                "(#end#)",
                "end#)#>",
                ")#>#0",
                ">#0#)",
                "0#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#illegal",
                "new#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"",
                "(#\"#requires start on or before end.\"",
                "\"#requires start on or before end.\"#)",
                "requires start on or before end.\"#)#;",
                ")#;#}",
                ";#}#boolean",
                "}#boolean#empty",
                "boolean#empty#range",
                "empty#range#=",
                "range#=#false",
                "=#false#;",
                "false#;#int",
                ";#int#start",
                "int#start#index",
                "start#index#=",
                "index#=#get",
                "=#get#index",
                "get#index#(",
                "index#(#start",
                "(#start#)",
                "start#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#start",
                "(#start#index",
                "start#index#<",
                "index#<#0",
                "<#0#)",
                "0#)#{",
                ")#{#start",
                "{#start#index",
                "start#index#=",
                "index#=#-",
                "=#-#(",
                "-#(#start",
                "(#start#index",
                "start#index#+",
                "index#+#1",
                "+#1#)",
                "1#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#start",
                "(#start#index",
                "start#index#==",
                "index#==#this",
                "==#this#.",
                "this#.#data",
                ".#data#.",
                "data#.#size",
                ".#size#(",
                "size#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#empty",
                "{#empty#range",
                "empty#range#=",
                "range#=#true",
                "=#true#;",
                "true#;#}",
                ";#}#}",
                "}#}#int",
                "}#int#end",
                "int#end#index",
                "end#index#=",
                "index#=#get",
                "=#get#index",
                "get#index#(",
                "index#(#end",
                "(#end#)",
                "end#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#end",
                "(#end#index",
                "end#index#<",
                "index#<#0",
                "<#0#)",
                "0#)#{",
                ")#{#end",
                "{#end#index",
                "end#index#=",
                "index#=#-",
                "=#-#(",
                "-#(#end",
                "(#end#index",
                "end#index#+",
                "index#+#1",
                "+#1#)",
                "1#)#;",
                ")#;#end",
                ";#end#index",
                "end#index#=",
                "index#=#end",
                "=#end#index",
                "end#index#-",
                "index#-#1",
                "-#1#;",
                "1#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#end",
                "(#end#index",
                "end#index#<",
                "index#<#start",
                "<#start#index",
                "start#index#)",
                "index#)#{",
                ")#{#empty",
                "{#empty#range",
                "empty#range#=",
                "range#=#true",
                "=#true#;",
                "true#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#empty",
                "(#empty#range",
                "empty#range#)",
                "range#)#{",
                ")#{#time",
                "{#time#series",
                "time#series#copy",
                "series#copy#=",
                "copy#=#(",
                "=#(#time",
                "(#time#series",
                "time#series#)",
                "series#)#super",
                ")#super#.",
                "super#.#clone",
                ".#clone#(",
                "clone#(#)",
                "(#)#;",
                ")#;#copy",
                ";#copy#.",
                "copy#.#data",
                ".#data#=",
                "data#=#new",
                "=#new#java",
                "new#java#.",
                "java#.#util",
                ".#util#.",
                "util#.#array",
                ".#array#list",
                "array#list#(",
                "list#(#)",
                "(#)#;",
                ")#;#return",
                ";#return#copy",
                "return#copy#;",
                "copy#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#return",
                "{#return#create",
                "return#create#copy",
                "create#copy#(",
                "copy#(#start",
                "(#start#index",
                "start#index#,",
                "index#,#end",
                ",#end#index",
                "end#index#)",
                "index#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}"
            ]
        }
    }
}