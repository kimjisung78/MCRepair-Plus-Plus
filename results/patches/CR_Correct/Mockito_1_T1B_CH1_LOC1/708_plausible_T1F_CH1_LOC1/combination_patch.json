{
    "InvocationMatcher": {
        "0": {
            "action_judgements": null,
            "action_score": 0.5,
            "buggy_code": "public void captureArgumentsFrom ( Invocation invocation ) { if ( invocation . getMethod ( ) . isVarArgs ( ) ) { int indexOfVararg = invocation . getRawArguments ( ) . length - 1 ;  throw new UnsupportedOperationException ( ) ;  } else { for ( int position = 0 ; position < matchers . size ( ) ; position ++ ) { Matcher m = matchers . get ( position ) ; if ( m instanceof CapturesArguments ) { ( ( CapturesArguments ) m ) . captureFrom ( invocation . getArgumentAt ( position , Object . class ) ) ; } } } }",
            "buggy_dir": "",
            "criteria_token_length": 118,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#void",
                "public#void#arguments",
                "void#arguments#from",
                "arguments#from#(",
                "from#(#Invocation",
                "(#Invocation#invocation",
                "Invocation#invocation#)",
                "invocation#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#invocation",
                "(#invocation#.",
                "invocation#.#get",
                ".#get#method",
                "get#method#(",
                "method#(#)",
                "(#)#.",
                ")#.#var",
                ".#var#args",
                "var#args#(",
                "args#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#int",
                "{#int#of",
                "int#of#vararg",
                "of#vararg#=",
                "vararg#=#invocation",
                "=#invocation#.",
                "invocation#.#raw",
                ".#raw#arguments",
                "raw#arguments#(",
                "arguments#(#)",
                "(#)#.",
                ")#.#length",
                ".#length#-",
                "length#-#1",
                "-#1#;",
                "1#;#throw",
                ";#throw#new",
                "throw#new#unsupported",
                "new#unsupported#operation",
                "unsupported#operation#exception",
                "operation#exception#(",
                "exception#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#for",
                "{#for#(",
                "for#(#int",
                "(#int#position",
                "int#position#=",
                "position#=#0",
                "=#0#;",
                "0#;#position",
                ";#position#<",
                "position#<#matchers",
                "<#matchers#.",
                "matchers#.#size",
                ".#size#(",
                "size#(#)",
                "(#)#;",
                ")#;#position",
                ";#position#++",
                "position#++#)",
                "++#)#{",
                ")#{#Matcher",
                "{#Matcher#m",
                "Matcher#m#=",
                "m#=#matchers",
                "=#matchers#.",
                "matchers#.#get",
                ".#get#(",
                "get#(#position",
                "(#position#)",
                "position#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#m",
                "(#m#instanceof",
                "m#instanceof#captures",
                "instanceof#captures#arguments",
                "captures#arguments#)",
                "arguments#)#{",
                ")#{#(",
                "{#(#(",
                "(#(#captures",
                "(#captures#arguments",
                "captures#arguments#)",
                "arguments#)#m",
                ")#m#)",
                "m#)#.",
                ")#.#capture",
                ".#capture#from",
                "capture#from#(",
                "from#(#invocation",
                "(#invocation#.",
                "invocation#.#argument",
                ".#argument#at",
                "argument#at#(",
                "at#(#position",
                "(#position#,",
                "position#,#Object",
                ",#Object#.",
                "Object#.#class",
                ".#class#)",
                "class#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}",
                "}#}#}",
                "}#}#}"
            ],
            "diffs": {
                "5": {
                    "action": "INSERT",
                    "buggy_end_line": 5,
                    "buggy_size": 0,
                    "buggy_start_line": 5,
                    "fixed_end_line": 5,
                    "fixed_size": 1,
                    "fixed_start_line": 5
                }
            },
            "end_line": 150,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Mockito_1_src_org_mockito_internal_invocation_InvocationMatcher",
            "file_name": "InvocationMatcher",
            "module_dir": "src/org/mockito/internal/invocation",
            "module_id": "Mockito_1",
            "module_name": "Mockito",
            "module_num": "1",
            "multi_chunk_key": "Mockito_1_src_org_mockito_internal_invocation_InvocationMatcher_method1_captureArgumentsFrom_Invocation",
            "ngram_score": 0.872,
            "patch": "public void captureArgumentsFrom ( Invocation invocation ) { if ( invocation . getMethod ( ) . isVarArgs ( ) ) { int indexOfVararg = invocation . getRawArguments ( ) . length - 1 ; if ( indexOfVararg < 0 ) throw new UnsupportedOperationException ( ) ; } else { for ( int position = 0 ; position < matchers . size ( ) ; position ++ ) { Matcher m = matchers . get ( position ) ; if ( m instanceof CapturesArguments ) { ( ( CapturesArguments ) m ) . captureFrom ( invocation . getArgumentAt ( position , Object . class ) ) ; } } } }",
            "patch_index": 371,
            "per_ins": 1,
            "per_other": 0,
            "score_total": 0.686,
            "set_index": null,
            "start_line": 120,
            "tf_token_length": 125,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#void",
                "public#void#arguments",
                "void#arguments#from",
                "arguments#from#(",
                "from#(#Invocation",
                "(#Invocation#invocation",
                "Invocation#invocation#)",
                "invocation#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#invocation",
                "(#invocation#.",
                "invocation#.#get",
                ".#get#method",
                "get#method#(",
                "method#(#)",
                "(#)#.",
                ")#.#var",
                ".#var#args",
                "var#args#(",
                "args#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#int",
                "{#int#of",
                "int#of#vararg",
                "of#vararg#=",
                "vararg#=#invocation",
                "=#invocation#.",
                "invocation#.#raw",
                ".#raw#arguments",
                "raw#arguments#(",
                "arguments#(#)",
                "(#)#.",
                ")#.#length",
                ".#length#-",
                "length#-#1",
                "-#1#;",
                "1#;#if",
                ";#if#(",
                "if#(#of",
                "(#of#vararg",
                "of#vararg#<",
                "vararg#<#0",
                "<#0#)",
                "0#)#throw",
                ")#throw#new",
                "throw#new#unsupported",
                "new#unsupported#operation",
                "unsupported#operation#exception",
                "operation#exception#(",
                "exception#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#for",
                "{#for#(",
                "for#(#int",
                "(#int#position",
                "int#position#=",
                "position#=#0",
                "=#0#;",
                "0#;#position",
                ";#position#<",
                "position#<#matchers",
                "<#matchers#.",
                "matchers#.#size",
                ".#size#(",
                "size#(#)",
                "(#)#;",
                ")#;#position",
                ";#position#++",
                "position#++#)",
                "++#)#{",
                ")#{#Matcher",
                "{#Matcher#m",
                "Matcher#m#=",
                "m#=#matchers",
                "=#matchers#.",
                "matchers#.#get",
                ".#get#(",
                "get#(#position",
                "(#position#)",
                "position#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#m",
                "(#m#instanceof",
                "m#instanceof#captures",
                "instanceof#captures#arguments",
                "captures#arguments#)",
                "arguments#)#{",
                ")#{#(",
                "{#(#(",
                "(#(#captures",
                "(#captures#arguments",
                "captures#arguments#)",
                "arguments#)#m",
                ")#m#)",
                "m#)#.",
                ")#.#capture",
                ".#capture#from",
                "capture#from#(",
                "from#(#invocation",
                "(#invocation#.",
                "invocation#.#argument",
                ".#argument#at",
                "argument#at#(",
                "at#(#position",
                "(#position#,",
                "position#,#Object",
                ",#Object#.",
                "Object#.#class",
                ".#class#)",
                "class#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}",
                "}#}#}",
                "}#}#}"
            ]
        }
    }
}