{
    "VerificationOverTimeImpl": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "public void verify ( VerificationData data ) { AssertionError error = null ; timer . start ( ) ; while ( timer . isCounting ( ) ) { try { delegate . verify ( data ) ; if ( returnOnSuccess ) { return ; } else { error = null ; } } catch ( MockitoAssertionError e ) { error = handleVerifyException ( e ) ; }  catch ( org . mockito . exceptions . verification . junit . ArgumentsAreDifferent e ) {  error = handleVerifyException ( e ) ; } } if ( error != null ) { throw error ; } }",
            "buggy_dir": "",
            "criteria_token_length": 117,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#void",
                "public#void#verify",
                "void#verify#(",
                "verify#(#verification",
                "(#verification#data",
                "verification#data#data",
                "data#data#)",
                "data#)#{",
                ")#{#assertion",
                "{#assertion#error",
                "assertion#error#error",
                "error#error#=",
                "error#=#null",
                "=#null#;",
                "null#;#timer",
                ";#timer#.",
                "timer#.#start",
                ".#start#(",
                "start#(#)",
                "(#)#;",
                ")#;#while",
                ";#while#(",
                "while#(#timer",
                "(#timer#.",
                "timer#.#is",
                ".#is#counting",
                "is#counting#(",
                "counting#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#try",
                "{#try#{",
                "try#{#delegate",
                "{#delegate#.",
                "delegate#.#verify",
                ".#verify#(",
                "verify#(#data",
                "(#data#)",
                "data#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#on",
                "(#on#success",
                "on#success#)",
                "success#)#{",
                ")#{#return",
                "{#return#;",
                "return#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#error",
                "{#error#=",
                "error#=#null",
                "=#null#;",
                "null#;#}",
                ";#}#}",
                "}#}#catch",
                "}#catch#(",
                "catch#(#mockito",
                "(#mockito#assertion",
                "mockito#assertion#error",
                "assertion#error#e",
                "error#e#)",
                "e#)#{",
                ")#{#error",
                "{#error#=",
                "error#=#verify",
                "=#verify#exception",
                "verify#exception#(",
                "exception#(#e",
                "(#e#)",
                "e#)#;",
                ")#;#}",
                ";#}#catch",
                "}#catch#(",
                "catch#(#org",
                "(#org#.",
                "org#.#mockito",
                ".#mockito#.",
                "mockito#.#exceptions",
                ".#exceptions#.",
                "exceptions#.#verification",
                ".#verification#.",
                "verification#.#junit",
                ".#junit#.",
                "junit#.#arguments",
                ".#arguments#are",
                "arguments#are#different",
                "are#different#e",
                "different#e#)",
                "e#)#{",
                ")#{#error",
                "{#error#=",
                "error#=#verify",
                "=#verify#exception",
                "verify#exception#(",
                "exception#(#e",
                "(#e#)",
                "e#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#if",
                "}#if#(",
                "if#(#error",
                "(#error#!=",
                "error#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#throw",
                "{#throw#error",
                "throw#error#;",
                "error#;#}",
                ";#}#}",
                "}#}#}"
            ],
            "diffs": {
                "15": {
                    "action": "CHANGE",
                    "buggy_end_line": 15,
                    "buggy_size": 1,
                    "buggy_start_line": 15,
                    "fixed_end_line": 15,
                    "fixed_size": 1,
                    "fixed_start_line": 15
                }
            },
            "end_line": 99,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Mockito_5_src_org_mockito_internal_verification_VerificationOverTimeImpl",
            "file_name": "VerificationOverTimeImpl",
            "module_dir": "src/org/mockito/internal/verification",
            "module_id": "Mockito_5",
            "module_name": "Mockito",
            "module_num": "5",
            "multi_chunk_key": "Mockito_5_src_org_mockito_internal_verification_VerificationOverTimeImpl_method1_verify_VerificationData",
            "ngram_score": 0.7350427350427351,
            "patch": "public void verify ( VerificationData data ) { AssertionError error = null ; timer . start ( ) ; while ( timer . isCounting ( ) ) { try { delegate . verify ( data ) ; if ( returnOnSuccess ) { return ; } else { error = null ; } } catch ( MockitoAssertionError e ) { error = handleVerifyException ( e ) ; } catch ( AssertionError e ) { error = handleVerifyException ( e ) ; } } if ( error != null ) { throw error ; } }",
            "patch_index": 21,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.868,
            "set_index": null,
            "start_line": 75,
            "tf_token_length": 106,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#void",
                "public#void#verify",
                "void#verify#(",
                "verify#(#verification",
                "(#verification#data",
                "verification#data#data",
                "data#data#)",
                "data#)#{",
                ")#{#assertion",
                "{#assertion#error",
                "assertion#error#error",
                "error#error#=",
                "error#=#null",
                "=#null#;",
                "null#;#timer",
                ";#timer#.",
                "timer#.#start",
                ".#start#(",
                "start#(#)",
                "(#)#;",
                ")#;#while",
                ";#while#(",
                "while#(#timer",
                "(#timer#.",
                "timer#.#is",
                ".#is#counting",
                "is#counting#(",
                "counting#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#try",
                "{#try#{",
                "try#{#delegate",
                "{#delegate#.",
                "delegate#.#verify",
                ".#verify#(",
                "verify#(#data",
                "(#data#)",
                "data#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#on",
                "(#on#success",
                "on#success#)",
                "success#)#{",
                ")#{#return",
                "{#return#;",
                "return#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#error",
                "{#error#=",
                "error#=#null",
                "=#null#;",
                "null#;#}",
                ";#}#}",
                "}#}#catch",
                "}#catch#(",
                "catch#(#mockito",
                "(#mockito#assertion",
                "mockito#assertion#error",
                "assertion#error#e",
                "error#e#)",
                "e#)#{",
                ")#{#error",
                "{#error#=",
                "error#=#verify",
                "=#verify#exception",
                "verify#exception#(",
                "exception#(#e",
                "(#e#)",
                "e#)#;",
                ")#;#}",
                ";#}#catch",
                "}#catch#(",
                "catch#(#assertion",
                "(#assertion#error",
                "assertion#error#e",
                "error#e#)",
                "e#)#{",
                ")#{#error",
                "{#error#=",
                "error#=#verify",
                "=#verify#exception",
                "verify#exception#(",
                "exception#(#e",
                "(#e#)",
                "e#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#if",
                "}#if#(",
                "if#(#error",
                "(#error#!=",
                "error#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#throw",
                "{#throw#error",
                "throw#error#;",
                "error#;#}",
                ";#}#}",
                "}#}#}"
            ]
        }
    }
}