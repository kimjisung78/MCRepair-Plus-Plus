{
    "PeepholeOptimizationsPass": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "private void traverse ( Node node ) { if ( ! shouldVisit ( node ) ) { return ; } int visits = 0 ; do { Node c = node . getFirstChild ( ) ; while ( c != null ) {  traverse ( c ) ;  Node next = c . getNext ( ) ;  c = next ;  } visit ( node ) ; visits ++ ; Preconditions . checkState ( visits < 10000 , \"too many interations\" ) ; } while ( shouldRetraverse ( node ) ) ; exitNode ( node ) ; }",
            "buggy_dir": "",
            "criteria_token_length": 105,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#void",
                "private#void#traverse",
                "void#traverse#(",
                "traverse#(#Node",
                "(#Node#node",
                "Node#node#)",
                "node#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#!",
                "(#!#should",
                "!#should#visit",
                "should#visit#(",
                "visit#(#node",
                "(#node#)",
                "node#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#;",
                "return#;#}",
                ";#}#int",
                "}#int#visits",
                "int#visits#=",
                "visits#=#0",
                "=#0#;",
                "0#;#do",
                ";#do#{",
                "do#{#Node",
                "{#Node#c",
                "Node#c#=",
                "c#=#node",
                "=#node#.",
                "node#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#while",
                ";#while#(",
                "while#(#c",
                "(#c#!=",
                "c#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#traverse",
                "{#traverse#(",
                "traverse#(#c",
                "(#c#)",
                "c#)#;",
                ")#;#Node",
                ";#Node#next",
                "Node#next#=",
                "next#=#c",
                "=#c#.",
                "c#.#get",
                ".#get#next",
                "get#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#c",
                ";#c#=",
                "c#=#next",
                "=#next#;",
                "next#;#}",
                ";#}#visit",
                "}#visit#(",
                "visit#(#node",
                "(#node#)",
                "node#)#;",
                ")#;#visits",
                ";#visits#++",
                "visits#++#;",
                "++#;#Preconditions",
                ";#Preconditions#.",
                "Preconditions#.#check",
                ".#check#state",
                "check#state#(",
                "state#(#visits",
                "(#visits#<",
                "visits#<#10000",
                "<#10000#,",
                "10000#,#\"too many interations\"",
                ",#\"too many interations\"#)",
                "\"too many interations\"#)#;",
                ")#;#}",
                ";#}#while",
                "}#while#(",
                "while#(#should",
                "(#should#retraverse",
                "should#retraverse#(",
                "retraverse#(#node",
                "(#node#)",
                "node#)#)",
                ")#)#;",
                ")#;#exit",
                ";#exit#node",
                "exit#node#(",
                "node#(#node",
                "(#node#)",
                "node#)#;",
                ")#;#}",
                ";#}#}"
            ],
            "diffs": {
                "10": {
                    "action": "DELETE",
                    "buggy_end_line": 10,
                    "buggy_size": 1,
                    "buggy_start_line": 10,
                    "fixed_end_line": 10,
                    "fixed_size": 0,
                    "fixed_start_line": 10
                },
                "12": {
                    "action": "INSERT",
                    "buggy_end_line": 12,
                    "buggy_size": 0,
                    "buggy_start_line": 12,
                    "fixed_end_line": 11,
                    "fixed_size": 1,
                    "fixed_start_line": 11
                }
            },
            "end_line": 138,
            "exp_ins": 1,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Closure_13_src_com_google_javascript_jscomp_PeepholeOptimizationsPass",
            "file_name": "PeepholeOptimizationsPass",
            "module_dir": "src/com/google/javascript/jscomp",
            "module_id": "Closure_13",
            "module_name": "Closure",
            "module_num": "13",
            "multi_chunk_key": "Closure_13_src_com_google_javascript_jscomp_PeepholeOptimizationsPass_method1_traverse_Node",
            "ngram_score": 0.8691588785046729,
            "patch": "private void traverse ( Node node ) { if ( ! shouldVisit ( node ) ) { return ; } int visits = 0 ; do { Node c = node . getFirstChild ( ) ; while ( c != null ) { Node next = c . getNext ( ) ; this . traverse ( c ) ; c = next ; } visit ( node ) ; visits ++ ; Preconditions . checkState ( visits < 10000 , \"too many interations\" ) ; } while ( shouldRetraverse ( node ) ) ; exitNode ( node ) ; }",
            "patch_index": 426,
            "per_ins": 1,
            "per_other": 1,
            "score_total": 0.935,
            "set_index": null,
            "start_line": 113,
            "tf_token_length": 107,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#void",
                "private#void#traverse",
                "void#traverse#(",
                "traverse#(#Node",
                "(#Node#node",
                "Node#node#)",
                "node#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#!",
                "(#!#should",
                "!#should#visit",
                "should#visit#(",
                "visit#(#node",
                "(#node#)",
                "node#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#;",
                "return#;#}",
                ";#}#int",
                "}#int#visits",
                "int#visits#=",
                "visits#=#0",
                "=#0#;",
                "0#;#do",
                ";#do#{",
                "do#{#Node",
                "{#Node#c",
                "Node#c#=",
                "c#=#node",
                "=#node#.",
                "node#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#while",
                ";#while#(",
                "while#(#c",
                "(#c#!=",
                "c#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#Node",
                "{#Node#next",
                "Node#next#=",
                "next#=#c",
                "=#c#.",
                "c#.#get",
                ".#get#next",
                "get#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#this",
                ";#this#.",
                "this#.#traverse",
                ".#traverse#(",
                "traverse#(#c",
                "(#c#)",
                "c#)#;",
                ")#;#c",
                ";#c#=",
                "c#=#next",
                "=#next#;",
                "next#;#}",
                ";#}#visit",
                "}#visit#(",
                "visit#(#node",
                "(#node#)",
                "node#)#;",
                ")#;#visits",
                ";#visits#++",
                "visits#++#;",
                "++#;#Preconditions",
                ";#Preconditions#.",
                "Preconditions#.#check",
                ".#check#state",
                "check#state#(",
                "state#(#visits",
                "(#visits#<",
                "visits#<#10000",
                "<#10000#,",
                "10000#,#\"too many interations\"",
                ",#\"too many interations\"#)",
                "\"too many interations\"#)#;",
                ")#;#}",
                ";#}#while",
                "}#while#(",
                "while#(#should",
                "(#should#retraverse",
                "should#retraverse#(",
                "retraverse#(#node",
                "(#node#)",
                "node#)#)",
                ")#)#;",
                ")#;#exit",
                ";#exit#node",
                "exit#node#(",
                "node#(#node",
                "(#node#)",
                "node#)#;",
                ")#;#}",
                ";#}#}"
            ]
        }
    }
}