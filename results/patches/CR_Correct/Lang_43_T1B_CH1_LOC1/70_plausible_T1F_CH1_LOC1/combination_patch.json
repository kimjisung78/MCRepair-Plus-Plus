{
    "ExtendedMessageFormat": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "private StringBuffer appendQuotedString ( String pattern , ParsePosition pos , StringBuffer appendTo , boolean escapingOn ) { int start = pos . getIndex ( ) ; char [ ] c = pattern . toCharArray ( ) ; if ( escapingOn && c [ start ] == QUOTE ) {  return appendTo == null ? null : appendTo . append ( QUOTE ) ;  } int lastHold = start ; for ( int i = pos . getIndex ( ) ; i < pattern . length ( ) ; i ++ ) { if ( escapingOn && pattern . substring ( i ) . startsWith ( ESCAPED_QUOTE ) ) { appendTo . append ( c , lastHold , pos . getIndex ( ) - lastHold ) . append ( QUOTE ) ; pos . setIndex ( i + ESCAPED_QUOTE . length ( ) ) ; lastHold = pos . getIndex ( ) ; continue ; } switch ( c [ pos . getIndex ( ) ] ) { case QUOTE : next ( pos ) ; return appendTo == null ? null : appendTo . append ( c , lastHold , pos . getIndex ( ) - lastHold ) ; default : next ( pos ) ; } } throw new IllegalArgumentException ( \"Unterminated quoted string at position \" + start ) ; }",
            "buggy_dir": "",
            "criteria_token_length": 290,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#string",
                "private#string#buffer",
                "string#buffer#quoted",
                "buffer#quoted#string",
                "quoted#string#(",
                "string#(#String",
                "(#String#pattern",
                "String#pattern#,",
                "pattern#,#parse",
                ",#parse#position",
                "parse#position#pos",
                "position#pos#,",
                "pos#,#string",
                ",#string#buffer",
                "string#buffer#append",
                "buffer#append#to",
                "append#to#,",
                "to#,#boolean",
                ",#boolean#escaping",
                "boolean#escaping#on",
                "escaping#on#)",
                "on#)#{",
                ")#{#int",
                "{#int#start",
                "int#start#=",
                "start#=#pos",
                "=#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#;",
                ")#;#char",
                ";#char#[",
                "char#[#]",
                "[#]#c",
                "]#c#=",
                "c#=#pattern",
                "=#pattern#.",
                "pattern#.#char",
                ".#char#array",
                "char#array#(",
                "array#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#escaping",
                "(#escaping#on",
                "escaping#on#&&",
                "on#&&#c",
                "&&#c#[",
                "c#[#start",
                "[#start#]",
                "start#]#==",
                "]#==#q",
                "==#q#u",
                "q#u#o",
                "u#o#t",
                "o#t#e",
                "t#e#)",
                "e#)#{",
                ")#{#return",
                "{#return#append",
                "return#append#to",
                "append#to#==",
                "to#==#null",
                "==#null#?",
                "null#?#null",
                "?#null#:",
                "null#:#append",
                ":#append#to",
                "append#to#.",
                "to#.#append",
                ".#append#(",
                "append#(#q",
                "(#q#u",
                "q#u#o",
                "u#o#t",
                "o#t#e",
                "t#e#)",
                "e#)#;",
                ")#;#}",
                ";#}#int",
                "}#int#last",
                "int#last#hold",
                "last#hold#=",
                "hold#=#start",
                "=#start#;",
                "start#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#pos",
                "=#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#;",
                ")#;#i",
                ";#i#<",
                "i#<#pattern",
                "<#pattern#.",
                "pattern#.#length",
                ".#length#(",
                "length#(#)",
                "(#)#;",
                ")#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#escaping",
                "(#escaping#on",
                "escaping#on#&&",
                "on#&&#pattern",
                "&&#pattern#.",
                "pattern#.#substring",
                ".#substring#(",
                "substring#(#i",
                "(#i#)",
                "i#)#.",
                ")#.#starts",
                ".#starts#with",
                "starts#with#(",
                "with#(#e",
                "(#e#s",
                "e#s#c",
                "s#c#a",
                "c#a#p",
                "a#p#e",
                "p#e#d",
                "e#d#q",
                "d#q#u",
                "q#u#o",
                "u#o#t",
                "o#t#e",
                "t#e#)",
                "e#)#)",
                ")#)#{",
                ")#{#append",
                "{#append#to",
                "append#to#.",
                "to#.#append",
                ".#append#(",
                "append#(#c",
                "(#c#,",
                "c#,#last",
                ",#last#hold",
                "last#hold#,",
                "hold#,#pos",
                ",#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#-",
                ")#-#last",
                "-#last#hold",
                "last#hold#)",
                "hold#)#.",
                ")#.#append",
                ".#append#(",
                "append#(#q",
                "(#q#u",
                "q#u#o",
                "u#o#t",
                "o#t#e",
                "t#e#)",
                "e#)#;",
                ")#;#pos",
                ";#pos#.",
                "pos#.#set",
                ".#set#index",
                "set#index#(",
                "index#(#i",
                "(#i#+",
                "i#+#e",
                "+#e#s",
                "e#s#c",
                "s#c#a",
                "c#a#p",
                "a#p#e",
                "p#e#d",
                "e#d#q",
                "d#q#u",
                "q#u#o",
                "u#o#t",
                "o#t#e",
                "t#e#.",
                "e#.#length",
                ".#length#(",
                "length#(#)",
                "(#)#)",
                ")#)#;",
                ")#;#last",
                ";#last#hold",
                "last#hold#=",
                "hold#=#pos",
                "=#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#;",
                ")#;#continue",
                ";#continue#;",
                "continue#;#}",
                ";#}#switch",
                "}#switch#(",
                "switch#(#c",
                "(#c#[",
                "c#[#pos",
                "[#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#]",
                ")#]#)",
                "]#)#{",
                ")#{#case",
                "{#case#q",
                "case#q#u",
                "q#u#o",
                "u#o#t",
                "o#t#e",
                "t#e#:",
                "e#:#next",
                ":#next#(",
                "next#(#pos",
                "(#pos#)",
                "pos#)#;",
                ")#;#return",
                ";#return#append",
                "return#append#to",
                "append#to#==",
                "to#==#null",
                "==#null#?",
                "null#?#null",
                "?#null#:",
                "null#:#append",
                ":#append#to",
                "append#to#.",
                "to#.#append",
                ".#append#(",
                "append#(#c",
                "(#c#,",
                "c#,#last",
                ",#last#hold",
                "last#hold#,",
                "hold#,#pos",
                ",#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#-",
                ")#-#last",
                "-#last#hold",
                "last#hold#)",
                "hold#)#;",
                ")#;#default",
                ";#default#:",
                "default#:#next",
                ":#next#(",
                "next#(#pos",
                "(#pos#)",
                "pos#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#throw",
                "}#throw#new",
                "throw#new#illegal",
                "new#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"",
                "(#\"#unterminated quoted string at position \"",
                "\"#unterminated quoted string at position \"#+",
                "unterminated quoted string at position \"#+#start",
                "+#start#)",
                "start#)#;",
                ")#;#}",
                ";#}#}"
            ],
            "diffs": {
                "6": {
                    "action": "INSERT",
                    "buggy_end_line": 6,
                    "buggy_size": 0,
                    "buggy_start_line": 6,
                    "fixed_end_line": 6,
                    "fixed_size": 1,
                    "fixed_start_line": 6
                }
            },
            "end_line": 444,
            "exp_ins": 1,
            "exp_other": 0,
            "file_ext": ".java",
            "file_key": "Lang_43_src_java_org_apache_commons_lang_text_ExtendedMessageFormat",
            "file_name": "ExtendedMessageFormat",
            "module_dir": "src/java/org/apache/commons/lang/text",
            "module_id": "Lang_43",
            "module_name": "Lang",
            "module_num": "43",
            "multi_chunk_key": "Lang_43_src_java_org_apache_commons_lang_text_ExtendedMessageFormat_method1_appendQuotedString_String_ParsePosition_StringBuffer_boolean",
            "ngram_score": 0.6576271186440678,
            "patch": "private StringBuffer appendQuotedString ( String pattern , ParsePosition pos , StringBuffer appendTo , boolean escapingOn ) { int start = pos . getIndex ( ) ; char [ ] c = pattern . toCharArray ( ) ; if ( escapingOn && c [ start ] == QUOTE ) { next ( pos ) ; return appendTo == null ? null : appendTo . append ( QUOTE ) ; } int lastHold = start ; for ( int i = pos . getIndex ( ) ; i < pattern . length ( ) ; i ++ ) { if ( escapingOn && pattern . substring ( i ) . startsWith ( ESCAPED_QUOTE ) ) { appendTo . append ( c , lastHold , pos . getIndex ( ) - lastHold ) . append ( QUOTE ) ; pos . setIndex ( i + ESCAPED_QUOTE . length ( ) ) ; lastHold = pos . getIndex ( ) ; continue ; } switch ( c [ pos . getIndex ( ) ] ) { case QUOTE : next ( pos ) ; return appendTo == null ? null : appendTo . append ( c , lastHold , pos . getIndex ( ) - lastHold ) ; default : next ( pos ) ; } } throw new IllegalArgumentException ( \"Unterminated quoted string at position \" + start ) ; }",
            "patch_index": 326,
            "per_ins": 1,
            "per_other": 0,
            "score_total": 0.829,
            "set_index": null,
            "start_line": 417,
            "tf_token_length": 295,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#string",
                "private#string#buffer",
                "string#buffer#quoted",
                "buffer#quoted#string",
                "quoted#string#(",
                "string#(#String",
                "(#String#pattern",
                "String#pattern#,",
                "pattern#,#parse",
                ",#parse#position",
                "parse#position#pos",
                "position#pos#,",
                "pos#,#string",
                ",#string#buffer",
                "string#buffer#append",
                "buffer#append#to",
                "append#to#,",
                "to#,#boolean",
                ",#boolean#escaping",
                "boolean#escaping#on",
                "escaping#on#)",
                "on#)#{",
                ")#{#int",
                "{#int#start",
                "int#start#=",
                "start#=#pos",
                "=#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#;",
                ")#;#char",
                ";#char#[",
                "char#[#]",
                "[#]#c",
                "]#c#=",
                "c#=#pattern",
                "=#pattern#.",
                "pattern#.#char",
                ".#char#array",
                "char#array#(",
                "array#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#escaping",
                "(#escaping#on",
                "escaping#on#&&",
                "on#&&#c",
                "&&#c#[",
                "c#[#start",
                "[#start#]",
                "start#]#==",
                "]#==#q",
                "==#q#u",
                "q#u#o",
                "u#o#t",
                "o#t#e",
                "t#e#)",
                "e#)#{",
                ")#{#next",
                "{#next#(",
                "next#(#pos",
                "(#pos#)",
                "pos#)#;",
                ")#;#return",
                ";#return#append",
                "return#append#to",
                "append#to#==",
                "to#==#null",
                "==#null#?",
                "null#?#null",
                "?#null#:",
                "null#:#append",
                ":#append#to",
                "append#to#.",
                "to#.#append",
                ".#append#(",
                "append#(#q",
                "(#q#u",
                "q#u#o",
                "u#o#t",
                "o#t#e",
                "t#e#)",
                "e#)#;",
                ")#;#}",
                ";#}#int",
                "}#int#last",
                "int#last#hold",
                "last#hold#=",
                "hold#=#start",
                "=#start#;",
                "start#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#pos",
                "=#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#;",
                ")#;#i",
                ";#i#<",
                "i#<#pattern",
                "<#pattern#.",
                "pattern#.#length",
                ".#length#(",
                "length#(#)",
                "(#)#;",
                ")#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#escaping",
                "(#escaping#on",
                "escaping#on#&&",
                "on#&&#pattern",
                "&&#pattern#.",
                "pattern#.#substring",
                ".#substring#(",
                "substring#(#i",
                "(#i#)",
                "i#)#.",
                ")#.#starts",
                ".#starts#with",
                "starts#with#(",
                "with#(#e",
                "(#e#s",
                "e#s#c",
                "s#c#a",
                "c#a#p",
                "a#p#e",
                "p#e#d",
                "e#d#q",
                "d#q#u",
                "q#u#o",
                "u#o#t",
                "o#t#e",
                "t#e#)",
                "e#)#)",
                ")#)#{",
                ")#{#append",
                "{#append#to",
                "append#to#.",
                "to#.#append",
                ".#append#(",
                "append#(#c",
                "(#c#,",
                "c#,#last",
                ",#last#hold",
                "last#hold#,",
                "hold#,#pos",
                ",#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#-",
                ")#-#last",
                "-#last#hold",
                "last#hold#)",
                "hold#)#.",
                ")#.#append",
                ".#append#(",
                "append#(#q",
                "(#q#u",
                "q#u#o",
                "u#o#t",
                "o#t#e",
                "t#e#)",
                "e#)#;",
                ")#;#pos",
                ";#pos#.",
                "pos#.#set",
                ".#set#index",
                "set#index#(",
                "index#(#i",
                "(#i#+",
                "i#+#e",
                "+#e#s",
                "e#s#c",
                "s#c#a",
                "c#a#p",
                "a#p#e",
                "p#e#d",
                "e#d#q",
                "d#q#u",
                "q#u#o",
                "u#o#t",
                "o#t#e",
                "t#e#.",
                "e#.#length",
                ".#length#(",
                "length#(#)",
                "(#)#)",
                ")#)#;",
                ")#;#last",
                ";#last#hold",
                "last#hold#=",
                "hold#=#pos",
                "=#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#;",
                ")#;#continue",
                ";#continue#;",
                "continue#;#}",
                ";#}#switch",
                "}#switch#(",
                "switch#(#c",
                "(#c#[",
                "c#[#pos",
                "[#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#]",
                ")#]#)",
                "]#)#{",
                ")#{#case",
                "{#case#q",
                "case#q#u",
                "q#u#o",
                "u#o#t",
                "o#t#e",
                "t#e#:",
                "e#:#next",
                ":#next#(",
                "next#(#pos",
                "(#pos#)",
                "pos#)#;",
                ")#;#return",
                ";#return#append",
                "return#append#to",
                "append#to#==",
                "to#==#null",
                "==#null#?",
                "null#?#null",
                "?#null#:",
                "null#:#append",
                ":#append#to",
                "append#to#.",
                "to#.#append",
                ".#append#(",
                "append#(#c",
                "(#c#,",
                "c#,#last",
                ",#last#hold",
                "last#hold#,",
                "hold#,#pos",
                ",#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#-",
                ")#-#last",
                "-#last#hold",
                "last#hold#)",
                "hold#)#;",
                ")#;#default",
                ";#default#:",
                "default#:#next",
                ":#next#(",
                "next#(#pos",
                "(#pos#)",
                "pos#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#throw",
                "}#throw#new",
                "throw#new#illegal",
                "new#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"",
                "(#\"#unterminated quoted string at position \"",
                "\"#unterminated quoted string at position \"#+",
                "unterminated quoted string at position \"#+#start",
                "+#start#)",
                "start#)#;",
                ")#;#}",
                ";#}#}"
            ]
        }
    }
}