{
    "CodeConsumer": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "void addNumber ( double x ) { char prev = getLastChar ( ) ; boolean negativeZero = isNegativeZero ( x ) ;  if ( x < 0 && prev == '-' ) {  add ( \" \" ) ; } if ( ( long ) x == x && ! negativeZero ) { long value = ( long ) x ; long mantissa = value ; int exp = 0 ; if ( Math . abs ( x ) >= 100 ) { while ( mantissa / 10 * Math . pow ( 10 , exp + 1 ) == value ) { mantissa /= 10 ; exp ++ ; } } if ( exp > 2 ) { add ( Long . toString ( mantissa ) + \"E\" + Integer . toString ( exp ) ) ; } else { add ( Long . toString ( value ) ) ; } } else { add ( String . valueOf ( x ) ) ; } }",
            "buggy_dir": "",
            "criteria_token_length": 179,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#void",
                "{#void#add",
                "void#add#number",
                "add#number#(",
                "number#(#double",
                "(#double#x",
                "double#x#)",
                "x#)#{",
                ")#{#char",
                "{#char#prev",
                "char#prev#=",
                "prev#=#last",
                "=#last#char",
                "last#char#(",
                "char#(#)",
                "(#)#;",
                ")#;#boolean",
                ";#boolean#negative",
                "boolean#negative#zero",
                "negative#zero#=",
                "zero#=#negative",
                "=#negative#zero",
                "negative#zero#(",
                "zero#(#x",
                "(#x#)",
                "x#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#x",
                "(#x#<",
                "x#<#0",
                "<#0#&&",
                "0#&&#prev",
                "&&#prev#==",
                "prev#==#'-'",
                "==#'-'#)",
                "'-'#)#{",
                ")#{#add",
                "{#add#(",
                "add#(#\" \"",
                "(#\" \"#)",
                "\" \"#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#(",
                "(#(#long",
                "(#long#)",
                "long#)#x",
                ")#x#==",
                "x#==#x",
                "==#x#&&",
                "x#&&#!",
                "&&#!#negative",
                "!#negative#zero",
                "negative#zero#)",
                "zero#)#{",
                ")#{#long",
                "{#long#value",
                "long#value#=",
                "value#=#(",
                "=#(#long",
                "(#long#)",
                "long#)#x",
                ")#x#;",
                "x#;#long",
                ";#long#mantissa",
                "long#mantissa#=",
                "mantissa#=#value",
                "=#value#;",
                "value#;#int",
                ";#int#exp",
                "int#exp#=",
                "exp#=#0",
                "=#0#;",
                "0#;#if",
                ";#if#(",
                "if#(#Math",
                "(#Math#.",
                "Math#.#abs",
                ".#abs#(",
                "abs#(#x",
                "(#x#)",
                "x#)#>=",
                ")#>=#100",
                ">=#100#)",
                "100#)#{",
                ")#{#while",
                "{#while#(",
                "while#(#mantissa",
                "(#mantissa#/",
                "mantissa#/#10",
                "/#10#*",
                "10#*#Math",
                "*#Math#.",
                "Math#.#pow",
                ".#pow#(",
                "pow#(#10",
                "(#10#,",
                "10#,#exp",
                ",#exp#+",
                "exp#+#1",
                "+#1#)",
                "1#)#==",
                ")#==#value",
                "==#value#)",
                "value#)#{",
                ")#{#mantissa",
                "{#mantissa#/=",
                "mantissa#/=#10",
                "/=#10#;",
                "10#;#exp",
                ";#exp#++",
                "exp#++#;",
                "++#;#}",
                ";#}#}",
                "}#}#if",
                "}#if#(",
                "if#(#exp",
                "(#exp#>",
                "exp#>#2",
                ">#2#)",
                "2#)#{",
                ")#{#add",
                "{#add#(",
                "add#(#Long",
                "(#Long#.",
                "Long#.#to",
                ".#to#string",
                "to#string#(",
                "string#(#mantissa",
                "(#mantissa#)",
                "mantissa#)#+",
                ")#+#\"",
                "+#\"#e\"",
                "\"#e\"#+",
                "e\"#+#Integer",
                "+#Integer#.",
                "Integer#.#to",
                ".#to#string",
                "to#string#(",
                "string#(#exp",
                "(#exp#)",
                "exp#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#add",
                "{#add#(",
                "add#(#Long",
                "(#Long#.",
                "Long#.#to",
                ".#to#string",
                "to#string#(",
                "string#(#value",
                "(#value#)",
                "value#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#else",
                "}#else#{",
                "else#{#add",
                "{#add#(",
                "add#(#String",
                "(#String#.",
                "String#.#value",
                ".#value#of",
                "value#of#(",
                "of#(#x",
                "(#x#)",
                "x#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}"
            ],
            "diffs": {
                "5": {
                    "action": "CHANGE",
                    "buggy_end_line": 5,
                    "buggy_size": 1,
                    "buggy_start_line": 5,
                    "fixed_end_line": 5,
                    "fixed_size": 1,
                    "fixed_start_line": 5
                }
            },
            "end_line": 267,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Closure_38_src_com_google_javascript_jscomp_CodeConsumer",
            "file_name": "CodeConsumer",
            "module_dir": "src/com/google/javascript/jscomp",
            "module_id": "Closure_38",
            "module_name": "Closure",
            "module_num": "38",
            "multi_chunk_key": "Closure_38_src_com_google_javascript_jscomp_CodeConsumer_method1_addNumber_double",
            "ngram_score": 0.8379888268156425,
            "patch": "void addNumber ( double x ) { char prev = getLastChar ( ) ; boolean negativeZero = isNegativeZero ( x ) ; if ( x <= 0 && prev == '-' ) { add ( \" \" ) ; } if ( ( long ) x == x && ! negativeZero ) { long value = ( long ) x ; long mantissa = value ; int exp = 0 ; if ( Math . abs ( x ) >= 100 ) { while ( mantissa / 10 * Math . pow ( 10 , exp + 1 ) == value ) { mantissa /= 10 ; exp ++ ; } } if ( exp > 2 ) { add ( Long . toString ( mantissa ) + \"E\" + Integer . toString ( exp ) ) ; } else { add ( Long . toString ( value ) ) ; } } else { add ( String . valueOf ( x ) ) ; } }",
            "patch_index": 410,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.919,
            "set_index": null,
            "start_line": 240,
            "tf_token_length": 179,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#void",
                "{#void#add",
                "void#add#number",
                "add#number#(",
                "number#(#double",
                "(#double#x",
                "double#x#)",
                "x#)#{",
                ")#{#char",
                "{#char#prev",
                "char#prev#=",
                "prev#=#last",
                "=#last#char",
                "last#char#(",
                "char#(#)",
                "(#)#;",
                ")#;#boolean",
                ";#boolean#negative",
                "boolean#negative#zero",
                "negative#zero#=",
                "zero#=#negative",
                "=#negative#zero",
                "negative#zero#(",
                "zero#(#x",
                "(#x#)",
                "x#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#x",
                "(#x#<=",
                "x#<=#0",
                "<=#0#&&",
                "0#&&#prev",
                "&&#prev#==",
                "prev#==#'-'",
                "==#'-'#)",
                "'-'#)#{",
                ")#{#add",
                "{#add#(",
                "add#(#\" \"",
                "(#\" \"#)",
                "\" \"#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#(",
                "(#(#long",
                "(#long#)",
                "long#)#x",
                ")#x#==",
                "x#==#x",
                "==#x#&&",
                "x#&&#!",
                "&&#!#negative",
                "!#negative#zero",
                "negative#zero#)",
                "zero#)#{",
                ")#{#long",
                "{#long#value",
                "long#value#=",
                "value#=#(",
                "=#(#long",
                "(#long#)",
                "long#)#x",
                ")#x#;",
                "x#;#long",
                ";#long#mantissa",
                "long#mantissa#=",
                "mantissa#=#value",
                "=#value#;",
                "value#;#int",
                ";#int#exp",
                "int#exp#=",
                "exp#=#0",
                "=#0#;",
                "0#;#if",
                ";#if#(",
                "if#(#Math",
                "(#Math#.",
                "Math#.#abs",
                ".#abs#(",
                "abs#(#x",
                "(#x#)",
                "x#)#>=",
                ")#>=#100",
                ">=#100#)",
                "100#)#{",
                ")#{#while",
                "{#while#(",
                "while#(#mantissa",
                "(#mantissa#/",
                "mantissa#/#10",
                "/#10#*",
                "10#*#Math",
                "*#Math#.",
                "Math#.#pow",
                ".#pow#(",
                "pow#(#10",
                "(#10#,",
                "10#,#exp",
                ",#exp#+",
                "exp#+#1",
                "+#1#)",
                "1#)#==",
                ")#==#value",
                "==#value#)",
                "value#)#{",
                ")#{#mantissa",
                "{#mantissa#/=",
                "mantissa#/=#10",
                "/=#10#;",
                "10#;#exp",
                ";#exp#++",
                "exp#++#;",
                "++#;#}",
                ";#}#}",
                "}#}#if",
                "}#if#(",
                "if#(#exp",
                "(#exp#>",
                "exp#>#2",
                ">#2#)",
                "2#)#{",
                ")#{#add",
                "{#add#(",
                "add#(#Long",
                "(#Long#.",
                "Long#.#to",
                ".#to#string",
                "to#string#(",
                "string#(#mantissa",
                "(#mantissa#)",
                "mantissa#)#+",
                ")#+#\"",
                "+#\"#e\"",
                "\"#e\"#+",
                "e\"#+#Integer",
                "+#Integer#.",
                "Integer#.#to",
                ".#to#string",
                "to#string#(",
                "string#(#exp",
                "(#exp#)",
                "exp#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#add",
                "{#add#(",
                "add#(#Long",
                "(#Long#.",
                "Long#.#to",
                ".#to#string",
                "to#string#(",
                "string#(#value",
                "(#value#)",
                "value#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#else",
                "}#else#{",
                "else#{#add",
                "{#add#(",
                "add#(#String",
                "(#String#.",
                "String#.#value",
                ".#value#of",
                "value#of#(",
                "of#(#x",
                "(#x#)",
                "x#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}"
            ]
        }
    }
}