{
    "GenericMetadataSupport": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "protected void registerTypeVariablesOn ( Type classType ) { if ( ! ( classType instanceof ParameterizedType ) ) { return ; } ParameterizedType parameterizedType = ( ParameterizedType ) classType ; TypeVariable [ ] typeParameters = ( ( Class < ? > ) parameterizedType . getRawType ( ) ) . getTypeParameters ( ) ; Type [ ] actualTypeArguments = parameterizedType . getActualTypeArguments ( ) ; for ( int i = 0 ; i < actualTypeArguments . length ; i ++ ) { TypeVariable typeParameter = typeParameters [ i ] ; Type actualTypeArgument = actualTypeArguments [ i ] ; if ( actualTypeArgument instanceof WildcardType ) { contextualActualTypeParameters . put ( typeParameter , boundsOf ( ( WildcardType ) actualTypeArgument ) ) ;  } else {  contextualActualTypeParameters . put ( typeParameter , actualTypeArgument ) ; } } }",
            "buggy_dir": "",
            "criteria_token_length": 172,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#protected",
                "{#protected#void",
                "protected#void#type",
                "void#type#variables",
                "type#variables#on",
                "variables#on#(",
                "on#(#Type",
                "(#Type#class",
                "Type#class#type",
                "class#type#)",
                "type#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#!",
                "(#!#(",
                "!#(#class",
                "(#class#type",
                "class#type#instanceof",
                "type#instanceof#parameterized",
                "instanceof#parameterized#type",
                "parameterized#type#)",
                "type#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#;",
                "return#;#}",
                ";#}#parameterized",
                "}#parameterized#type",
                "parameterized#type#parameterized",
                "type#parameterized#type",
                "parameterized#type#=",
                "type#=#(",
                "=#(#parameterized",
                "(#parameterized#type",
                "parameterized#type#)",
                "type#)#class",
                ")#class#type",
                "class#type#;",
                "type#;#type",
                ";#type#variable",
                "type#variable#[",
                "variable#[#]",
                "[#]#type",
                "]#type#parameters",
                "type#parameters#=",
                "parameters#=#(",
                "=#(#(",
                "(#(#Class",
                "(#Class#<",
                "Class#<#?",
                "<#?#>",
                "?#>#)",
                ">#)#parameterized",
                ")#parameterized#type",
                "parameterized#type#.",
                "type#.#raw",
                ".#raw#type",
                "raw#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#.",
                ")#.#type",
                ".#type#parameters",
                "type#parameters#(",
                "parameters#(#)",
                "(#)#;",
                ")#;#Type",
                ";#Type#[",
                "Type#[#]",
                "[#]#type",
                "]#type#arguments",
                "type#arguments#=",
                "arguments#=#parameterized",
                "=#parameterized#type",
                "parameterized#type#.",
                "type#.#actual",
                ".#actual#type",
                "actual#type#arguments",
                "type#arguments#(",
                "arguments#(#)",
                "(#)#;",
                ")#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#type",
                "<#type#arguments",
                "type#arguments#.",
                "arguments#.#length",
                ".#length#;",
                "length#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#type",
                "{#type#variable",
                "type#variable#type",
                "variable#type#parameter",
                "type#parameter#=",
                "parameter#=#type",
                "=#type#parameters",
                "type#parameters#[",
                "parameters#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#Type",
                ";#Type#type",
                "Type#type#argument",
                "type#argument#=",
                "argument#=#type",
                "=#type#arguments",
                "type#arguments#[",
                "arguments#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#if",
                ";#if#(",
                "if#(#type",
                "(#type#argument",
                "type#argument#instanceof",
                "argument#instanceof#wildcard",
                "instanceof#wildcard#type",
                "wildcard#type#)",
                "type#)#{",
                ")#{#actual",
                "{#actual#type",
                "actual#type#parameters",
                "type#parameters#.",
                "parameters#.#put",
                ".#put#(",
                "put#(#type",
                "(#type#parameter",
                "type#parameter#,",
                "parameter#,#bounds",
                ",#bounds#of",
                "bounds#of#(",
                "of#(#(",
                "(#(#wildcard",
                "(#wildcard#type",
                "wildcard#type#)",
                "type#)#type",
                ")#type#argument",
                "type#argument#)",
                "argument#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#actual",
                "{#actual#type",
                "actual#type#parameters",
                "type#parameters#.",
                "parameters#.#put",
                ".#put#(",
                "put#(#type",
                "(#type#parameter",
                "type#parameter#,",
                "parameter#,#type",
                ",#type#argument",
                "type#argument#)",
                "argument#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}",
                "}#}#}"
            ],
            "diffs": {
                "14": {
                    "action": "CHANGE",
                    "buggy_end_line": 14,
                    "buggy_size": 1,
                    "buggy_start_line": 14,
                    "fixed_end_line": 14,
                    "fixed_size": 1,
                    "fixed_start_line": 14
                }
            },
            "end_line": 84,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Mockito_8_src_org_mockito_internal_util_reflection_GenericMetadataSupport",
            "file_name": "GenericMetadataSupport",
            "module_dir": "src/org/mockito/internal/util/reflection",
            "module_id": "Mockito_8",
            "module_name": "Mockito",
            "module_num": "8",
            "multi_chunk_key": "Mockito_8_src_org_mockito_internal_util_reflection_GenericMetadataSupport_method1_registerTypeVariablesOn_Type",
            "ngram_score": 0.8206521739130435,
            "patch": "protected void registerTypeVariablesOn ( Type classType ) { if ( ! ( classType instanceof ParameterizedType ) ) { return ; } ParameterizedType parameterizedType = ( ParameterizedType ) classType ; TypeVariable [ ] typeParameters = ( ( Class < ? > ) parameterizedType . getRawType ( ) ) . getTypeParameters ( ) ; Type [ ] actualTypeArguments = parameterizedType . getActualTypeArguments ( ) ; for ( int i = 0 ; i < actualTypeArguments . length ; i ++ ) { TypeVariable typeParameter = typeParameters [ i ] ; Type actualTypeArgument = actualTypeArguments [ i ] ; if ( actualTypeArgument instanceof WildcardType ) { contextualActualTypeParameters . put ( typeParameter , boundsOf ( ( WildcardType ) actualTypeArgument ) ) ; } else if ( ! actualTypeArgument . equals ( typeParameter ) ) { contextualActualTypeParameters . put ( typeParameter , actualTypeArgument ) ; } } }",
            "patch_index": 174,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.91,
            "set_index": null,
            "start_line": 66,
            "tf_token_length": 184,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#protected",
                "{#protected#void",
                "protected#void#type",
                "void#type#variables",
                "type#variables#on",
                "variables#on#(",
                "on#(#Type",
                "(#Type#class",
                "Type#class#type",
                "class#type#)",
                "type#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#!",
                "(#!#(",
                "!#(#class",
                "(#class#type",
                "class#type#instanceof",
                "type#instanceof#parameterized",
                "instanceof#parameterized#type",
                "parameterized#type#)",
                "type#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#;",
                "return#;#}",
                ";#}#parameterized",
                "}#parameterized#type",
                "parameterized#type#parameterized",
                "type#parameterized#type",
                "parameterized#type#=",
                "type#=#(",
                "=#(#parameterized",
                "(#parameterized#type",
                "parameterized#type#)",
                "type#)#class",
                ")#class#type",
                "class#type#;",
                "type#;#type",
                ";#type#variable",
                "type#variable#[",
                "variable#[#]",
                "[#]#type",
                "]#type#parameters",
                "type#parameters#=",
                "parameters#=#(",
                "=#(#(",
                "(#(#Class",
                "(#Class#<",
                "Class#<#?",
                "<#?#>",
                "?#>#)",
                ">#)#parameterized",
                ")#parameterized#type",
                "parameterized#type#.",
                "type#.#raw",
                ".#raw#type",
                "raw#type#(",
                "type#(#)",
                "(#)#)",
                ")#)#.",
                ")#.#type",
                ".#type#parameters",
                "type#parameters#(",
                "parameters#(#)",
                "(#)#;",
                ")#;#Type",
                ";#Type#[",
                "Type#[#]",
                "[#]#type",
                "]#type#arguments",
                "type#arguments#=",
                "arguments#=#parameterized",
                "=#parameterized#type",
                "parameterized#type#.",
                "type#.#actual",
                ".#actual#type",
                "actual#type#arguments",
                "type#arguments#(",
                "arguments#(#)",
                "(#)#;",
                ")#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#type",
                "<#type#arguments",
                "type#arguments#.",
                "arguments#.#length",
                ".#length#;",
                "length#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#type",
                "{#type#variable",
                "type#variable#type",
                "variable#type#parameter",
                "type#parameter#=",
                "parameter#=#type",
                "=#type#parameters",
                "type#parameters#[",
                "parameters#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#Type",
                ";#Type#type",
                "Type#type#argument",
                "type#argument#=",
                "argument#=#type",
                "=#type#arguments",
                "type#arguments#[",
                "arguments#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#if",
                ";#if#(",
                "if#(#type",
                "(#type#argument",
                "type#argument#instanceof",
                "argument#instanceof#wildcard",
                "instanceof#wildcard#type",
                "wildcard#type#)",
                "type#)#{",
                ")#{#actual",
                "{#actual#type",
                "actual#type#parameters",
                "type#parameters#.",
                "parameters#.#put",
                ".#put#(",
                "put#(#type",
                "(#type#parameter",
                "type#parameter#,",
                "parameter#,#bounds",
                ",#bounds#of",
                "bounds#of#(",
                "of#(#(",
                "(#(#wildcard",
                "(#wildcard#type",
                "wildcard#type#)",
                "type#)#type",
                ")#type#argument",
                "type#argument#)",
                "argument#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#if",
                "else#if#(",
                "if#(#!",
                "(#!#type",
                "!#type#argument",
                "type#argument#.",
                "argument#.#equals",
                ".#equals#(",
                "equals#(#type",
                "(#type#parameter",
                "type#parameter#)",
                "parameter#)#)",
                ")#)#{",
                ")#{#actual",
                "{#actual#type",
                "actual#type#parameters",
                "type#parameters#.",
                "parameters#.#put",
                ".#put#(",
                "put#(#type",
                "(#type#parameter",
                "type#parameter#,",
                "parameter#,#type",
                ",#type#argument",
                "type#argument#)",
                "argument#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}",
                "}#}#}"
            ]
        }
    }
}