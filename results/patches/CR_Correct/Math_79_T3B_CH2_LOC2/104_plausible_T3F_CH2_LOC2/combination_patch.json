{
    "MathUtils": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "public static double distance ( int [ ] p1 , int [ ] p2 ) {  int sum = 0 ;  for ( int i = 0 ; i < p1 . length ; i ++ ) {  final int dp = p1 [ i ] - p2 [ i ] ;  sum += dp * dp ; } return Math . sqrt ( sum ) ; }",
            "buggy_dir": "",
            "criteria_token_length": 71,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#static",
                "public#static#double",
                "static#double#distance",
                "double#distance#(",
                "distance#(#int",
                "(#int#[",
                "int#[#]",
                "[#]#p1",
                "]#p1#,",
                "p1#,#int",
                ",#int#[",
                "int#[#]",
                "[#]#p2",
                "]#p2#)",
                "p2#)#{",
                ")#{#int",
                "{#int#sum",
                "int#sum#=",
                "sum#=#0",
                "=#0#;",
                "0#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#p1",
                "<#p1#.",
                "p1#.#length",
                ".#length#;",
                "length#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#final",
                "{#final#int",
                "final#int#dp",
                "int#dp#=",
                "dp#=#p1",
                "=#p1#[",
                "p1#[#i",
                "[#i#]",
                "i#]#-",
                "]#-#p2",
                "-#p2#[",
                "p2#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#sum",
                ";#sum#+=",
                "sum#+=#dp",
                "+=#dp#*",
                "dp#*#dp",
                "*#dp#;",
                "dp#;#}",
                ";#}#return",
                "}#return#Math",
                "return#Math#.",
                "Math#.#sqrt",
                ".#sqrt#(",
                "sqrt#(#sum",
                "(#sum#)",
                "sum#)#;",
                ")#;#}",
                ";#}#}"
            ],
            "diffs": {
                "3": {
                    "action": "CHANGE",
                    "buggy_end_line": 3,
                    "buggy_size": 1,
                    "buggy_start_line": 3,
                    "fixed_end_line": 3,
                    "fixed_size": 1,
                    "fixed_start_line": 3
                },
                "5": {
                    "action": "CHANGE",
                    "buggy_end_line": 5,
                    "buggy_size": 1,
                    "buggy_start_line": 5,
                    "fixed_end_line": 5,
                    "fixed_size": 1,
                    "fixed_start_line": 5
                }
            },
            "end_line": 1630,
            "exp_ins": 0,
            "exp_other": 2,
            "file_ext": ".java",
            "file_key": "Math_79_src_main_java_org_apache_commons_math_util_MathUtils",
            "file_name": "MathUtils",
            "module_dir": "src/main/java/org/apache/commons/math/util",
            "module_id": "Math_79",
            "module_name": "Math",
            "module_num": "79",
            "multi_chunk_key": "Math_79_src_main_java_org_apache_commons_math_util_MathUtils_method1_distance_int[]_int[]",
            "ngram_score": 0.8732394366197183,
            "patch": "public static double distance ( int [ ] p1 , int [ ] p2 ) { double sum = 0 ; for ( int i = 0 ; i < p1 . length ; i ++ ) { final double dp = p1 [ i ] - p2 [ i ] ; sum += dp * dp ; } return Math . sqrt ( sum ) ; }",
            "patch_index": 525,
            "per_ins": 0,
            "per_other": 2,
            "score_total": 0.937,
            "set_index": null,
            "start_line": 1623,
            "tf_token_length": 71,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#static",
                "public#static#double",
                "static#double#distance",
                "double#distance#(",
                "distance#(#int",
                "(#int#[",
                "int#[#]",
                "[#]#p1",
                "]#p1#,",
                "p1#,#int",
                ",#int#[",
                "int#[#]",
                "[#]#p2",
                "]#p2#)",
                "p2#)#{",
                ")#{#double",
                "{#double#sum",
                "double#sum#=",
                "sum#=#0",
                "=#0#;",
                "0#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#p1",
                "<#p1#.",
                "p1#.#length",
                ".#length#;",
                "length#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#final",
                "{#final#double",
                "final#double#dp",
                "double#dp#=",
                "dp#=#p1",
                "=#p1#[",
                "p1#[#i",
                "[#i#]",
                "i#]#-",
                "]#-#p2",
                "-#p2#[",
                "p2#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#sum",
                ";#sum#+=",
                "sum#+=#dp",
                "+=#dp#*",
                "dp#*#dp",
                "*#dp#;",
                "dp#;#}",
                ";#}#return",
                "}#return#Math",
                "return#Math#.",
                "Math#.#sqrt",
                ".#sqrt#(",
                "sqrt#(#sum",
                "(#sum#)",
                "sum#)#;",
                ")#;#}",
                ";#}#}"
            ]
        }
    }
}