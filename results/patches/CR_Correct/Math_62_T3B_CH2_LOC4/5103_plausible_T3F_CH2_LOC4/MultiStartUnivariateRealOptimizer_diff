--- "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Math_62/5103/MultiStartUnivariateRealOptimizer_Origin.java"	2023-02-22 18:38:46.976757771 +0900
+++ "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Math_62/5103/MultiStartUnivariateRealOptimizer.java"	2023-02-22 18:38:46.976757771 +0900
@@ -139,49 +139,9 @@
     }
 
     /** {@inheritDoc} */
-    public UnivariateRealPointValuePair optimize(final FUNC f,
-                                                 final GoalType goal,
-                                                 final double min, final double max)
-        throws FunctionEvaluationException {
-        return optimize(f, goal, min, max, 0);
-    }
-
+public UnivariateRealPointValuePair optimize ( final FUNC f , final GoalType goal , final double min , final double max ) throws FunctionEvaluationException { return optimize ( f , goal , min , max , 0L ) ; }
     /** {@inheritDoc} */
-    public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goal,
-                                                 final double min, final double max,
-                                                 final double startValue)
-        throws FunctionEvaluationException {
-        optima = new UnivariateRealPointValuePair[starts];
-        totalEvaluations = 0;
-
-        // Multi-start loop.
-        for (int i = 0; i < starts; ++i) {
-            try {
-                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);
-                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);
-                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));
-            } catch (FunctionEvaluationException fee) {
-                optima[i] = null;
-            } catch (ConvergenceException ce) {
-                optima[i] = null;
-            }
-
-            final int usedEvaluations = optimizer.getEvaluations();
-            optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);
-            totalEvaluations += usedEvaluations;
-        }
-
-        sortPairs(goal);
-
-        if (optima[0] == null) {
-            throw new ConvergenceException(LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,
-                                           starts);
-        }
-
-        // Return the point with the best objective function value.
-        return optima[0];
-    }
-
+public UnivariateRealPointValuePair optimize ( final FUNC f , final GoalType goal , final double min , final double max , final double startValue ) throws FunctionEvaluationException { optima = new UnivariateRealPointValuePair [ starts ] ; totalEvaluations = 0 ; for ( int i = 0 ; i < starts ; ++ i ) { try { optima [ i ] = optimizer . optimize ( f , goal , FastMath . min ( min , max ) , FastMath . max ( min + generator . nextDouble ( ) , max ) ) ; } catch ( FunctionEvaluationException fee ) { optima [ i ] = null ; } catch ( ConvergenceException ce ) { optima [ i ] = null ; } final int usedEvaluations = optimizer . getEvaluations ( ) ; optimizer . setMaxEvaluations ( optimizer . getMaxEvaluations ( ) - usedEvaluations ) ; totalEvaluations += usedEvaluations ; } sortPairs ( goal ) ; if ( optima [ 0 ] == null ) { throw new ConvergenceException ( LocalizedFormats . NO_CONVERGENCE_WITH_ANY_START_POINT , starts ) ; } return optima [ 0 ] ; }
     /**
      * Sort the optima from best to worst, followed by {@code null} elements.
      *
