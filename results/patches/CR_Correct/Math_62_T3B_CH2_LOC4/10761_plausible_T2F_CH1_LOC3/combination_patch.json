{
    "MultiStartUnivariateRealOptimizer": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "public UnivariateRealPointValuePair optimize ( final FUNC f , final GoalType goal , final double min , final double max ) throws FunctionEvaluationException {  return optimize ( f , goal , min , max , 0 ) ;  }",
            "buggy_dir": "",
            "criteria_token_length": 51,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#univariate",
                "public#univariate#real",
                "univariate#real#point",
                "real#point#value",
                "point#value#pair",
                "value#pair#optimize",
                "pair#optimize#(",
                "optimize#(#final",
                "(#final#f",
                "final#f#u",
                "f#u#n",
                "u#n#c",
                "n#c#f",
                "c#f#,",
                "f#,#final",
                ",#final#goal",
                "final#goal#type",
                "goal#type#goal",
                "type#goal#,",
                "goal#,#final",
                ",#final#double",
                "final#double#min",
                "double#min#,",
                "min#,#final",
                ",#final#double",
                "final#double#max",
                "double#max#)",
                "max#)#throws",
                ")#throws#function",
                "throws#function#evaluation",
                "function#evaluation#exception",
                "evaluation#exception#{",
                "exception#{#return",
                "{#return#optimize",
                "return#optimize#(",
                "optimize#(#f",
                "(#f#,",
                "f#,#goal",
                ",#goal#,",
                "goal#,#min",
                ",#min#,",
                "min#,#max",
                ",#max#,",
                "max#,#0",
                ",#0#)",
                "0#)#;",
                ")#;#}",
                ";#}#}"
            ],
            "diffs": {
                "3": {
                    "action": "CHANGE",
                    "buggy_end_line": 3,
                    "buggy_size": 1,
                    "buggy_start_line": 3,
                    "fixed_end_line": 3,
                    "fixed_size": 1,
                    "fixed_start_line": 3
                }
            },
            "end_line": 147,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Math_62_src_main_java_org_apache_commons_math_optimization_univariate_MultiStartUnivariateRealOptimizer",
            "file_name": "MultiStartUnivariateRealOptimizer",
            "module_dir": "src/main/java/org/apache/commons/math/optimization/univariate",
            "module_id": "Math_62",
            "module_name": "Math",
            "module_num": "62",
            "multi_chunk_key": "Math_62_src_main_java_org_apache_commons_math_optimization_univariate_MultiStartUnivariateRealOptimizer_method1_optimize_FUNC_GoalType_double_double",
            "ngram_score": 0.9215686274509803,
            "patch": "public UnivariateRealPointValuePair optimize ( final FUNC f , final GoalType goal , final double min , final double max ) throws FunctionEvaluationException { return optimize ( f , goal , min , max , 40 ) ; }",
            "patch_index": 22,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.961,
            "set_index": null,
            "start_line": 142,
            "tf_token_length": 51,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#univariate",
                "public#univariate#real",
                "univariate#real#point",
                "real#point#value",
                "point#value#pair",
                "value#pair#optimize",
                "pair#optimize#(",
                "optimize#(#final",
                "(#final#f",
                "final#f#u",
                "f#u#n",
                "u#n#c",
                "n#c#f",
                "c#f#,",
                "f#,#final",
                ",#final#goal",
                "final#goal#type",
                "goal#type#goal",
                "type#goal#,",
                "goal#,#final",
                ",#final#double",
                "final#double#min",
                "double#min#,",
                "min#,#final",
                ",#final#double",
                "final#double#max",
                "double#max#)",
                "max#)#throws",
                ")#throws#function",
                "throws#function#evaluation",
                "function#evaluation#exception",
                "evaluation#exception#{",
                "exception#{#return",
                "{#return#optimize",
                "return#optimize#(",
                "optimize#(#f",
                "(#f#,",
                "f#,#goal",
                ",#goal#,",
                "goal#,#min",
                ",#min#,",
                "min#,#max",
                ",#max#,",
                "max#,#40",
                ",#40#)",
                "40#)#;",
                ")#;#}",
                ";#}#}"
            ]
        },
        "1": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "public UnivariateRealPointValuePair optimize ( final FUNC f , final GoalType goal , final double min , final double max , final double startValue ) throws FunctionEvaluationException { optima = new UnivariateRealPointValuePair [ starts ] ; totalEvaluations = 0 ; for ( int i = 0 ; i < starts ; ++ i ) { try {  final double bound1 = ( i == 0 ) ? min : min + generator . nextDouble ( ) * ( max - min ) ;   final double bound2 = ( i == 0 ) ? max : min + generator . nextDouble ( ) * ( max - min ) ;   optima [ i ] = optimizer . optimize ( f , goal , FastMath . min ( bound1 , bound2 ) , FastMath . max ( bound1 , bound2 ) ) ;  } catch ( FunctionEvaluationException fee ) { optima [ i ] = null ; } catch ( ConvergenceException ce ) { optima [ i ] = null ; } final int usedEvaluations = optimizer . getEvaluations ( ) ; optimizer . setMaxEvaluations ( optimizer . getMaxEvaluations ( ) - usedEvaluations ) ; totalEvaluations += usedEvaluations ; } sortPairs ( goal ) ; if ( optima [ 0 ] == null ) { throw new ConvergenceException ( LocalizedFormats . NO_CONVERGENCE_WITH_ANY_START_POINT , starts ) ; } return optima [ 0 ] ; }",
            "buggy_dir": "",
            "criteria_token_length": 296,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#univariate",
                "public#univariate#real",
                "univariate#real#point",
                "real#point#value",
                "point#value#pair",
                "value#pair#optimize",
                "pair#optimize#(",
                "optimize#(#final",
                "(#final#f",
                "final#f#u",
                "f#u#n",
                "u#n#c",
                "n#c#f",
                "c#f#,",
                "f#,#final",
                ",#final#goal",
                "final#goal#type",
                "goal#type#goal",
                "type#goal#,",
                "goal#,#final",
                ",#final#double",
                "final#double#min",
                "double#min#,",
                "min#,#final",
                ",#final#double",
                "final#double#max",
                "double#max#,",
                "max#,#final",
                ",#final#double",
                "final#double#start",
                "double#start#value",
                "start#value#)",
                "value#)#throws",
                ")#throws#function",
                "throws#function#evaluation",
                "function#evaluation#exception",
                "evaluation#exception#{",
                "exception#{#optima",
                "{#optima#=",
                "optima#=#new",
                "=#new#univariate",
                "new#univariate#real",
                "univariate#real#point",
                "real#point#value",
                "point#value#pair",
                "value#pair#[",
                "pair#[#starts",
                "[#starts#]",
                "starts#]#;",
                "]#;#total",
                ";#total#evaluations",
                "total#evaluations#=",
                "evaluations#=#0",
                "=#0#;",
                "0#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#starts",
                "<#starts#;",
                "starts#;#++",
                ";#++#i",
                "++#i#)",
                "i#)#{",
                ")#{#try",
                "{#try#{",
                "try#{#final",
                "{#final#double",
                "final#double#bound1",
                "double#bound1#=",
                "bound1#=#(",
                "=#(#i",
                "(#i#==",
                "i#==#0",
                "==#0#)",
                "0#)#?",
                ")#?#min",
                "?#min#:",
                "min#:#min",
                ":#min#+",
                "min#+#generator",
                "+#generator#.",
                "generator#.#next",
                ".#next#double",
                "next#double#(",
                "double#(#)",
                "(#)#*",
                ")#*#(",
                "*#(#max",
                "(#max#-",
                "max#-#min",
                "-#min#)",
                "min#)#;",
                ")#;#final",
                ";#final#double",
                "final#double#bound2",
                "double#bound2#=",
                "bound2#=#(",
                "=#(#i",
                "(#i#==",
                "i#==#0",
                "==#0#)",
                "0#)#?",
                ")#?#max",
                "?#max#:",
                "max#:#min",
                ":#min#+",
                "min#+#generator",
                "+#generator#.",
                "generator#.#next",
                ".#next#double",
                "next#double#(",
                "double#(#)",
                "(#)#*",
                ")#*#(",
                "*#(#max",
                "(#max#-",
                "max#-#min",
                "-#min#)",
                "min#)#;",
                ")#;#optima",
                ";#optima#[",
                "optima#[#i",
                "[#i#]",
                "i#]#=",
                "]#=#optimizer",
                "=#optimizer#.",
                "optimizer#.#optimize",
                ".#optimize#(",
                "optimize#(#f",
                "(#f#,",
                "f#,#goal",
                ",#goal#,",
                "goal#,#fast",
                ",#fast#math",
                "fast#math#.",
                "math#.#min",
                ".#min#(",
                "min#(#bound1",
                "(#bound1#,",
                "bound1#,#bound2",
                ",#bound2#)",
                "bound2#)#,",
                ")#,#fast",
                ",#fast#math",
                "fast#math#.",
                "math#.#max",
                ".#max#(",
                "max#(#bound1",
                "(#bound1#,",
                "bound1#,#bound2",
                ",#bound2#)",
                "bound2#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#catch",
                "}#catch#(",
                "catch#(#function",
                "(#function#evaluation",
                "function#evaluation#exception",
                "evaluation#exception#fee",
                "exception#fee#)",
                "fee#)#{",
                ")#{#optima",
                "{#optima#[",
                "optima#[#i",
                "[#i#]",
                "i#]#=",
                "]#=#null",
                "=#null#;",
                "null#;#}",
                ";#}#catch",
                "}#catch#(",
                "catch#(#convergence",
                "(#convergence#exception",
                "convergence#exception#ce",
                "exception#ce#)",
                "ce#)#{",
                ")#{#optima",
                "{#optima#[",
                "optima#[#i",
                "[#i#]",
                "i#]#=",
                "]#=#null",
                "=#null#;",
                "null#;#}",
                ";#}#final",
                "}#final#int",
                "final#int#used",
                "int#used#evaluations",
                "used#evaluations#=",
                "evaluations#=#optimizer",
                "=#optimizer#.",
                "optimizer#.#get",
                ".#get#evaluations",
                "get#evaluations#(",
                "evaluations#(#)",
                "(#)#;",
                ")#;#optimizer",
                ";#optimizer#.",
                "optimizer#.#max",
                ".#max#evaluations",
                "max#evaluations#(",
                "evaluations#(#optimizer",
                "(#optimizer#.",
                "optimizer#.#max",
                ".#max#evaluations",
                "max#evaluations#(",
                "evaluations#(#)",
                "(#)#-",
                ")#-#used",
                "-#used#evaluations",
                "used#evaluations#)",
                "evaluations#)#;",
                ")#;#total",
                ";#total#evaluations",
                "total#evaluations#+=",
                "evaluations#+=#used",
                "+=#used#evaluations",
                "used#evaluations#;",
                "evaluations#;#}",
                ";#}#sort",
                "}#sort#pairs",
                "sort#pairs#(",
                "pairs#(#goal",
                "(#goal#)",
                "goal#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#optima",
                "(#optima#[",
                "optima#[#0",
                "[#0#]",
                "0#]#==",
                "]#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#convergence",
                "new#convergence#exception",
                "convergence#exception#(",
                "exception#(#localized",
                "(#localized#formats",
                "localized#formats#.",
                "formats#.#n",
                ".#n#o",
                "n#o#c",
                "o#c#o",
                "c#o#n",
                "o#n#v",
                "n#v#e",
                "v#e#r",
                "e#r#g",
                "r#g#e",
                "g#e#n",
                "e#n#c",
                "n#c#e",
                "c#e#w",
                "e#w#i",
                "w#i#t",
                "i#t#h",
                "t#h#a",
                "h#a#n",
                "a#n#y",
                "n#y#s",
                "y#s#t",
                "s#t#a",
                "t#a#r",
                "a#r#t",
                "r#t#p",
                "t#p#o",
                "p#o#i",
                "o#i#n",
                "i#n#t",
                "n#t#,",
                "t#,#starts",
                ",#starts#)",
                "starts#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#optima",
                "return#optima#[",
                "optima#[#0",
                "[#0#]",
                "0#]#;",
                "]#;#}",
                ";#}#}"
            ],
            "diffs": {
                "7": {
                    "action": "CHANGE",
                    "buggy_end_line": 9,
                    "buggy_size": 3,
                    "buggy_start_line": 7,
                    "fixed_end_line": 7,
                    "fixed_size": 1,
                    "fixed_start_line": 7
                }
            },
            "end_line": 183,
            "exp_ins": 0,
            "exp_other": 3,
            "file_ext": ".java",
            "file_key": "Math_62_src_main_java_org_apache_commons_math_optimization_univariate_MultiStartUnivariateRealOptimizer",
            "file_name": "MultiStartUnivariateRealOptimizer",
            "module_dir": "src/main/java/org/apache/commons/math/optimization/univariate",
            "module_id": "Math_62",
            "module_name": "Math",
            "module_num": "62",
            "multi_chunk_key": "Math_62_src_main_java_org_apache_commons_math_optimization_univariate_MultiStartUnivariateRealOptimizer_method1_optimize_FUNC_GoalType_double_double_double",
            "ngram_score": 0.6925675675675675,
            "patch": "public UnivariateRealPointValuePair optimize ( final FUNC f , final GoalType goal , final double min , final double max , final double startValue ) throws FunctionEvaluationException { optima = new UnivariateRealPointValuePair [ starts ] ; totalEvaluations = 0 ; for ( int i = 0 ; i < starts ; ++ i ) { try { optima [ i ] = optimizer . optimize ( f , goal , FastMath . min ( min , max ) , FastMath . max ( min + generator . nextDouble ( ) , max ) ) ; } catch ( FunctionEvaluationException fee ) { optima [ i ] = null ; } catch ( ConvergenceException ce ) { optima [ i ] = null ; } final int usedEvaluations = optimizer . getEvaluations ( ) ; optimizer . setMaxEvaluations ( optimizer . getMaxEvaluations ( ) - usedEvaluations ) ; totalEvaluations += usedEvaluations ; } sortPairs ( goal ) ; if ( optima [ 0 ] == null ) { throw new ConvergenceException ( LocalizedFormats . NO_CONVERGENCE_WITH_ANY_START_POINT , starts ) ; } return optima [ 0 ] ; }",
            "patch_index": 43,
            "per_ins": 0,
            "per_other": 3,
            "score_total": 0.846,
            "set_index": null,
            "start_line": 150,
            "tf_token_length": 249,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#univariate",
                "public#univariate#real",
                "univariate#real#point",
                "real#point#value",
                "point#value#pair",
                "value#pair#optimize",
                "pair#optimize#(",
                "optimize#(#final",
                "(#final#f",
                "final#f#u",
                "f#u#n",
                "u#n#c",
                "n#c#f",
                "c#f#,",
                "f#,#final",
                ",#final#goal",
                "final#goal#type",
                "goal#type#goal",
                "type#goal#,",
                "goal#,#final",
                ",#final#double",
                "final#double#min",
                "double#min#,",
                "min#,#final",
                ",#final#double",
                "final#double#max",
                "double#max#,",
                "max#,#final",
                ",#final#double",
                "final#double#start",
                "double#start#value",
                "start#value#)",
                "value#)#throws",
                ")#throws#function",
                "throws#function#evaluation",
                "function#evaluation#exception",
                "evaluation#exception#{",
                "exception#{#optima",
                "{#optima#=",
                "optima#=#new",
                "=#new#univariate",
                "new#univariate#real",
                "univariate#real#point",
                "real#point#value",
                "point#value#pair",
                "value#pair#[",
                "pair#[#starts",
                "[#starts#]",
                "starts#]#;",
                "]#;#total",
                ";#total#evaluations",
                "total#evaluations#=",
                "evaluations#=#0",
                "=#0#;",
                "0#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#starts",
                "<#starts#;",
                "starts#;#++",
                ";#++#i",
                "++#i#)",
                "i#)#{",
                ")#{#try",
                "{#try#{",
                "try#{#optima",
                "{#optima#[",
                "optima#[#i",
                "[#i#]",
                "i#]#=",
                "]#=#optimizer",
                "=#optimizer#.",
                "optimizer#.#optimize",
                ".#optimize#(",
                "optimize#(#f",
                "(#f#,",
                "f#,#goal",
                ",#goal#,",
                "goal#,#fast",
                ",#fast#math",
                "fast#math#.",
                "math#.#min",
                ".#min#(",
                "min#(#min",
                "(#min#,",
                "min#,#max",
                ",#max#)",
                "max#)#,",
                ")#,#fast",
                ",#fast#math",
                "fast#math#.",
                "math#.#max",
                ".#max#(",
                "max#(#min",
                "(#min#+",
                "min#+#generator",
                "+#generator#.",
                "generator#.#next",
                ".#next#double",
                "next#double#(",
                "double#(#)",
                "(#)#,",
                ")#,#max",
                ",#max#)",
                "max#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#catch",
                "}#catch#(",
                "catch#(#function",
                "(#function#evaluation",
                "function#evaluation#exception",
                "evaluation#exception#fee",
                "exception#fee#)",
                "fee#)#{",
                ")#{#optima",
                "{#optima#[",
                "optima#[#i",
                "[#i#]",
                "i#]#=",
                "]#=#null",
                "=#null#;",
                "null#;#}",
                ";#}#catch",
                "}#catch#(",
                "catch#(#convergence",
                "(#convergence#exception",
                "convergence#exception#ce",
                "exception#ce#)",
                "ce#)#{",
                ")#{#optima",
                "{#optima#[",
                "optima#[#i",
                "[#i#]",
                "i#]#=",
                "]#=#null",
                "=#null#;",
                "null#;#}",
                ";#}#final",
                "}#final#int",
                "final#int#used",
                "int#used#evaluations",
                "used#evaluations#=",
                "evaluations#=#optimizer",
                "=#optimizer#.",
                "optimizer#.#get",
                ".#get#evaluations",
                "get#evaluations#(",
                "evaluations#(#)",
                "(#)#;",
                ")#;#optimizer",
                ";#optimizer#.",
                "optimizer#.#max",
                ".#max#evaluations",
                "max#evaluations#(",
                "evaluations#(#optimizer",
                "(#optimizer#.",
                "optimizer#.#max",
                ".#max#evaluations",
                "max#evaluations#(",
                "evaluations#(#)",
                "(#)#-",
                ")#-#used",
                "-#used#evaluations",
                "used#evaluations#)",
                "evaluations#)#;",
                ")#;#total",
                ";#total#evaluations",
                "total#evaluations#+=",
                "evaluations#+=#used",
                "+=#used#evaluations",
                "used#evaluations#;",
                "evaluations#;#}",
                ";#}#sort",
                "}#sort#pairs",
                "sort#pairs#(",
                "pairs#(#goal",
                "(#goal#)",
                "goal#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#optima",
                "(#optima#[",
                "optima#[#0",
                "[#0#]",
                "0#]#==",
                "]#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#convergence",
                "new#convergence#exception",
                "convergence#exception#(",
                "exception#(#localized",
                "(#localized#formats",
                "localized#formats#.",
                "formats#.#n",
                ".#n#o",
                "n#o#c",
                "o#c#o",
                "c#o#n",
                "o#n#v",
                "n#v#e",
                "v#e#r",
                "e#r#g",
                "r#g#e",
                "g#e#n",
                "e#n#c",
                "n#c#e",
                "c#e#w",
                "e#w#i",
                "w#i#t",
                "i#t#h",
                "t#h#a",
                "h#a#n",
                "a#n#y",
                "n#y#s",
                "y#s#t",
                "s#t#a",
                "t#a#r",
                "a#r#t",
                "r#t#p",
                "t#p#o",
                "p#o#i",
                "o#i#n",
                "i#n#t",
                "n#t#,",
                "t#,#starts",
                ",#starts#)",
                "starts#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#optima",
                "return#optima#[",
                "optima#[#0",
                "[#0#]",
                "0#]#;",
                "]#;#}",
                ";#}#}"
            ]
        }
    }
}