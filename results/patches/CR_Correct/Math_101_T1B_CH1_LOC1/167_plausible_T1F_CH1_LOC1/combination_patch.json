{
    "ComplexFormat": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "public Complex parse ( String source , ParsePosition pos ) { int initialIndex = pos . getIndex ( ) ; parseAndIgnoreWhitespace ( source , pos ) ; Number re = parseNumber ( source , getRealFormat ( ) , pos ) ; if ( re == null ) { pos . setIndex ( initialIndex ) ; return null ; } int startIndex = pos . getIndex ( ) ; char c = parseNextCharacter ( source , pos ) ; int sign = 0 ; switch ( c ) { case 0 : return new Complex ( re . doubleValue ( ) , 0.0 ) ; case '-' : sign = - 1 ; break ; case '+' : sign = 1 ; break ; default : pos . setIndex ( initialIndex ) ; pos . setErrorIndex ( startIndex ) ; return null ; } parseAndIgnoreWhitespace ( source , pos ) ; Number im = parseNumber ( source , getRealFormat ( ) , pos ) ; if ( im == null ) { pos . setIndex ( initialIndex ) ; return null ; } int n = getImaginaryCharacter ( ) . length ( ) ; startIndex = pos . getIndex ( ) ; int endIndex = startIndex + n ;  if ( source . substring ( startIndex , endIndex ) . compareTo ( getImaginaryCharacter ( ) ) != 0 ) {  pos . setIndex ( initialIndex ) ; pos . setErrorIndex ( startIndex ) ; return null ; } pos . setIndex ( endIndex ) ; return new Complex ( re . doubleValue ( ) , im . doubleValue ( ) * sign ) ; }",
            "buggy_dir": "",
            "criteria_token_length": 317,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#Complex",
                "public#Complex#parse",
                "Complex#parse#(",
                "parse#(#String",
                "(#String#source",
                "String#source#,",
                "source#,#parse",
                ",#parse#position",
                "parse#position#pos",
                "position#pos#)",
                "pos#)#{",
                ")#{#int",
                "{#int#initial",
                "int#initial#index",
                "initial#index#=",
                "index#=#pos",
                "=#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#;",
                ")#;#and",
                ";#and#ignore",
                "and#ignore#whitespace",
                "ignore#whitespace#(",
                "whitespace#(#source",
                "(#source#,",
                "source#,#pos",
                ",#pos#)",
                "pos#)#;",
                ")#;#Number",
                ";#Number#re",
                "Number#re#=",
                "re#=#parse",
                "=#parse#number",
                "parse#number#(",
                "number#(#source",
                "(#source#,",
                "source#,#real",
                ",#real#format",
                "real#format#(",
                "format#(#)",
                "(#)#,",
                ")#,#pos",
                ",#pos#)",
                "pos#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#re",
                "(#re#==",
                "re#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#pos",
                "{#pos#.",
                "pos#.#set",
                ".#set#index",
                "set#index#(",
                "index#(#initial",
                "(#initial#index",
                "initial#index#)",
                "index#)#;",
                ")#;#return",
                ";#return#null",
                "return#null#;",
                "null#;#}",
                ";#}#int",
                "}#int#start",
                "int#start#index",
                "start#index#=",
                "index#=#pos",
                "=#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#;",
                ")#;#char",
                ";#char#c",
                "char#c#=",
                "c#=#next",
                "=#next#character",
                "next#character#(",
                "character#(#source",
                "(#source#,",
                "source#,#pos",
                ",#pos#)",
                "pos#)#;",
                ")#;#int",
                ";#int#sign",
                "int#sign#=",
                "sign#=#0",
                "=#0#;",
                "0#;#switch",
                ";#switch#(",
                "switch#(#c",
                "(#c#)",
                "c#)#{",
                ")#{#case",
                "{#case#0",
                "case#0#:",
                "0#:#return",
                ":#return#new",
                "return#new#Complex",
                "new#Complex#(",
                "Complex#(#re",
                "(#re#.",
                "re#.#double",
                ".#double#value",
                "double#value#(",
                "value#(#)",
                "(#)#,",
                ")#,#0.0",
                ",#0.0#)",
                "0.0#)#;",
                ")#;#case",
                ";#case#'-'",
                "case#'-'#:",
                "'-'#:#sign",
                ":#sign#=",
                "sign#=#-",
                "=#-#1",
                "-#1#;",
                "1#;#break",
                ";#break#;",
                "break#;#case",
                ";#case#'+'",
                "case#'+'#:",
                "'+'#:#sign",
                ":#sign#=",
                "sign#=#1",
                "=#1#;",
                "1#;#break",
                ";#break#;",
                "break#;#default",
                ";#default#:",
                "default#:#pos",
                ":#pos#.",
                "pos#.#set",
                ".#set#index",
                "set#index#(",
                "index#(#initial",
                "(#initial#index",
                "initial#index#)",
                "index#)#;",
                ")#;#pos",
                ";#pos#.",
                "pos#.#error",
                ".#error#index",
                "error#index#(",
                "index#(#start",
                "(#start#index",
                "start#index#)",
                "index#)#;",
                ")#;#return",
                ";#return#null",
                "return#null#;",
                "null#;#}",
                ";#}#and",
                "}#and#ignore",
                "and#ignore#whitespace",
                "ignore#whitespace#(",
                "whitespace#(#source",
                "(#source#,",
                "source#,#pos",
                ",#pos#)",
                "pos#)#;",
                ")#;#Number",
                ";#Number#im",
                "Number#im#=",
                "im#=#parse",
                "=#parse#number",
                "parse#number#(",
                "number#(#source",
                "(#source#,",
                "source#,#real",
                ",#real#format",
                "real#format#(",
                "format#(#)",
                "(#)#,",
                ")#,#pos",
                ",#pos#)",
                "pos#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#im",
                "(#im#==",
                "im#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#pos",
                "{#pos#.",
                "pos#.#set",
                ".#set#index",
                "set#index#(",
                "index#(#initial",
                "(#initial#index",
                "initial#index#)",
                "index#)#;",
                ")#;#return",
                ";#return#null",
                "return#null#;",
                "null#;#}",
                ";#}#int",
                "}#int#n",
                "int#n#=",
                "n#=#imaginary",
                "=#imaginary#character",
                "imaginary#character#(",
                "character#(#)",
                "(#)#.",
                ")#.#length",
                ".#length#(",
                "length#(#)",
                "(#)#;",
                ")#;#start",
                ";#start#index",
                "start#index#=",
                "index#=#pos",
                "=#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#;",
                ")#;#int",
                ";#int#end",
                "int#end#index",
                "end#index#=",
                "index#=#start",
                "=#start#index",
                "start#index#+",
                "index#+#n",
                "+#n#;",
                "n#;#if",
                ";#if#(",
                "if#(#source",
                "(#source#.",
                "source#.#substring",
                ".#substring#(",
                "substring#(#start",
                "(#start#index",
                "start#index#,",
                "index#,#end",
                ",#end#index",
                "end#index#)",
                "index#)#.",
                ")#.#compare",
                ".#compare#to",
                "compare#to#(",
                "to#(#imaginary",
                "(#imaginary#character",
                "imaginary#character#(",
                "character#(#)",
                "(#)#)",
                ")#)#!=",
                ")#!=#0",
                "!=#0#)",
                "0#)#{",
                ")#{#pos",
                "{#pos#.",
                "pos#.#set",
                ".#set#index",
                "set#index#(",
                "index#(#initial",
                "(#initial#index",
                "initial#index#)",
                "index#)#;",
                ")#;#pos",
                ";#pos#.",
                "pos#.#error",
                ".#error#index",
                "error#index#(",
                "index#(#start",
                "(#start#index",
                "start#index#)",
                "index#)#;",
                ")#;#return",
                ";#return#null",
                "return#null#;",
                "null#;#}",
                ";#}#pos",
                "}#pos#.",
                "pos#.#set",
                ".#set#index",
                "set#index#(",
                "index#(#end",
                "(#end#index",
                "end#index#)",
                "index#)#;",
                ")#;#return",
                ";#return#new",
                "return#new#Complex",
                "new#Complex#(",
                "Complex#(#re",
                "(#re#.",
                "re#.#double",
                ".#double#value",
                "double#value#(",
                "value#(#)",
                "(#)#,",
                ")#,#im",
                ",#im#.",
                "im#.#double",
                ".#double#value",
                "double#value#(",
                "value#(#)",
                "(#)#*",
                ")#*#sign",
                "*#sign#)",
                "sign#)#;",
                ")#;#}",
                ";#}#}"
            ],
            "diffs": {
                "36": {
                    "action": "CHANGE",
                    "buggy_end_line": 36,
                    "buggy_size": 1,
                    "buggy_start_line": 36,
                    "fixed_end_line": 36,
                    "fixed_size": 1,
                    "fixed_start_line": 36
                }
            },
            "end_line": 389,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Math_101_src_java_org_apache_commons_math_complex_ComplexFormat",
            "file_name": "ComplexFormat",
            "module_dir": "src/java/org/apache/commons/math/complex",
            "module_id": "Math_101",
            "module_name": "Math",
            "module_num": "101",
            "multi_chunk_key": "Math_101_src_java_org_apache_commons_math_complex_ComplexFormat_method1_parse_String_ParsePosition",
            "ngram_score": 0.6056782334384858,
            "patch": "public Complex parse ( String source , ParsePosition pos ) { int initialIndex = pos . getIndex ( ) ; parseAndIgnoreWhitespace ( source , pos ) ; Number re = parseNumber ( source , getRealFormat ( ) , pos ) ; if ( re == null ) { pos . setIndex ( initialIndex ) ; return null ; } int startIndex = pos . getIndex ( ) ; char c = parseNextCharacter ( source , pos ) ; int sign = 0 ; switch ( c ) { case 0 : return new Complex ( re . doubleValue ( ) , 0.0 ) ; case '-' : sign = - 1 ; break ; case '+' : sign = 1 ; break ; default : pos . setIndex ( initialIndex ) ; pos . setErrorIndex ( startIndex ) ; return null ; } parseAndIgnoreWhitespace ( source , pos ) ; Number im = parseNumber ( source , getRealFormat ( ) , pos ) ; if ( im == null ) { pos . setIndex ( initialIndex ) ; return null ; } int n = getImaginaryCharacter ( ) . length ( ) ; startIndex = pos . getIndex ( ) ; int endIndex = startIndex + n ; if ( source . substring ( startIndex ) . compareTo ( getImaginaryCharacter ( ) ) != 0 ) { pos . setIndex ( initialIndex ) ; pos . setErrorIndex ( startIndex ) ; return null ; } pos . setIndex ( endIndex ) ; return new Complex ( re . doubleValue ( ) , im . doubleValue ( ) * sign ) ; }",
            "patch_index": 739,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.803,
            "set_index": null,
            "start_line": 320,
            "tf_token_length": 314,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#Complex",
                "public#Complex#parse",
                "Complex#parse#(",
                "parse#(#String",
                "(#String#source",
                "String#source#,",
                "source#,#parse",
                ",#parse#position",
                "parse#position#pos",
                "position#pos#)",
                "pos#)#{",
                ")#{#int",
                "{#int#initial",
                "int#initial#index",
                "initial#index#=",
                "index#=#pos",
                "=#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#;",
                ")#;#and",
                ";#and#ignore",
                "and#ignore#whitespace",
                "ignore#whitespace#(",
                "whitespace#(#source",
                "(#source#,",
                "source#,#pos",
                ",#pos#)",
                "pos#)#;",
                ")#;#Number",
                ";#Number#re",
                "Number#re#=",
                "re#=#parse",
                "=#parse#number",
                "parse#number#(",
                "number#(#source",
                "(#source#,",
                "source#,#real",
                ",#real#format",
                "real#format#(",
                "format#(#)",
                "(#)#,",
                ")#,#pos",
                ",#pos#)",
                "pos#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#re",
                "(#re#==",
                "re#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#pos",
                "{#pos#.",
                "pos#.#set",
                ".#set#index",
                "set#index#(",
                "index#(#initial",
                "(#initial#index",
                "initial#index#)",
                "index#)#;",
                ")#;#return",
                ";#return#null",
                "return#null#;",
                "null#;#}",
                ";#}#int",
                "}#int#start",
                "int#start#index",
                "start#index#=",
                "index#=#pos",
                "=#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#;",
                ")#;#char",
                ";#char#c",
                "char#c#=",
                "c#=#next",
                "=#next#character",
                "next#character#(",
                "character#(#source",
                "(#source#,",
                "source#,#pos",
                ",#pos#)",
                "pos#)#;",
                ")#;#int",
                ";#int#sign",
                "int#sign#=",
                "sign#=#0",
                "=#0#;",
                "0#;#switch",
                ";#switch#(",
                "switch#(#c",
                "(#c#)",
                "c#)#{",
                ")#{#case",
                "{#case#0",
                "case#0#:",
                "0#:#return",
                ":#return#new",
                "return#new#Complex",
                "new#Complex#(",
                "Complex#(#re",
                "(#re#.",
                "re#.#double",
                ".#double#value",
                "double#value#(",
                "value#(#)",
                "(#)#,",
                ")#,#0.0",
                ",#0.0#)",
                "0.0#)#;",
                ")#;#case",
                ";#case#'-'",
                "case#'-'#:",
                "'-'#:#sign",
                ":#sign#=",
                "sign#=#-",
                "=#-#1",
                "-#1#;",
                "1#;#break",
                ";#break#;",
                "break#;#case",
                ";#case#'+'",
                "case#'+'#:",
                "'+'#:#sign",
                ":#sign#=",
                "sign#=#1",
                "=#1#;",
                "1#;#break",
                ";#break#;",
                "break#;#default",
                ";#default#:",
                "default#:#pos",
                ":#pos#.",
                "pos#.#set",
                ".#set#index",
                "set#index#(",
                "index#(#initial",
                "(#initial#index",
                "initial#index#)",
                "index#)#;",
                ")#;#pos",
                ";#pos#.",
                "pos#.#error",
                ".#error#index",
                "error#index#(",
                "index#(#start",
                "(#start#index",
                "start#index#)",
                "index#)#;",
                ")#;#return",
                ";#return#null",
                "return#null#;",
                "null#;#}",
                ";#}#and",
                "}#and#ignore",
                "and#ignore#whitespace",
                "ignore#whitespace#(",
                "whitespace#(#source",
                "(#source#,",
                "source#,#pos",
                ",#pos#)",
                "pos#)#;",
                ")#;#Number",
                ";#Number#im",
                "Number#im#=",
                "im#=#parse",
                "=#parse#number",
                "parse#number#(",
                "number#(#source",
                "(#source#,",
                "source#,#real",
                ",#real#format",
                "real#format#(",
                "format#(#)",
                "(#)#,",
                ")#,#pos",
                ",#pos#)",
                "pos#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#im",
                "(#im#==",
                "im#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#pos",
                "{#pos#.",
                "pos#.#set",
                ".#set#index",
                "set#index#(",
                "index#(#initial",
                "(#initial#index",
                "initial#index#)",
                "index#)#;",
                ")#;#return",
                ";#return#null",
                "return#null#;",
                "null#;#}",
                ";#}#int",
                "}#int#n",
                "int#n#=",
                "n#=#imaginary",
                "=#imaginary#character",
                "imaginary#character#(",
                "character#(#)",
                "(#)#.",
                ")#.#length",
                ".#length#(",
                "length#(#)",
                "(#)#;",
                ")#;#start",
                ";#start#index",
                "start#index#=",
                "index#=#pos",
                "=#pos#.",
                "pos#.#get",
                ".#get#index",
                "get#index#(",
                "index#(#)",
                "(#)#;",
                ")#;#int",
                ";#int#end",
                "int#end#index",
                "end#index#=",
                "index#=#start",
                "=#start#index",
                "start#index#+",
                "index#+#n",
                "+#n#;",
                "n#;#if",
                ";#if#(",
                "if#(#source",
                "(#source#.",
                "source#.#substring",
                ".#substring#(",
                "substring#(#start",
                "(#start#index",
                "start#index#)",
                "index#)#.",
                ")#.#compare",
                ".#compare#to",
                "compare#to#(",
                "to#(#imaginary",
                "(#imaginary#character",
                "imaginary#character#(",
                "character#(#)",
                "(#)#)",
                ")#)#!=",
                ")#!=#0",
                "!=#0#)",
                "0#)#{",
                ")#{#pos",
                "{#pos#.",
                "pos#.#set",
                ".#set#index",
                "set#index#(",
                "index#(#initial",
                "(#initial#index",
                "initial#index#)",
                "index#)#;",
                ")#;#pos",
                ";#pos#.",
                "pos#.#error",
                ".#error#index",
                "error#index#(",
                "index#(#start",
                "(#start#index",
                "start#index#)",
                "index#)#;",
                ")#;#return",
                ";#return#null",
                "return#null#;",
                "null#;#}",
                ";#}#pos",
                "}#pos#.",
                "pos#.#set",
                ".#set#index",
                "set#index#(",
                "index#(#end",
                "(#end#index",
                "end#index#)",
                "index#)#;",
                ")#;#return",
                ";#return#new",
                "return#new#Complex",
                "new#Complex#(",
                "Complex#(#re",
                "(#re#.",
                "re#.#double",
                ".#double#value",
                "double#value#(",
                "value#(#)",
                "(#)#,",
                ")#,#im",
                ",#im#.",
                "im#.#double",
                ".#double#value",
                "double#value#(",
                "value#(#)",
                "(#)#*",
                ")#*#sign",
                "*#sign#)",
                "sign#)#;",
                ")#;#}",
                ";#}#}"
            ]
        }
    }
}