{
    "UnivariateRealSolverUtils": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "public static double [ ] bracket ( UnivariateRealFunction function , double initial , double lowerBound , double upperBound , int maximumIterations ) throws ConvergenceException , FunctionEvaluationException { if ( function == null ) { throw MathRuntimeException . createIllegalArgumentException ( \"function is null\" ) ; } if ( maximumIterations <= 0 ) { throw MathRuntimeException . createIllegalArgumentException ( \"bad value for maximum iterations number: {0}\" , maximumIterations ) ; } if ( initial < lowerBound || initial > upperBound || lowerBound >= upperBound ) { throw MathRuntimeException . createIllegalArgumentException ( \"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\" , lowerBound , initial , upperBound ) ; } double a = initial ; double b = initial ; double fa ; double fb ; int numIterations = 0 ; do { a = Math . max ( a - 1.0 , lowerBound ) ; b = Math . min ( b + 1.0 , upperBound ) ; fa = function . value ( a ) ; fb = function . value ( b ) ; numIterations ++ ; } while ( ( fa * fb > 0.0 ) && ( numIterations < maximumIterations ) && ( ( a > lowerBound ) || ( b < upperBound ) ) ) ;  if ( fa * fb >= 0.0 ) {  throw new ConvergenceException ( \"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\" , numIterations , maximumIterations , initial , lowerBound , upperBound , a , b , fa , fb ) ; } return new double [ ] { a , b } ; }",
            "buggy_dir": "",
            "criteria_token_length": 288,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#static",
                "public#static#double",
                "static#double#[",
                "double#[#]",
                "[#]#bracket",
                "]#bracket#(",
                "bracket#(#univariate",
                "(#univariate#real",
                "univariate#real#function",
                "real#function#function",
                "function#function#,",
                "function#,#double",
                ",#double#initial",
                "double#initial#,",
                "initial#,#double",
                ",#double#lower",
                "double#lower#bound",
                "lower#bound#,",
                "bound#,#double",
                ",#double#upper",
                "double#upper#bound",
                "upper#bound#,",
                "bound#,#int",
                ",#int#maximum",
                "int#maximum#iterations",
                "maximum#iterations#)",
                "iterations#)#throws",
                ")#throws#convergence",
                "throws#convergence#exception",
                "convergence#exception#,",
                "exception#,#function",
                ",#function#evaluation",
                "function#evaluation#exception",
                "evaluation#exception#{",
                "exception#{#if",
                "{#if#(",
                "if#(#function",
                "(#function#==",
                "function#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#throw",
                "{#throw#math",
                "throw#math#runtime",
                "math#runtime#exception",
                "runtime#exception#.",
                "exception#.#illegal",
                ".#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"function is null\"",
                "(#\"function is null\"#)",
                "\"function is null\"#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#maximum",
                "(#maximum#iterations",
                "maximum#iterations#<=",
                "iterations#<=#0",
                "<=#0#)",
                "0#)#{",
                ")#{#throw",
                "{#throw#math",
                "throw#math#runtime",
                "math#runtime#exception",
                "runtime#exception#.",
                "exception#.#illegal",
                ".#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"bad value for maximum iterations number: {0}\"",
                "(#\"bad value for maximum iterations number: {0}\"#,",
                "\"bad value for maximum iterations number: {0}\"#,#maximum",
                ",#maximum#iterations",
                "maximum#iterations#)",
                "iterations#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#initial",
                "(#initial#<",
                "initial#<#lower",
                "<#lower#bound",
                "lower#bound#||",
                "bound#||#initial",
                "||#initial#>",
                "initial#>#upper",
                ">#upper#bound",
                "upper#bound#||",
                "bound#||#lower",
                "||#lower#bound",
                "lower#bound#>=",
                "bound#>=#upper",
                ">=#upper#bound",
                "upper#bound#)",
                "bound#)#{",
                ")#{#throw",
                "{#throw#math",
                "throw#math#runtime",
                "math#runtime#exception",
                "runtime#exception#.",
                "exception#.#illegal",
                ".#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\"",
                "(#\"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\"#,",
                "\"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\"#,#lower",
                ",#lower#bound",
                "lower#bound#,",
                "bound#,#initial",
                ",#initial#,",
                "initial#,#upper",
                ",#upper#bound",
                "upper#bound#)",
                "bound#)#;",
                ")#;#}",
                ";#}#double",
                "}#double#a",
                "double#a#=",
                "a#=#initial",
                "=#initial#;",
                "initial#;#double",
                ";#double#b",
                "double#b#=",
                "b#=#initial",
                "=#initial#;",
                "initial#;#double",
                ";#double#fa",
                "double#fa#;",
                "fa#;#double",
                ";#double#fb",
                "double#fb#;",
                "fb#;#int",
                ";#int#num",
                "int#num#iterations",
                "num#iterations#=",
                "iterations#=#0",
                "=#0#;",
                "0#;#do",
                ";#do#{",
                "do#{#a",
                "{#a#=",
                "a#=#Math",
                "=#Math#.",
                "Math#.#max",
                ".#max#(",
                "max#(#a",
                "(#a#-",
                "a#-#1.0",
                "-#1.0#,",
                "1.0#,#lower",
                ",#lower#bound",
                "lower#bound#)",
                "bound#)#;",
                ")#;#b",
                ";#b#=",
                "b#=#Math",
                "=#Math#.",
                "Math#.#min",
                ".#min#(",
                "min#(#b",
                "(#b#+",
                "b#+#1.0",
                "+#1.0#,",
                "1.0#,#upper",
                ",#upper#bound",
                "upper#bound#)",
                "bound#)#;",
                ")#;#fa",
                ";#fa#=",
                "fa#=#function",
                "=#function#.",
                "function#.#value",
                ".#value#(",
                "value#(#a",
                "(#a#)",
                "a#)#;",
                ")#;#fb",
                ";#fb#=",
                "fb#=#function",
                "=#function#.",
                "function#.#value",
                ".#value#(",
                "value#(#b",
                "(#b#)",
                "b#)#;",
                ")#;#num",
                ";#num#iterations",
                "num#iterations#++",
                "iterations#++#;",
                "++#;#}",
                ";#}#while",
                "}#while#(",
                "while#(#(",
                "(#(#fa",
                "(#fa#*",
                "fa#*#fb",
                "*#fb#>",
                "fb#>#0.0",
                ">#0.0#)",
                "0.0#)#&&",
                ")#&&#(",
                "&&#(#num",
                "(#num#iterations",
                "num#iterations#<",
                "iterations#<#maximum",
                "<#maximum#iterations",
                "maximum#iterations#)",
                "iterations#)#&&",
                ")#&&#(",
                "&&#(#(",
                "(#(#a",
                "(#a#>",
                "a#>#lower",
                ">#lower#bound",
                "lower#bound#)",
                "bound#)#||",
                ")#||#(",
                "||#(#b",
                "(#b#<",
                "b#<#upper",
                "<#upper#bound",
                "upper#bound#)",
                "bound#)#)",
                ")#)#)",
                ")#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#fa",
                "(#fa#*",
                "fa#*#fb",
                "*#fb#>=",
                "fb#>=#0.0",
                ">=#0.0#)",
                "0.0#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#convergence",
                "new#convergence#exception",
                "convergence#exception#(",
                "exception#(#\"number of iterations={0}, maximum iterations={1}, \"",
                "(#\"number of iterations={0}, maximum iterations={1}, \"#+",
                "\"number of iterations={0}, maximum iterations={1}, \"#+#\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \"",
                "+#\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \"#+",
                "\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \"#+#\"final b value={6}, f(a)={7}, f(b)={8}\"",
                "+#\"final b value={6}, f(a)={7}, f(b)={8}\"#,",
                "\"final b value={6}, f(a)={7}, f(b)={8}\"#,#num",
                ",#num#iterations",
                "num#iterations#,",
                "iterations#,#maximum",
                ",#maximum#iterations",
                "maximum#iterations#,",
                "iterations#,#initial",
                ",#initial#,",
                "initial#,#lower",
                ",#lower#bound",
                "lower#bound#,",
                "bound#,#upper",
                ",#upper#bound",
                "upper#bound#,",
                "bound#,#a",
                ",#a#,",
                "a#,#b",
                ",#b#,",
                "b#,#fa",
                ",#fa#,",
                "fa#,#fb",
                ",#fb#)",
                "fb#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#new",
                "return#new#double",
                "new#double#[",
                "double#[#]",
                "[#]#{",
                "]#{#a",
                "{#a#,",
                "a#,#b",
                ",#b#}",
                "b#}#;",
                "}#;#}",
                ";#}#}"
            ],
            "diffs": {
                "24": {
                    "action": "CHANGE",
                    "buggy_end_line": 24,
                    "buggy_size": 1,
                    "buggy_start_line": 24,
                    "fixed_end_line": 24,
                    "fixed_size": 1,
                    "fixed_start_line": 24
                }
            },
            "end_line": 208,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Math_85_src_java_org_apache_commons_math_analysis_solvers_UnivariateRealSolverUtils",
            "file_name": "UnivariateRealSolverUtils",
            "module_dir": "src/java/org/apache/commons/math/analysis/solvers",
            "module_id": "Math_85",
            "module_name": "Math",
            "module_num": "85",
            "multi_chunk_key": "Math_85_src_java_org_apache_commons_math_analysis_solvers_UnivariateRealSolverUtils_method1_bracket_UnivariateRealFunction_double_double_double_int",
            "ngram_score": 0.8090277777777778,
            "patch": "public static double [ ] bracket ( UnivariateRealFunction function , double initial , double lowerBound , double upperBound , int maximumIterations ) throws ConvergenceException , FunctionEvaluationException { if ( function == null ) { throw MathRuntimeException . createIllegalArgumentException ( \"function is null\" ) ; } if ( maximumIterations <= 0 ) { throw MathRuntimeException . createIllegalArgumentException ( \"bad value for maximum iterations number: {0}\" , maximumIterations ) ; } if ( initial < lowerBound || initial > upperBound || lowerBound >= upperBound ) { throw MathRuntimeException . createIllegalArgumentException ( \"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\" , lowerBound , initial , upperBound ) ; } double a = initial ; double b = initial ; double fa ; double fb ; int numIterations = 0 ; do { a = Math . max ( a - 1.0 , lowerBound ) ; b = Math . min ( b + 1.0 , upperBound ) ; fa = function . value ( a ) ; fb = function . value ( b ) ; numIterations ++ ; } while ( ( fa * fb > 0.0 ) && ( numIterations < maximumIterations ) && ( ( a > lowerBound ) || ( b < upperBound ) ) ) ; if ( fa * fb > 0.0 ) { throw new ConvergenceException ( \"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\" , numIterations , maximumIterations , initial , lowerBound , upperBound , a , b , fa , fb ) ; } return new double [ ] { a , b } ; }",
            "patch_index": 542,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.905,
            "set_index": null,
            "start_line": 165,
            "tf_token_length": 288,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#static",
                "public#static#double",
                "static#double#[",
                "double#[#]",
                "[#]#bracket",
                "]#bracket#(",
                "bracket#(#univariate",
                "(#univariate#real",
                "univariate#real#function",
                "real#function#function",
                "function#function#,",
                "function#,#double",
                ",#double#initial",
                "double#initial#,",
                "initial#,#double",
                ",#double#lower",
                "double#lower#bound",
                "lower#bound#,",
                "bound#,#double",
                ",#double#upper",
                "double#upper#bound",
                "upper#bound#,",
                "bound#,#int",
                ",#int#maximum",
                "int#maximum#iterations",
                "maximum#iterations#)",
                "iterations#)#throws",
                ")#throws#convergence",
                "throws#convergence#exception",
                "convergence#exception#,",
                "exception#,#function",
                ",#function#evaluation",
                "function#evaluation#exception",
                "evaluation#exception#{",
                "exception#{#if",
                "{#if#(",
                "if#(#function",
                "(#function#==",
                "function#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#throw",
                "{#throw#math",
                "throw#math#runtime",
                "math#runtime#exception",
                "runtime#exception#.",
                "exception#.#illegal",
                ".#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"function is null\"",
                "(#\"function is null\"#)",
                "\"function is null\"#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#maximum",
                "(#maximum#iterations",
                "maximum#iterations#<=",
                "iterations#<=#0",
                "<=#0#)",
                "0#)#{",
                ")#{#throw",
                "{#throw#math",
                "throw#math#runtime",
                "math#runtime#exception",
                "runtime#exception#.",
                "exception#.#illegal",
                ".#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"bad value for maximum iterations number: {0}\"",
                "(#\"bad value for maximum iterations number: {0}\"#,",
                "\"bad value for maximum iterations number: {0}\"#,#maximum",
                ",#maximum#iterations",
                "maximum#iterations#)",
                "iterations#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#initial",
                "(#initial#<",
                "initial#<#lower",
                "<#lower#bound",
                "lower#bound#||",
                "bound#||#initial",
                "||#initial#>",
                "initial#>#upper",
                ">#upper#bound",
                "upper#bound#||",
                "bound#||#lower",
                "||#lower#bound",
                "lower#bound#>=",
                "bound#>=#upper",
                ">=#upper#bound",
                "upper#bound#)",
                "bound#)#{",
                ")#{#throw",
                "{#throw#math",
                "throw#math#runtime",
                "math#runtime#exception",
                "runtime#exception#.",
                "exception#.#illegal",
                ".#illegal#argument",
                "illegal#argument#exception",
                "argument#exception#(",
                "exception#(#\"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\"",
                "(#\"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\"#,",
                "\"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\"#,#lower",
                ",#lower#bound",
                "lower#bound#,",
                "bound#,#initial",
                ",#initial#,",
                "initial#,#upper",
                ",#upper#bound",
                "upper#bound#)",
                "bound#)#;",
                ")#;#}",
                ";#}#double",
                "}#double#a",
                "double#a#=",
                "a#=#initial",
                "=#initial#;",
                "initial#;#double",
                ";#double#b",
                "double#b#=",
                "b#=#initial",
                "=#initial#;",
                "initial#;#double",
                ";#double#fa",
                "double#fa#;",
                "fa#;#double",
                ";#double#fb",
                "double#fb#;",
                "fb#;#int",
                ";#int#num",
                "int#num#iterations",
                "num#iterations#=",
                "iterations#=#0",
                "=#0#;",
                "0#;#do",
                ";#do#{",
                "do#{#a",
                "{#a#=",
                "a#=#Math",
                "=#Math#.",
                "Math#.#max",
                ".#max#(",
                "max#(#a",
                "(#a#-",
                "a#-#1.0",
                "-#1.0#,",
                "1.0#,#lower",
                ",#lower#bound",
                "lower#bound#)",
                "bound#)#;",
                ")#;#b",
                ";#b#=",
                "b#=#Math",
                "=#Math#.",
                "Math#.#min",
                ".#min#(",
                "min#(#b",
                "(#b#+",
                "b#+#1.0",
                "+#1.0#,",
                "1.0#,#upper",
                ",#upper#bound",
                "upper#bound#)",
                "bound#)#;",
                ")#;#fa",
                ";#fa#=",
                "fa#=#function",
                "=#function#.",
                "function#.#value",
                ".#value#(",
                "value#(#a",
                "(#a#)",
                "a#)#;",
                ")#;#fb",
                ";#fb#=",
                "fb#=#function",
                "=#function#.",
                "function#.#value",
                ".#value#(",
                "value#(#b",
                "(#b#)",
                "b#)#;",
                ")#;#num",
                ";#num#iterations",
                "num#iterations#++",
                "iterations#++#;",
                "++#;#}",
                ";#}#while",
                "}#while#(",
                "while#(#(",
                "(#(#fa",
                "(#fa#*",
                "fa#*#fb",
                "*#fb#>",
                "fb#>#0.0",
                ">#0.0#)",
                "0.0#)#&&",
                ")#&&#(",
                "&&#(#num",
                "(#num#iterations",
                "num#iterations#<",
                "iterations#<#maximum",
                "<#maximum#iterations",
                "maximum#iterations#)",
                "iterations#)#&&",
                ")#&&#(",
                "&&#(#(",
                "(#(#a",
                "(#a#>",
                "a#>#lower",
                ">#lower#bound",
                "lower#bound#)",
                "bound#)#||",
                ")#||#(",
                "||#(#b",
                "(#b#<",
                "b#<#upper",
                "<#upper#bound",
                "upper#bound#)",
                "bound#)#)",
                ")#)#)",
                ")#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#fa",
                "(#fa#*",
                "fa#*#fb",
                "*#fb#>",
                "fb#>#0.0",
                ">#0.0#)",
                "0.0#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#convergence",
                "new#convergence#exception",
                "convergence#exception#(",
                "exception#(#\"number of iterations={0}, maximum iterations={1}, \"",
                "(#\"number of iterations={0}, maximum iterations={1}, \"#+",
                "\"number of iterations={0}, maximum iterations={1}, \"#+#\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \"",
                "+#\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \"#+",
                "\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \"#+#\"final b value={6}, f(a)={7}, f(b)={8}\"",
                "+#\"final b value={6}, f(a)={7}, f(b)={8}\"#,",
                "\"final b value={6}, f(a)={7}, f(b)={8}\"#,#num",
                ",#num#iterations",
                "num#iterations#,",
                "iterations#,#maximum",
                ",#maximum#iterations",
                "maximum#iterations#,",
                "iterations#,#initial",
                ",#initial#,",
                "initial#,#lower",
                ",#lower#bound",
                "lower#bound#,",
                "bound#,#upper",
                ",#upper#bound",
                "upper#bound#,",
                "bound#,#a",
                ",#a#,",
                "a#,#b",
                ",#b#,",
                "b#,#fa",
                ",#fa#,",
                "fa#,#fb",
                ",#fb#)",
                "fb#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#new",
                "return#new#double",
                "new#double#[",
                "double#[#]",
                "[#]#{",
                "]#{#a",
                "{#a#,",
                "a#,#b",
                ",#b#}",
                "b#}#;",
                "}#;#}",
                ";#}#}"
            ]
        }
    }
}