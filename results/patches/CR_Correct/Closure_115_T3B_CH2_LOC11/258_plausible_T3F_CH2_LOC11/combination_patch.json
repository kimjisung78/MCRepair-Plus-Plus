{
    "FunctionInjector": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "private CanInlineResult canInlineReferenceDirectly ( Node callNode , Node fnNode ) { if ( ! isDirectCallNodeReplacementPossible ( fnNode ) ) { return CanInlineResult . NO ; } Node block = fnNode . getLastChild ( ) ;  boolean hasSideEffects = false ;   if ( block . hasChildren ( ) ) {   Preconditions . checkState ( block . hasOneChild ( ) ) ;   Node stmt = block . getFirstChild ( ) ;   if ( stmt . isReturn ( ) ) {   hasSideEffects = NodeUtil . mayHaveSideEffects ( stmt . getFirstChild ( ) , compiler ) ;   }   }  Node cArg = callNode . getFirstChild ( ) . getNext ( ) ; if ( ! callNode . getFirstChild ( ) . isName ( ) ) { if ( NodeUtil . isFunctionObjectCall ( callNode ) ) { if ( cArg == null || ! cArg . isThis ( ) ) { return CanInlineResult . NO ; } cArg = cArg . getNext ( ) ; } else { Preconditions . checkState ( ! NodeUtil . isFunctionObjectApply ( callNode ) ) ; } } Node fnParam = NodeUtil . getFunctionParameters ( fnNode ) . getFirstChild ( ) ; while ( cArg != null || fnParam != null ) { if ( fnParam != null ) { if ( cArg != null ) {  if ( hasSideEffects && NodeUtil . canBeSideEffected ( cArg ) ) {   return CanInlineResult . NO ;   }  if ( NodeUtil . mayEffectMutableState ( cArg , compiler ) && NodeUtil . getNameReferenceCount ( block , fnParam . getString ( ) ) > 1 ) { return CanInlineResult . NO ; } } fnParam = fnParam . getNext ( ) ; } if ( cArg != null ) { if ( NodeUtil . mayHaveSideEffects ( cArg , compiler ) ) { return CanInlineResult . NO ; } cArg = cArg . getNext ( ) ; } } return CanInlineResult . YES ; }",
            "buggy_dir": "",
            "criteria_token_length": 421,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#can",
                "private#can#inline",
                "can#inline#result",
                "inline#result#inline",
                "result#inline#reference",
                "inline#reference#directly",
                "reference#directly#(",
                "directly#(#Node",
                "(#Node#call",
                "Node#call#node",
                "call#node#,",
                "node#,#Node",
                ",#Node#fn",
                "Node#fn#node",
                "fn#node#)",
                "node#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#!",
                "(#!#direct",
                "!#direct#call",
                "direct#call#node",
                "call#node#replacement",
                "node#replacement#possible",
                "replacement#possible#(",
                "possible#(#fn",
                "(#fn#node",
                "fn#node#)",
                "node#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#can",
                "return#can#inline",
                "can#inline#result",
                "inline#result#.",
                "result#.#n",
                ".#n#o",
                "n#o#;",
                "o#;#}",
                ";#}#Node",
                "}#Node#block",
                "Node#block#=",
                "block#=#fn",
                "=#fn#node",
                "fn#node#.",
                "node#.#last",
                ".#last#child",
                "last#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#boolean",
                ";#boolean#side",
                "boolean#side#effects",
                "side#effects#=",
                "effects#=#false",
                "=#false#;",
                "false#;#if",
                ";#if#(",
                "if#(#block",
                "(#block#.",
                "block#.#has",
                ".#has#children",
                "has#children#(",
                "children#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#Preconditions",
                "{#Preconditions#.",
                "Preconditions#.#check",
                ".#check#state",
                "check#state#(",
                "state#(#block",
                "(#block#.",
                "block#.#one",
                ".#one#child",
                "one#child#(",
                "child#(#)",
                "(#)#)",
                ")#)#;",
                ")#;#Node",
                ";#Node#stmt",
                "Node#stmt#=",
                "stmt#=#block",
                "=#block#.",
                "block#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#stmt",
                "(#stmt#.",
                "stmt#.#is",
                ".#is#return",
                "is#return#(",
                "return#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#side",
                "{#side#effects",
                "side#effects#=",
                "effects#=#node",
                "=#node#util",
                "node#util#.",
                "util#.#have",
                ".#have#side",
                "have#side#effects",
                "side#effects#(",
                "effects#(#stmt",
                "(#stmt#.",
                "stmt#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#,",
                ")#,#compiler",
                ",#compiler#)",
                "compiler#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#Node",
                "}#Node#c",
                "Node#c#arg",
                "c#arg#=",
                "arg#=#call",
                "=#call#node",
                "call#node#.",
                "node#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#.",
                ")#.#get",
                ".#get#next",
                "get#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#!",
                "(#!#call",
                "!#call#node",
                "call#node#.",
                "node#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#.",
                ")#.#is",
                ".#is#name",
                "is#name#(",
                "name#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#node",
                "(#node#util",
                "node#util#.",
                "util#.#function",
                ".#function#object",
                "function#object#call",
                "object#call#(",
                "call#(#call",
                "(#call#node",
                "call#node#)",
                "node#)#)",
                ")#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#c",
                "(#c#arg",
                "c#arg#==",
                "arg#==#null",
                "==#null#||",
                "null#||#!",
                "||#!#c",
                "!#c#arg",
                "c#arg#.",
                "arg#.#is",
                ".#is#this",
                "is#this#(",
                "this#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#can",
                "return#can#inline",
                "can#inline#result",
                "inline#result#.",
                "result#.#n",
                ".#n#o",
                "n#o#;",
                "o#;#}",
                ";#}#c",
                "}#c#arg",
                "c#arg#=",
                "arg#=#c",
                "=#c#arg",
                "c#arg#.",
                "arg#.#get",
                ".#get#next",
                "get#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#Preconditions",
                "{#Preconditions#.",
                "Preconditions#.#check",
                ".#check#state",
                "check#state#(",
                "state#(#!",
                "(#!#node",
                "!#node#util",
                "node#util#.",
                "util#.#function",
                ".#function#object",
                "function#object#apply",
                "object#apply#(",
                "apply#(#call",
                "(#call#node",
                "call#node#)",
                "node#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#Node",
                "}#Node#fn",
                "Node#fn#param",
                "fn#param#=",
                "param#=#node",
                "=#node#util",
                "node#util#.",
                "util#.#function",
                ".#function#parameters",
                "function#parameters#(",
                "parameters#(#fn",
                "(#fn#node",
                "fn#node#)",
                "node#)#.",
                ")#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#while",
                ";#while#(",
                "while#(#c",
                "(#c#arg",
                "c#arg#!=",
                "arg#!=#null",
                "!=#null#||",
                "null#||#fn",
                "||#fn#param",
                "fn#param#!=",
                "param#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#fn",
                "(#fn#param",
                "fn#param#!=",
                "param#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#c",
                "(#c#arg",
                "c#arg#!=",
                "arg#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#side",
                "(#side#effects",
                "side#effects#&&",
                "effects#&&#node",
                "&&#node#util",
                "node#util#.",
                "util#.#be",
                ".#be#side",
                "be#side#effected",
                "side#effected#(",
                "effected#(#c",
                "(#c#arg",
                "c#arg#)",
                "arg#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#can",
                "return#can#inline",
                "can#inline#result",
                "inline#result#.",
                "result#.#n",
                ".#n#o",
                "n#o#;",
                "o#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#node",
                "(#node#util",
                "node#util#.",
                "util#.#effect",
                ".#effect#mutable",
                "effect#mutable#state",
                "mutable#state#(",
                "state#(#c",
                "(#c#arg",
                "c#arg#,",
                "arg#,#compiler",
                ",#compiler#)",
                "compiler#)#&&",
                ")#&&#node",
                "&&#node#util",
                "node#util#.",
                "util#.#name",
                ".#name#reference",
                "name#reference#count",
                "reference#count#(",
                "count#(#block",
                "(#block#,",
                "block#,#fn",
                ",#fn#param",
                "fn#param#.",
                "param#.#get",
                ".#get#string",
                "get#string#(",
                "string#(#)",
                "(#)#)",
                ")#)#>",
                ")#>#1",
                ">#1#)",
                "1#)#{",
                ")#{#return",
                "{#return#can",
                "return#can#inline",
                "can#inline#result",
                "inline#result#.",
                "result#.#n",
                ".#n#o",
                "n#o#;",
                "o#;#}",
                ";#}#}",
                "}#}#fn",
                "}#fn#param",
                "fn#param#=",
                "param#=#fn",
                "=#fn#param",
                "fn#param#.",
                "param#.#get",
                ".#get#next",
                "get#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#c",
                "(#c#arg",
                "c#arg#!=",
                "arg#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#node",
                "(#node#util",
                "node#util#.",
                "util#.#have",
                ".#have#side",
                "have#side#effects",
                "side#effects#(",
                "effects#(#c",
                "(#c#arg",
                "c#arg#,",
                "arg#,#compiler",
                ",#compiler#)",
                "compiler#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#can",
                "return#can#inline",
                "can#inline#result",
                "inline#result#.",
                "result#.#n",
                ".#n#o",
                "n#o#;",
                "o#;#}",
                ";#}#c",
                "}#c#arg",
                "c#arg#=",
                "arg#=#c",
                "=#c#arg",
                "c#arg#.",
                "arg#.#get",
                ".#get#next",
                "get#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#return",
                "}#return#can",
                "return#can#inline",
                "can#inline#result",
                "inline#result#.",
                "result#.#y",
                ".#y#e",
                "y#e#s",
                "e#s#;",
                "s#;#}",
                ";#}#}"
            ],
            "diffs": {
                "30": {
                    "action": "DELETE",
                    "buggy_end_line": 32,
                    "buggy_size": 3,
                    "buggy_start_line": 30,
                    "fixed_end_line": 23,
                    "fixed_size": 0,
                    "fixed_start_line": 23
                },
                "7": {
                    "action": "CHANGE",
                    "buggy_end_line": 14,
                    "buggy_size": 8,
                    "buggy_start_line": 7,
                    "fixed_end_line": 7,
                    "fixed_size": 1,
                    "fixed_start_line": 7
                }
            },
            "end_line": 758,
            "exp_ins": 0,
            "exp_other": 11,
            "file_ext": ".java",
            "file_key": "Closure_115_src_com_google_javascript_jscomp_FunctionInjector",
            "file_name": "FunctionInjector",
            "module_dir": "src/com/google/javascript/jscomp",
            "module_id": "Closure_115",
            "module_name": "Closure",
            "module_num": "115",
            "multi_chunk_key": "Closure_115_src_com_google_javascript_jscomp_FunctionInjector_method1_canInlineReferenceDirectly_Node_Node",
            "ngram_score": 0.4584323040380047,
            "patch": "private CanInlineResult canInlineReferenceDirectly ( Node callNode , Node fnNode ) { if ( ! isDirectCallNodeReplacementPossible ( fnNode ) ) { return CanInlineResult . NO ; } Node block = fnNode . getLastChild ( ) ; boolean hasSideEffects = true ; Node cArg = callNode . getFirstChild ( ) . getNext ( ) ; if ( ! callNode . getFirstChild ( ) . isName ( ) ) { if ( NodeUtil . isFunctionObjectCall ( callNode ) ) { if ( cArg == null || ! cArg . isThis ( ) ) { return CanInlineResult . NO ; } cArg = cArg . getNext ( ) ; } else { Preconditions . checkState ( ! NodeUtil . isFunctionObjectApply ( callNode ) ) ; } } Node fnParam = NodeUtil . getFunctionParameters ( fnNode ) . getFirstChild ( ) ; while ( cArg != null || fnParam != null ) { if ( fnParam != null ) { if ( cArg != null ) { if ( NodeUtil . mayEffectMutableState ( cArg , compiler ) && NodeUtil . getNameReferenceCount ( block , fnParam . getString ( ) ) > 1 ) { return CanInlineResult . NO ; } } fnParam = fnParam . getNext ( ) ; } if ( cArg != null ) { if ( NodeUtil . mayHaveSideEffects ( cArg , compiler ) ) { return CanInlineResult . NO ; } cArg = cArg . getNext ( ) ; } } return CanInlineResult . YES ; }",
            "patch_index": 447,
            "per_ins": 0,
            "per_other": 11,
            "score_total": 0.729,
            "set_index": null,
            "start_line": 689,
            "tf_token_length": 330,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#can",
                "private#can#inline",
                "can#inline#result",
                "inline#result#inline",
                "result#inline#reference",
                "inline#reference#directly",
                "reference#directly#(",
                "directly#(#Node",
                "(#Node#call",
                "Node#call#node",
                "call#node#,",
                "node#,#Node",
                ",#Node#fn",
                "Node#fn#node",
                "fn#node#)",
                "node#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#!",
                "(#!#direct",
                "!#direct#call",
                "direct#call#node",
                "call#node#replacement",
                "node#replacement#possible",
                "replacement#possible#(",
                "possible#(#fn",
                "(#fn#node",
                "fn#node#)",
                "node#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#can",
                "return#can#inline",
                "can#inline#result",
                "inline#result#.",
                "result#.#n",
                ".#n#o",
                "n#o#;",
                "o#;#}",
                ";#}#Node",
                "}#Node#block",
                "Node#block#=",
                "block#=#fn",
                "=#fn#node",
                "fn#node#.",
                "node#.#last",
                ".#last#child",
                "last#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#boolean",
                ";#boolean#side",
                "boolean#side#effects",
                "side#effects#=",
                "effects#=#true",
                "=#true#;",
                "true#;#Node",
                ";#Node#c",
                "Node#c#arg",
                "c#arg#=",
                "arg#=#call",
                "=#call#node",
                "call#node#.",
                "node#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#.",
                ")#.#get",
                ".#get#next",
                "get#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#!",
                "(#!#call",
                "!#call#node",
                "call#node#.",
                "node#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#.",
                ")#.#is",
                ".#is#name",
                "is#name#(",
                "name#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#node",
                "(#node#util",
                "node#util#.",
                "util#.#function",
                ".#function#object",
                "function#object#call",
                "object#call#(",
                "call#(#call",
                "(#call#node",
                "call#node#)",
                "node#)#)",
                ")#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#c",
                "(#c#arg",
                "c#arg#==",
                "arg#==#null",
                "==#null#||",
                "null#||#!",
                "||#!#c",
                "!#c#arg",
                "c#arg#.",
                "arg#.#is",
                ".#is#this",
                "is#this#(",
                "this#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#can",
                "return#can#inline",
                "can#inline#result",
                "inline#result#.",
                "result#.#n",
                ".#n#o",
                "n#o#;",
                "o#;#}",
                ";#}#c",
                "}#c#arg",
                "c#arg#=",
                "arg#=#c",
                "=#c#arg",
                "c#arg#.",
                "arg#.#get",
                ".#get#next",
                "get#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#Preconditions",
                "{#Preconditions#.",
                "Preconditions#.#check",
                ".#check#state",
                "check#state#(",
                "state#(#!",
                "(#!#node",
                "!#node#util",
                "node#util#.",
                "util#.#function",
                ".#function#object",
                "function#object#apply",
                "object#apply#(",
                "apply#(#call",
                "(#call#node",
                "call#node#)",
                "node#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#Node",
                "}#Node#fn",
                "Node#fn#param",
                "fn#param#=",
                "param#=#node",
                "=#node#util",
                "node#util#.",
                "util#.#function",
                ".#function#parameters",
                "function#parameters#(",
                "parameters#(#fn",
                "(#fn#node",
                "fn#node#)",
                "node#)#.",
                ")#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#while",
                ";#while#(",
                "while#(#c",
                "(#c#arg",
                "c#arg#!=",
                "arg#!=#null",
                "!=#null#||",
                "null#||#fn",
                "||#fn#param",
                "fn#param#!=",
                "param#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#fn",
                "(#fn#param",
                "fn#param#!=",
                "param#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#c",
                "(#c#arg",
                "c#arg#!=",
                "arg#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#node",
                "(#node#util",
                "node#util#.",
                "util#.#effect",
                ".#effect#mutable",
                "effect#mutable#state",
                "mutable#state#(",
                "state#(#c",
                "(#c#arg",
                "c#arg#,",
                "arg#,#compiler",
                ",#compiler#)",
                "compiler#)#&&",
                ")#&&#node",
                "&&#node#util",
                "node#util#.",
                "util#.#name",
                ".#name#reference",
                "name#reference#count",
                "reference#count#(",
                "count#(#block",
                "(#block#,",
                "block#,#fn",
                ",#fn#param",
                "fn#param#.",
                "param#.#get",
                ".#get#string",
                "get#string#(",
                "string#(#)",
                "(#)#)",
                ")#)#>",
                ")#>#1",
                ">#1#)",
                "1#)#{",
                ")#{#return",
                "{#return#can",
                "return#can#inline",
                "can#inline#result",
                "inline#result#.",
                "result#.#n",
                ".#n#o",
                "n#o#;",
                "o#;#}",
                ";#}#}",
                "}#}#fn",
                "}#fn#param",
                "fn#param#=",
                "param#=#fn",
                "=#fn#param",
                "fn#param#.",
                "param#.#get",
                ".#get#next",
                "get#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#c",
                "(#c#arg",
                "c#arg#!=",
                "arg#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#node",
                "(#node#util",
                "node#util#.",
                "util#.#have",
                ".#have#side",
                "have#side#effects",
                "side#effects#(",
                "effects#(#c",
                "(#c#arg",
                "c#arg#,",
                "arg#,#compiler",
                ",#compiler#)",
                "compiler#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#can",
                "return#can#inline",
                "can#inline#result",
                "inline#result#.",
                "result#.#n",
                ".#n#o",
                "n#o#;",
                "o#;#}",
                ";#}#c",
                "}#c#arg",
                "c#arg#=",
                "arg#=#c",
                "=#c#arg",
                "c#arg#.",
                "arg#.#get",
                ".#get#next",
                "get#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#return",
                "}#return#can",
                "return#can#inline",
                "can#inline#result",
                "inline#result#.",
                "result#.#y",
                ".#y#e",
                "y#e#s",
                "e#s#;",
                "s#;#}",
                ";#}#}"
            ]
        }
    }
}