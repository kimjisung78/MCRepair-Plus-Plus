--- "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Closure_40/229/NameAnalyzer_Origin.java"	2023-02-22 13:18:20.968228180 +0900
+++ "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Closure_40/229/NameAnalyzer.java"	2023-02-22 13:18:20.968228180 +0900
@@ -592,55 +592,7 @@
    */
   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {
 
-    @Override
-    public void visit(NodeTraversal t, Node n, Node parent) {
-
-      // Record global variable and function declarations
-      if (t.inGlobalScope()) {
-        if (NodeUtil.isVarDeclaration(n)) {
-          NameInformation ns = createNameInformation(t, n, parent);
-          Preconditions.checkNotNull(ns);
-          recordSet(ns.name, n);
-        } else if (NodeUtil.isFunctionDeclaration(n)) {
-          Node nameNode = n.getFirstChild();
-          NameInformation ns = createNameInformation(t, nameNode, n);
-          if (ns != null) {
-            JsName nameInfo = getName(nameNode.getString(), true);
-            recordSet(nameInfo.name, nameNode);
-          }
-        } else if (NodeUtil.isObjectLitKey(n, parent)) {
-          NameInformation ns = createNameInformation(t, n, parent);
-          if (ns != null) {
-            recordSet(ns.name, n);
-          }
-        }
-      }
-
-      // Record assignments and call sites
-      if (n.isAssign()) {
-        Node nameNode = n.getFirstChild();
-
-        NameInformation ns = createNameInformation(t, nameNode, n);
-        if (ns != null) {
-          if (ns.isPrototype) {
-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
-          } else {
-            recordSet(ns.name, nameNode);
-          }
-        }
-      } else if (n.isCall()) {
-        Node nameNode = n.getFirstChild();
-        NameInformation ns = createNameInformation(t, nameNode, n);
-        if (ns != null && ns.onlyAffectsClassDef) {
-          JsName name = getName(ns.name, false);
-          if (name != null) {
-          refNodes.add(new ClassDefiningFunctionNode(
-              name, n, parent, parent.getParent()));
-          }
-        }
-      }
-    }
-
+@ Override public void visit ( NodeTraversal t , Node n , Node parent ) { if ( t . inGlobalScope ( ) ) { if ( NodeUtil . isVarDeclaration ( n ) ) { NameInformation ns = createNameInformation ( t , n , parent ) ; Preconditions . checkNotNull ( ns ) ; recordSet ( ns . name , n ) ; } else if ( NodeUtil . isFunctionDeclaration ( n ) ) { Node nameNode = n . getFirstChild ( ) ; NameInformation ns = createNameInformation ( t , nameNode , n ) ; if ( ns != null ) { JsName nameInfo = getName ( nameNode . getString ( ) , true ) ; recordSet ( nameInfo . name , nameNode ) ; } } else if ( NodeUtil . isObjectLitKey ( n , parent ) ) { NameInformation ns = createNameInformation ( t , n , parent ) ; if ( ns != null ) { recordSet ( ns . name , n ) ; } } } if ( n . isAssign ( ) ) { Node nameNode = n . getFirstChild ( ) ; NameInformation ns = createNameInformation ( t , nameNode , n ) ; if ( ns != null ) { if ( ns . isPrototype ) { recordPrototypeSet ( ns . prototypeClass , ns . prototypeProperty , n ) ; } else { recordSet ( ns . name , nameNode ) ; } } } else if ( n . isCall ( ) ) { Node nameNode = n . getFirstChild ( ) ; NameInformation ns = createNameInformation ( t , nameNode , n ) ; if ( ns != null && ns . onlyAffectsClassDef ) { JsName name = getName ( ns . name , true ) ; if ( name != null ) refNodes . add ( new ClassDefiningFunctionNode ( name , n , parent , parent . getParent ( ) ) ) ; } else { } } }
     /**
      * Records the assignment of a value to a global name.
      *
