{
    "TypeCheck": {
        "0": {
            "action_judgements": null,
            "action_score": 0.6,
            "buggy_code": "private void checkInterfaceConflictProperties ( NodeTraversal t , Node n , String functionName , HashMap < String , ObjectType > properties , HashMap < String , ObjectType > currentProperties , ObjectType interfaceType ) { ObjectType implicitProto = interfaceType . getImplicitPrototype ( ) ; Set < String > currentPropertyNames ;  currentPropertyNames = implicitProto . getOwnPropertyNames ( ) ;  for ( String name : currentPropertyNames ) { ObjectType oType = properties . get ( name ) ; if ( oType != null ) { if ( ! interfaceType . getPropertyType ( name ) . isEquivalentTo ( oType . getPropertyType ( name ) ) ) { compiler . report ( t . makeError ( n , INCOMPATIBLE_EXTENDED_PROPERTY_TYPE , functionName , name , oType . toString ( ) , interfaceType . toString ( ) ) ) ; } } currentProperties . put ( name , interfaceType ) ; } for ( ObjectType iType : interfaceType . getCtorExtendedInterfaces ( ) ) { checkInterfaceConflictProperties ( t , n , functionName , properties , currentProperties , iType ) ; } }",
            "buggy_dir": "",
            "criteria_token_length": 254,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#void",
                "private#void#interface",
                "void#interface#conflict",
                "interface#conflict#properties",
                "conflict#properties#(",
                "properties#(#node",
                "(#node#traversal",
                "node#traversal#t",
                "traversal#t#,",
                "t#,#Node",
                ",#Node#n",
                "Node#n#,",
                "n#,#String",
                ",#String#function",
                "String#function#name",
                "function#name#,",
                "name#,#hash",
                ",#hash#map",
                "hash#map#<",
                "map#<#String",
                "<#String#,",
                "String#,#object",
                ",#object#type",
                "object#type#>",
                "type#>#properties",
                ">#properties#,",
                "properties#,#hash",
                ",#hash#map",
                "hash#map#<",
                "map#<#String",
                "<#String#,",
                "String#,#object",
                ",#object#type",
                "object#type#>",
                "type#>#current",
                ">#current#properties",
                "current#properties#,",
                "properties#,#object",
                ",#object#type",
                "object#type#interface",
                "type#interface#type",
                "interface#type#)",
                "type#)#{",
                ")#{#object",
                "{#object#type",
                "object#type#implicit",
                "type#implicit#proto",
                "implicit#proto#=",
                "proto#=#interface",
                "=#interface#type",
                "interface#type#.",
                "type#.#implicit",
                ".#implicit#prototype",
                "implicit#prototype#(",
                "prototype#(#)",
                "(#)#;",
                ")#;#Set",
                ";#Set#<",
                "Set#<#String",
                "<#String#>",
                "String#>#property",
                ">#property#names",
                "property#names#;",
                "names#;#property",
                ";#property#names",
                "property#names#=",
                "names#=#implicit",
                "=#implicit#proto",
                "implicit#proto#.",
                "proto#.#own",
                ".#own#property",
                "own#property#names",
                "property#names#(",
                "names#(#)",
                "(#)#;",
                ")#;#for",
                ";#for#(",
                "for#(#String",
                "(#String#name",
                "String#name#:",
                "name#:#property",
                ":#property#names",
                "property#names#)",
                "names#)#{",
                ")#{#object",
                "{#object#type",
                "object#type#o",
                "type#o#type",
                "o#type#=",
                "type#=#properties",
                "=#properties#.",
                "properties#.#get",
                ".#get#(",
                "get#(#name",
                "(#name#)",
                "name#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#o",
                "(#o#type",
                "o#type#!=",
                "type#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#!",
                "(#!#interface",
                "!#interface#type",
                "interface#type#.",
                "type#.#property",
                ".#property#type",
                "property#type#(",
                "type#(#name",
                "(#name#)",
                "name#)#.",
                ")#.#equivalent",
                ".#equivalent#to",
                "equivalent#to#(",
                "to#(#o",
                "(#o#type",
                "o#type#.",
                "type#.#property",
                ".#property#type",
                "property#type#(",
                "type#(#name",
                "(#name#)",
                "name#)#)",
                ")#)#)",
                ")#)#{",
                ")#{#compiler",
                "{#compiler#.",
                "compiler#.#report",
                ".#report#(",
                "report#(#t",
                "(#t#.",
                "t#.#make",
                ".#make#error",
                "make#error#(",
                "error#(#n",
                "(#n#,",
                "n#,#i",
                ",#i#n",
                "i#n#c",
                "n#c#o",
                "c#o#m",
                "o#m#p",
                "m#p#a",
                "p#a#t",
                "a#t#i",
                "t#i#b",
                "i#b#l",
                "b#l#e",
                "l#e#e",
                "e#e#x",
                "e#x#t",
                "x#t#e",
                "t#e#n",
                "e#n#d",
                "n#d#e",
                "d#e#d",
                "e#d#p",
                "d#p#r",
                "p#r#o",
                "r#o#p",
                "o#p#e",
                "p#e#r",
                "e#r#t",
                "r#t#y",
                "t#y#t",
                "y#t#y",
                "t#y#p",
                "y#p#e",
                "p#e#,",
                "e#,#function",
                ",#function#name",
                "function#name#,",
                "name#,#name",
                ",#name#,",
                "name#,#o",
                ",#o#type",
                "o#type#.",
                "type#.#to",
                ".#to#string",
                "to#string#(",
                "string#(#)",
                "(#)#,",
                ")#,#interface",
                ",#interface#type",
                "interface#type#.",
                "type#.#to",
                ".#to#string",
                "to#string#(",
                "string#(#)",
                "(#)#)",
                ")#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#current",
                "}#current#properties",
                "current#properties#.",
                "properties#.#put",
                ".#put#(",
                "put#(#name",
                "(#name#,",
                "name#,#interface",
                ",#interface#type",
                "interface#type#)",
                "type#)#;",
                ")#;#}",
                ";#}#for",
                "}#for#(",
                "for#(#object",
                "(#object#type",
                "object#type#i",
                "type#i#type",
                "i#type#:",
                "type#:#interface",
                ":#interface#type",
                "interface#type#.",
                "type#.#ctor",
                ".#ctor#extended",
                "ctor#extended#interfaces",
                "extended#interfaces#(",
                "interfaces#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#interface",
                "{#interface#conflict",
                "interface#conflict#properties",
                "conflict#properties#(",
                "properties#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#,",
                "n#,#function",
                ",#function#name",
                "function#name#,",
                "name#,#properties",
                ",#properties#,",
                "properties#,#current",
                ",#current#properties",
                "current#properties#,",
                "properties#,#i",
                ",#i#type",
                "i#type#)",
                "type#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}"
            ],
            "diffs": {
                "11": {
                    "action": "INSERT",
                    "buggy_end_line": 11,
                    "buggy_size": 0,
                    "buggy_start_line": 11,
                    "fixed_end_line": 12,
                    "fixed_size": 1,
                    "fixed_start_line": 12
                },
                "12": {
                    "action": "DELETE",
                    "buggy_end_line": 12,
                    "buggy_size": 1,
                    "buggy_start_line": 12,
                    "fixed_end_line": 14,
                    "fixed_size": 0,
                    "fixed_start_line": 14
                },
                "14": {
                    "action": "CHANGE",
                    "buggy_end_line": 14,
                    "buggy_size": 1,
                    "buggy_start_line": 14,
                    "fixed_end_line": 15,
                    "fixed_size": 1,
                    "fixed_start_line": 15
                },
                "17": {
                    "action": "INSERT",
                    "buggy_end_line": 17,
                    "buggy_size": 0,
                    "buggy_start_line": 17,
                    "fixed_end_line": 18,
                    "fixed_size": 1,
                    "fixed_start_line": 18
                },
                "5": {
                    "action": "INSERT",
                    "buggy_end_line": 5,
                    "buggy_size": 0,
                    "buggy_start_line": 5,
                    "fixed_end_line": 5,
                    "fixed_size": 1,
                    "fixed_start_line": 5
                }
            },
            "end_line": 1592,
            "exp_ins": 1,
            "exp_other": 0,
            "file_ext": ".java",
            "file_key": "Closure_2_src_com_google_javascript_jscomp_TypeCheck",
            "file_name": "TypeCheck",
            "module_dir": "src/com/google/javascript/jscomp",
            "module_id": "Closure_2",
            "module_name": "Closure",
            "module_num": "2",
            "multi_chunk_key": "Closure_2_src_com_google_javascript_jscomp_TypeCheck_method1_checkInterfaceConflictProperties_NodeTraversal_Node_String_HashMap<String, ObjectType>_HashMap<String, ObjectType>_ObjectType",
            "ngram_score": 0.8022813688212928,
            "patch": "private void checkInterfaceConflictProperties ( NodeTraversal t , Node n , String functionName , HashMap < String , ObjectType > properties , HashMap < String , ObjectType > currentProperties , ObjectType interfaceType ) { ObjectType implicitProto = interfaceType . getImplicitPrototype ( ) ; Set < String > currentPropertyNames ; if ( implicitProto != null ) { currentPropertyNames = implicitProto . getOwnPropertyNames ( ) ; for ( String name : currentPropertyNames ) { ObjectType oType = properties . get ( name ) ; if ( oType != null ) { if ( ! interfaceType . getPropertyType ( name ) . isEquivalentTo ( oType . getPropertyType ( name ) ) ) { compiler . report ( t . makeError ( n , INCOMPATIBLE_EXTENDED_PROPERTY_TYPE , functionName , name , oType . toString ( ) , interfaceType . toString ( ) ) ) ; } } currentProperties . put ( name , interfaceType ) ; } for ( ObjectType iType : interfaceType . getCtorExtendedInterfaces ( ) ) { checkInterfaceConflictProperties ( t , n , functionName , properties , currentProperties , iType ) ; } } }",
            "patch_index": 341,
            "per_ins": 3,
            "per_other": 2,
            "score_total": 0.701,
            "set_index": null,
            "start_line": 1566,
            "tf_token_length": 263,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#void",
                "private#void#interface",
                "void#interface#conflict",
                "interface#conflict#properties",
                "conflict#properties#(",
                "properties#(#node",
                "(#node#traversal",
                "node#traversal#t",
                "traversal#t#,",
                "t#,#Node",
                ",#Node#n",
                "Node#n#,",
                "n#,#String",
                ",#String#function",
                "String#function#name",
                "function#name#,",
                "name#,#hash",
                ",#hash#map",
                "hash#map#<",
                "map#<#String",
                "<#String#,",
                "String#,#object",
                ",#object#type",
                "object#type#>",
                "type#>#properties",
                ">#properties#,",
                "properties#,#hash",
                ",#hash#map",
                "hash#map#<",
                "map#<#String",
                "<#String#,",
                "String#,#object",
                ",#object#type",
                "object#type#>",
                "type#>#current",
                ">#current#properties",
                "current#properties#,",
                "properties#,#object",
                ",#object#type",
                "object#type#interface",
                "type#interface#type",
                "interface#type#)",
                "type#)#{",
                ")#{#object",
                "{#object#type",
                "object#type#implicit",
                "type#implicit#proto",
                "implicit#proto#=",
                "proto#=#interface",
                "=#interface#type",
                "interface#type#.",
                "type#.#implicit",
                ".#implicit#prototype",
                "implicit#prototype#(",
                "prototype#(#)",
                "(#)#;",
                ")#;#Set",
                ";#Set#<",
                "Set#<#String",
                "<#String#>",
                "String#>#property",
                ">#property#names",
                "property#names#;",
                "names#;#if",
                ";#if#(",
                "if#(#implicit",
                "(#implicit#proto",
                "implicit#proto#!=",
                "proto#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#property",
                "{#property#names",
                "property#names#=",
                "names#=#implicit",
                "=#implicit#proto",
                "implicit#proto#.",
                "proto#.#own",
                ".#own#property",
                "own#property#names",
                "property#names#(",
                "names#(#)",
                "(#)#;",
                ")#;#for",
                ";#for#(",
                "for#(#String",
                "(#String#name",
                "String#name#:",
                "name#:#property",
                ":#property#names",
                "property#names#)",
                "names#)#{",
                ")#{#object",
                "{#object#type",
                "object#type#o",
                "type#o#type",
                "o#type#=",
                "type#=#properties",
                "=#properties#.",
                "properties#.#get",
                ".#get#(",
                "get#(#name",
                "(#name#)",
                "name#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#o",
                "(#o#type",
                "o#type#!=",
                "type#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#!",
                "(#!#interface",
                "!#interface#type",
                "interface#type#.",
                "type#.#property",
                ".#property#type",
                "property#type#(",
                "type#(#name",
                "(#name#)",
                "name#)#.",
                ")#.#equivalent",
                ".#equivalent#to",
                "equivalent#to#(",
                "to#(#o",
                "(#o#type",
                "o#type#.",
                "type#.#property",
                ".#property#type",
                "property#type#(",
                "type#(#name",
                "(#name#)",
                "name#)#)",
                ")#)#)",
                ")#)#{",
                ")#{#compiler",
                "{#compiler#.",
                "compiler#.#report",
                ".#report#(",
                "report#(#t",
                "(#t#.",
                "t#.#make",
                ".#make#error",
                "make#error#(",
                "error#(#n",
                "(#n#,",
                "n#,#i",
                ",#i#n",
                "i#n#c",
                "n#c#o",
                "c#o#m",
                "o#m#p",
                "m#p#a",
                "p#a#t",
                "a#t#i",
                "t#i#b",
                "i#b#l",
                "b#l#e",
                "l#e#e",
                "e#e#x",
                "e#x#t",
                "x#t#e",
                "t#e#n",
                "e#n#d",
                "n#d#e",
                "d#e#d",
                "e#d#p",
                "d#p#r",
                "p#r#o",
                "r#o#p",
                "o#p#e",
                "p#e#r",
                "e#r#t",
                "r#t#y",
                "t#y#t",
                "y#t#y",
                "t#y#p",
                "y#p#e",
                "p#e#,",
                "e#,#function",
                ",#function#name",
                "function#name#,",
                "name#,#name",
                ",#name#,",
                "name#,#o",
                ",#o#type",
                "o#type#.",
                "type#.#to",
                ".#to#string",
                "to#string#(",
                "string#(#)",
                "(#)#,",
                ")#,#interface",
                ",#interface#type",
                "interface#type#.",
                "type#.#to",
                ".#to#string",
                "to#string#(",
                "string#(#)",
                "(#)#)",
                ")#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#current",
                "}#current#properties",
                "current#properties#.",
                "properties#.#put",
                ".#put#(",
                "put#(#name",
                "(#name#,",
                "name#,#interface",
                ",#interface#type",
                "interface#type#)",
                "type#)#;",
                ")#;#}",
                ";#}#for",
                "}#for#(",
                "for#(#object",
                "(#object#type",
                "object#type#i",
                "type#i#type",
                "i#type#:",
                "type#:#interface",
                ":#interface#type",
                "interface#type#.",
                "type#.#ctor",
                ".#ctor#extended",
                "ctor#extended#interfaces",
                "extended#interfaces#(",
                "interfaces#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#interface",
                "{#interface#conflict",
                "interface#conflict#properties",
                "conflict#properties#(",
                "properties#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#,",
                "n#,#function",
                ",#function#name",
                "function#name#,",
                "name#,#properties",
                ",#properties#,",
                "properties#,#current",
                ",#current#properties",
                "current#properties#,",
                "properties#,#i",
                ",#i#type",
                "i#type#)",
                "type#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}",
                "}#}#}"
            ]
        }
    }
}