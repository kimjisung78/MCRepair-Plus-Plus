{
    "TypeCheck": {
        "0": {
            "action_judgements": null,
            "action_score": 0.8333333333333334,
            "buggy_code": "private void visitGetProp ( NodeTraversal t , Node n , Node parent ) { Node property = n . getLastChild ( ) ; Node objNode = n . getFirstChild ( ) ; JSType childType = getJSType ( objNode ) ; if ( childType . isDict ( ) ) { report ( t , property , TypeValidator . ILLEGAL_PROPERTY_ACCESS , \"'.'\" , \"dict\" ) ;  } else if ( n . getJSType ( ) != null && parent . isAssign ( ) ) {   return ;  } else if ( validator . expectNotNullOrUndefined ( t , n , childType , \"No properties on this expression\" , getNativeType ( OBJECT_TYPE ) ) ) { checkPropertyAccess ( childType , property . getString ( ) , t , n ) ; } ensureTyped ( t , n ) ; }",
            "buggy_dir": "",
            "criteria_token_length": 191,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#void",
                "private#void#get",
                "void#get#prop",
                "get#prop#(",
                "prop#(#node",
                "(#node#traversal",
                "node#traversal#t",
                "traversal#t#,",
                "t#,#Node",
                ",#Node#n",
                "Node#n#,",
                "n#,#Node",
                ",#Node#parent",
                "Node#parent#)",
                "parent#)#{",
                ")#{#Node",
                "{#Node#property",
                "Node#property#=",
                "property#=#n",
                "=#n#.",
                "n#.#last",
                ".#last#child",
                "last#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#Node",
                ";#Node#obj",
                "Node#obj#node",
                "obj#node#=",
                "node#=#n",
                "=#n#.",
                "n#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#j",
                ";#j#s",
                "j#s#type",
                "s#type#child",
                "type#child#type",
                "child#type#=",
                "type#=#j",
                "=#j#s",
                "j#s#type",
                "s#type#(",
                "type#(#obj",
                "(#obj#node",
                "obj#node#)",
                "node#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#child",
                "(#child#type",
                "child#type#.",
                "type#.#is",
                ".#is#dict",
                "is#dict#(",
                "dict#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#report",
                "{#report#(",
                "report#(#t",
                "(#t#,",
                "t#,#property",
                ",#property#,",
                "property#,#type",
                ",#type#validator",
                "type#validator#.",
                "validator#.#i",
                ".#i#l",
                "i#l#l",
                "l#l#e",
                "l#e#g",
                "e#g#a",
                "g#a#l",
                "a#l#p",
                "l#p#r",
                "p#r#o",
                "r#o#p",
                "o#p#e",
                "p#e#r",
                "e#r#t",
                "r#t#y",
                "t#y#a",
                "y#a#c",
                "a#c#c",
                "c#c#e",
                "c#e#s",
                "e#s#s",
                "s#s#,",
                "s#,#\"'.'\"",
                ",#\"'.'\"#,",
                "\"'.'\"#,#\"dict\"",
                ",#\"dict\"#)",
                "\"dict\"#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#if",
                "else#if#(",
                "if#(#n",
                "(#n#.",
                "n#.#j",
                ".#j#s",
                "j#s#type",
                "s#type#(",
                "type#(#)",
                "(#)#!=",
                ")#!=#null",
                "!=#null#&&",
                "null#&&#parent",
                "&&#parent#.",
                "parent#.#is",
                ".#is#assign",
                "is#assign#(",
                "assign#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#;",
                "return#;#}",
                ";#}#else",
                "}#else#if",
                "else#if#(",
                "if#(#validator",
                "(#validator#.",
                "validator#.#not",
                ".#not#null",
                "not#null#or",
                "null#or#undefined",
                "or#undefined#(",
                "undefined#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#,",
                "n#,#child",
                ",#child#type",
                "child#type#,",
                "type#,#\"",
                ",#\"#no properties on this expression\"",
                "\"#no properties on this expression\"#,",
                "no properties on this expression\"#,#native",
                ",#native#type",
                "native#type#(",
                "type#(#o",
                "(#o#b",
                "o#b#j",
                "b#j#e",
                "j#e#c",
                "e#c#t",
                "c#t#t",
                "t#t#y",
                "t#y#p",
                "y#p#e",
                "p#e#)",
                "e#)#)",
                ")#)#)",
                ")#)#{",
                ")#{#property",
                "{#property#access",
                "property#access#(",
                "access#(#child",
                "(#child#type",
                "child#type#,",
                "type#,#property",
                ",#property#.",
                "property#.#get",
                ".#get#string",
                "get#string#(",
                "string#(#)",
                "(#)#,",
                ")#,#t",
                ",#t#,",
                "t#,#n",
                ",#n#)",
                "n#)#;",
                ")#;#}",
                ";#}#ensure",
                "}#ensure#typed",
                "ensure#typed#(",
                "typed#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#)",
                "n#)#;",
                ")#;#}",
                ";#}#}"
            ],
            "diffs": {
                "14": {
                    "action": "INSERT",
                    "buggy_end_line": 14,
                    "buggy_size": 0,
                    "buggy_start_line": 14,
                    "fixed_end_line": 13,
                    "fixed_size": 2,
                    "fixed_start_line": 12
                },
                "8": {
                    "action": "DELETE",
                    "buggy_end_line": 9,
                    "buggy_size": 2,
                    "buggy_start_line": 8,
                    "fixed_end_line": 8,
                    "fixed_size": 0,
                    "fixed_start_line": 8
                }
            },
            "end_line": 1321,
            "exp_ins": 0,
            "exp_other": 2,
            "file_ext": ".java",
            "file_key": "Closure_11_src_com_google_javascript_jscomp_TypeCheck",
            "file_name": "TypeCheck",
            "module_dir": "src/com/google/javascript/jscomp",
            "module_id": "Closure_11",
            "module_name": "Closure",
            "module_num": "11",
            "multi_chunk_key": "Closure_11_src_com_google_javascript_jscomp_TypeCheck_method1_visitGetProp_NodeTraversal_Node_Node",
            "ngram_score": 0.8219895287958116,
            "patch": "private void visitGetProp ( NodeTraversal t , Node n , Node parent ) { Node property = n . getLastChild ( ) ; Node objNode = n . getFirstChild ( ) ; JSType childType = getJSType ( objNode ) ; if ( childType . isDict ( ) ) { report ( t , property , TypeValidator . ILLEGAL_PROPERTY_ACCESS , \"'.'\" , \"dict\" ) ; } else if ( validator . expectNotNullOrUndefined ( t , n , childType , \"No properties on this expression\" , getNativeType ( OBJECT_TYPE ) ) ) { checkPropertyAccess ( childType , property . getString ( ) , t , n ) ; } ensureTyped ( t , n ) ; if ( parent . isAssign ( ) ) return ; }",
            "patch_index": 218,
            "per_ins": 1,
            "per_other": 2,
            "score_total": 0.828,
            "set_index": null,
            "start_line": 1303,
            "tf_token_length": 178,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#void",
                "private#void#get",
                "void#get#prop",
                "get#prop#(",
                "prop#(#node",
                "(#node#traversal",
                "node#traversal#t",
                "traversal#t#,",
                "t#,#Node",
                ",#Node#n",
                "Node#n#,",
                "n#,#Node",
                ",#Node#parent",
                "Node#parent#)",
                "parent#)#{",
                ")#{#Node",
                "{#Node#property",
                "Node#property#=",
                "property#=#n",
                "=#n#.",
                "n#.#last",
                ".#last#child",
                "last#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#Node",
                ";#Node#obj",
                "Node#obj#node",
                "obj#node#=",
                "node#=#n",
                "=#n#.",
                "n#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#j",
                ";#j#s",
                "j#s#type",
                "s#type#child",
                "type#child#type",
                "child#type#=",
                "type#=#j",
                "=#j#s",
                "j#s#type",
                "s#type#(",
                "type#(#obj",
                "(#obj#node",
                "obj#node#)",
                "node#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#child",
                "(#child#type",
                "child#type#.",
                "type#.#is",
                ".#is#dict",
                "is#dict#(",
                "dict#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#report",
                "{#report#(",
                "report#(#t",
                "(#t#,",
                "t#,#property",
                ",#property#,",
                "property#,#type",
                ",#type#validator",
                "type#validator#.",
                "validator#.#i",
                ".#i#l",
                "i#l#l",
                "l#l#e",
                "l#e#g",
                "e#g#a",
                "g#a#l",
                "a#l#p",
                "l#p#r",
                "p#r#o",
                "r#o#p",
                "o#p#e",
                "p#e#r",
                "e#r#t",
                "r#t#y",
                "t#y#a",
                "y#a#c",
                "a#c#c",
                "c#c#e",
                "c#e#s",
                "e#s#s",
                "s#s#,",
                "s#,#\"'.'\"",
                ",#\"'.'\"#,",
                "\"'.'\"#,#\"dict\"",
                ",#\"dict\"#)",
                "\"dict\"#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#if",
                "else#if#(",
                "if#(#validator",
                "(#validator#.",
                "validator#.#not",
                ".#not#null",
                "not#null#or",
                "null#or#undefined",
                "or#undefined#(",
                "undefined#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#,",
                "n#,#child",
                ",#child#type",
                "child#type#,",
                "type#,#\"",
                ",#\"#no properties on this expression\"",
                "\"#no properties on this expression\"#,",
                "no properties on this expression\"#,#native",
                ",#native#type",
                "native#type#(",
                "type#(#o",
                "(#o#b",
                "o#b#j",
                "b#j#e",
                "j#e#c",
                "e#c#t",
                "c#t#t",
                "t#t#y",
                "t#y#p",
                "y#p#e",
                "p#e#)",
                "e#)#)",
                ")#)#)",
                ")#)#{",
                ")#{#property",
                "{#property#access",
                "property#access#(",
                "access#(#child",
                "(#child#type",
                "child#type#,",
                "type#,#property",
                ",#property#.",
                "property#.#get",
                ".#get#string",
                "get#string#(",
                "string#(#)",
                "(#)#,",
                ")#,#t",
                ",#t#,",
                "t#,#n",
                ",#n#)",
                "n#)#;",
                ")#;#}",
                ";#}#ensure",
                "}#ensure#typed",
                "ensure#typed#(",
                "typed#(#t",
                "(#t#,",
                "t#,#n",
                ",#n#)",
                "n#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#parent",
                "(#parent#.",
                "parent#.#is",
                ".#is#assign",
                "is#assign#(",
                "assign#(#)",
                "(#)#)",
                ")#)#return",
                ")#return#;",
                "return#;#}",
                ";#}#}"
            ]
        }
    }
}