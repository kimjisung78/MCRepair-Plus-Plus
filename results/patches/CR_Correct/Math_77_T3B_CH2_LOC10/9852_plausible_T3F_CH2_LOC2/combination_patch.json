{
    "ArrayRealVector": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "@ Override public double getLInfNorm ( ) { double max = 0 ; for ( double a : data ) {  max += Math . max ( max , Math . abs ( a ) ) ;  } return max ; }",
            "buggy_dir": "",
            "criteria_token_length": 47,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#@",
                "{#@#Override",
                "@#Override#public",
                "Override#public#double",
                "public#double#l",
                "double#l#inf",
                "l#inf#norm",
                "inf#norm#(",
                "norm#(#)",
                "(#)#{",
                ")#{#double",
                "{#double#max",
                "double#max#=",
                "max#=#0",
                "=#0#;",
                "0#;#for",
                ";#for#(",
                "for#(#double",
                "(#double#a",
                "double#a#:",
                "a#:#data",
                ":#data#)",
                "data#)#{",
                ")#{#max",
                "{#max#+=",
                "max#+=#Math",
                "+=#Math#.",
                "Math#.#max",
                ".#max#(",
                "max#(#max",
                "(#max#,",
                "max#,#Math",
                ",#Math#.",
                "Math#.#abs",
                ".#abs#(",
                "abs#(#a",
                "(#a#)",
                "a#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#max",
                "return#max#;",
                "max#;#}",
                ";#}#}"
            ],
            "diffs": {
                "6": {
                    "action": "CHANGE",
                    "buggy_end_line": 6,
                    "buggy_size": 1,
                    "buggy_start_line": 6,
                    "fixed_end_line": 6,
                    "fixed_size": 1,
                    "fixed_start_line": 6
                }
            },
            "end_line": 724,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Math_77_src_main_java_org_apache_commons_math_linear_ArrayRealVector",
            "file_name": "ArrayRealVector",
            "module_dir": "src/main/java/org/apache/commons/math/linear",
            "module_id": "Math_77",
            "module_name": "Math",
            "module_num": "77",
            "multi_chunk_key": "Math_77_src_main_java_org_apache_commons_math_linear_ArrayRealVector_method1_getLInfNorm",
            "ngram_score": 0.8723404255319149,
            "patch": "@ Override public double getLInfNorm ( ) { double max = 0 ; for ( double a : data ) { max = Math . max ( a , Math . abs ( a ) ) ; } return max ; }",
            "patch_index": 176,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.936,
            "set_index": null,
            "start_line": 717,
            "tf_token_length": 47,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#@",
                "{#@#Override",
                "@#Override#public",
                "Override#public#double",
                "public#double#l",
                "double#l#inf",
                "l#inf#norm",
                "inf#norm#(",
                "norm#(#)",
                "(#)#{",
                ")#{#double",
                "{#double#max",
                "double#max#=",
                "max#=#0",
                "=#0#;",
                "0#;#for",
                ";#for#(",
                "for#(#double",
                "(#double#a",
                "double#a#:",
                "a#:#data",
                ":#data#)",
                "data#)#{",
                ")#{#max",
                "{#max#=",
                "max#=#Math",
                "=#Math#.",
                "Math#.#max",
                ".#max#(",
                "max#(#a",
                "(#a#,",
                "a#,#Math",
                ",#Math#.",
                "Math#.#abs",
                ".#abs#(",
                "abs#(#a",
                "(#a#)",
                "a#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#max",
                "return#max#;",
                "max#;#}",
                ";#}#}"
            ]
        }
    },
    "OpenMapRealVector": {
        "0": {
            "action_judgements": null,
            "action_score": 0.5555555555555556,
            "buggy_code": " public double getLInfNorm ( ) {   double max = 0 ;   Iterator iter = entries . iterator ( ) ;   while ( iter . hasNext ( ) ) {   iter . advance ( ) ;   max += iter . value ( ) ;   }   return max ;   } ",
            "buggy_dir": "",
            "criteria_token_length": 54,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#double",
                "public#double#l",
                "double#l#inf",
                "l#inf#norm",
                "inf#norm#(",
                "norm#(#)",
                "(#)#{",
                ")#{#double",
                "{#double#max",
                "double#max#=",
                "max#=#0",
                "=#0#;",
                "0#;#Iterator",
                ";#Iterator#iter",
                "Iterator#iter#=",
                "iter#=#entries",
                "=#entries#.",
                "entries#.#iterator",
                ".#iterator#(",
                "iterator#(#)",
                "(#)#;",
                ")#;#while",
                ";#while#(",
                "while#(#iter",
                "(#iter#.",
                "iter#.#has",
                ".#has#next",
                "has#next#(",
                "next#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#iter",
                "{#iter#.",
                "iter#.#advance",
                ".#advance#(",
                "advance#(#)",
                "(#)#;",
                ")#;#max",
                ";#max#+=",
                "max#+=#iter",
                "+=#iter#.",
                "iter#.#value",
                ".#value#(",
                "value#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#max",
                "return#max#;",
                "max#;#}",
                ";#}#}"
            ],
            "diffs": {
                "2": {
                    "action": "CHANGE",
                    "buggy_end_line": 2,
                    "buggy_size": 1,
                    "buggy_start_line": 2,
                    "fixed_end_line": 2,
                    "fixed_size": 1,
                    "fixed_start_line": 2
                }
            },
            "end_line": 506,
            "exp_ins": 0,
            "exp_other": 9,
            "file_ext": ".java",
            "file_key": "Math_77_src_main_java_org_apache_commons_math_linear_OpenMapRealVector",
            "file_name": "OpenMapRealVector",
            "module_dir": "src/main/java/org/apache/commons/math/linear",
            "module_id": "Math_77",
            "module_name": "Math",
            "module_num": "77",
            "multi_chunk_key": "Math_77_src_main_java_org_apache_commons_math_linear_OpenMapRealVector_method1_getLInfNorm",
            "ngram_score": 0.9074074074074074,
            "patch": "public double lInfNorm ( ) { double max = 0 ; Iterator iter = entries . iterator ( ) ; while ( iter . hasNext ( ) ) { iter . advance ( ) ; max += iter . value ( ) ; } return max ; }",
            "patch_index": 113,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.731,
            "set_index": null,
            "start_line": 498,
            "tf_token_length": 53,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#double",
                "public#double#inf",
                "double#inf#norm",
                "inf#norm#(",
                "norm#(#)",
                "(#)#{",
                ")#{#double",
                "{#double#max",
                "double#max#=",
                "max#=#0",
                "=#0#;",
                "0#;#Iterator",
                ";#Iterator#iter",
                "Iterator#iter#=",
                "iter#=#entries",
                "=#entries#.",
                "entries#.#iterator",
                ".#iterator#(",
                "iterator#(#)",
                "(#)#;",
                ")#;#while",
                ";#while#(",
                "while#(#iter",
                "(#iter#.",
                "iter#.#has",
                ".#has#next",
                "has#next#(",
                "next#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#iter",
                "{#iter#.",
                "iter#.#advance",
                ".#advance#(",
                "advance#(#)",
                "(#)#;",
                ")#;#max",
                ";#max#+=",
                "max#+=#iter",
                "+=#iter#.",
                "iter#.#value",
                ".#value#(",
                "value#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#max",
                "return#max#;",
                "max#;#}",
                ";#}#}"
            ]
        }
    }
}