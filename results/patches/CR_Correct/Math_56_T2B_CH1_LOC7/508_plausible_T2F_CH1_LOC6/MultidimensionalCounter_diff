--- "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Math_56/508/MultidimensionalCounter_Origin.java"	2023-02-22 18:36:41.964129926 +0900
+++ "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Math_56/508/MultidimensionalCounter.java"	2023-02-22 18:36:41.964129926 +0900
@@ -213,38 +213,7 @@
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
-    public int[] getCounts(int index) {
-        if (index < 0 ||
-            index >= totalSize) {
-            throw new OutOfRangeException(index, 0, totalSize);
-        }
-
-        final int[] indices = new int[dimension];
-
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
-            }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
-        }
-
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
-
-        return indices;
-    }
-
+public int [ ] getCounts ( int index ) { if ( index < 0 || index >= totalSize ) { throw new OutOfRangeException ( index , 0 , totalSize ) ; } final int [ ] indices = new int [ dimension ] ; int count = 0 ; for ( int i = 0 ; i < last ; i ++ ) { int idx = 0 ; final int offset = uniCounterOffset [ i ] ; while ( count <= index ) { count += offset ; ++ idx ; } -- idx ; count -= offset ; indices [ i ] = idx ; } int idx = index - count ; indices [ last ] = idx ; return indices ; }
     /**
      * Convert to unidimensional counter.
      *
