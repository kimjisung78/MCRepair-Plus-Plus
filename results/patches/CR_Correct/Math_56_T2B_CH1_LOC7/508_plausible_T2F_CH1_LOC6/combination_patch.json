{
    "MultidimensionalCounter": {
        "0": {
            "action_judgements": null,
            "action_score": 0.9285714285714286,
            "buggy_code": "public int [ ] getCounts ( int index ) { if ( index < 0 || index >= totalSize ) { throw new OutOfRangeException ( index , 0 , totalSize ) ; } final int [ ] indices = new int [ dimension ] ; int count = 0 ; for ( int i = 0 ; i < last ; i ++ ) { int idx = 0 ; final int offset = uniCounterOffset [ i ] ; while ( count <= index ) { count += offset ; ++ idx ; } -- idx ; count -= offset ; indices [ i ] = idx ; }  int idx = 1 ;   while ( count < index ) {   count += idx ;   ++ idx ;   }   -- idx ;   indices [ last ] = idx ;  return indices ; }",
            "buggy_dir": "",
            "criteria_token_length": 153,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#int",
                "public#int#[",
                "int#[#]",
                "[#]#get",
                "]#get#counts",
                "get#counts#(",
                "counts#(#int",
                "(#int#index",
                "int#index#)",
                "index#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#index",
                "(#index#<",
                "index#<#0",
                "<#0#||",
                "0#||#index",
                "||#index#>=",
                "index#>=#total",
                ">=#total#size",
                "total#size#)",
                "size#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#out",
                "new#out#of",
                "out#of#range",
                "of#range#exception",
                "range#exception#(",
                "exception#(#index",
                "(#index#,",
                "index#,#0",
                ",#0#,",
                "0#,#total",
                ",#total#size",
                "total#size#)",
                "size#)#;",
                ")#;#}",
                ";#}#final",
                "}#final#int",
                "final#int#[",
                "int#[#]",
                "[#]#indices",
                "]#indices#=",
                "indices#=#new",
                "=#new#int",
                "new#int#[",
                "int#[#dimension",
                "[#dimension#]",
                "dimension#]#;",
                "]#;#int",
                ";#int#count",
                "int#count#=",
                "count#=#0",
                "=#0#;",
                "0#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#last",
                "<#last#;",
                "last#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#int",
                "{#int#idx",
                "int#idx#=",
                "idx#=#0",
                "=#0#;",
                "0#;#final",
                ";#final#int",
                "final#int#offset",
                "int#offset#=",
                "offset#=#counter",
                "=#counter#offset",
                "counter#offset#[",
                "offset#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#while",
                ";#while#(",
                "while#(#count",
                "(#count#<=",
                "count#<=#index",
                "<=#index#)",
                "index#)#{",
                ")#{#count",
                "{#count#+=",
                "count#+=#offset",
                "+=#offset#;",
                "offset#;#++",
                ";#++#idx",
                "++#idx#;",
                "idx#;#}",
                ";#}#--",
                "}#--#idx",
                "--#idx#;",
                "idx#;#count",
                ";#count#-=",
                "count#-=#offset",
                "-=#offset#;",
                "offset#;#indices",
                ";#indices#[",
                "indices#[#i",
                "[#i#]",
                "i#]#=",
                "]#=#idx",
                "=#idx#;",
                "idx#;#}",
                ";#}#int",
                "}#int#idx",
                "int#idx#=",
                "idx#=#1",
                "=#1#;",
                "1#;#while",
                ";#while#(",
                "while#(#count",
                "(#count#<",
                "count#<#index",
                "<#index#)",
                "index#)#{",
                ")#{#count",
                "{#count#+=",
                "count#+=#idx",
                "+=#idx#;",
                "idx#;#++",
                ";#++#idx",
                "++#idx#;",
                "idx#;#}",
                ";#}#--",
                "}#--#idx",
                "--#idx#;",
                "idx#;#indices",
                ";#indices#[",
                "indices#[#last",
                "[#last#]",
                "last#]#=",
                "]#=#idx",
                "=#idx#;",
                "idx#;#return",
                ";#return#indices",
                "return#indices#;",
                "indices#;#}",
                ";#}#}"
            ],
            "diffs": {
                "19": {
                    "action": "CHANGE",
                    "buggy_end_line": 24,
                    "buggy_size": 6,
                    "buggy_start_line": 19,
                    "fixed_end_line": 19,
                    "fixed_size": 1,
                    "fixed_start_line": 19
                }
            },
            "end_line": 246,
            "exp_ins": 0,
            "exp_other": 7,
            "file_ext": ".java",
            "file_key": "Math_56_src_main_java_org_apache_commons_math_util_MultidimensionalCounter",
            "file_name": "MultidimensionalCounter",
            "module_dir": "src/main/java/org/apache/commons/math/util",
            "module_id": "Math_56",
            "module_name": "Math",
            "module_num": "56",
            "multi_chunk_key": "Math_56_src_main_java_org_apache_commons_math_util_MultidimensionalCounter_method1_getCounts_int",
            "ngram_score": 0.7908496732026143,
            "patch": "public int [ ] getCounts ( int index ) { if ( index < 0 || index >= totalSize ) { throw new OutOfRangeException ( index , 0 , totalSize ) ; } final int [ ] indices = new int [ dimension ] ; int count = 0 ; for ( int i = 0 ; i < last ; i ++ ) { int idx = 0 ; final int offset = uniCounterOffset [ i ] ; while ( count <= index ) { count += offset ; ++ idx ; } -- idx ; count -= offset ; indices [ i ] = idx ; } int idx = index - count ; indices [ last ] = idx ; return indices ; }",
            "patch_index": 886,
            "per_ins": 0,
            "per_other": 6,
            "score_total": 0.86,
            "set_index": null,
            "start_line": 216,
            "tf_token_length": 137,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#int",
                "public#int#[",
                "int#[#]",
                "[#]#get",
                "]#get#counts",
                "get#counts#(",
                "counts#(#int",
                "(#int#index",
                "int#index#)",
                "index#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#index",
                "(#index#<",
                "index#<#0",
                "<#0#||",
                "0#||#index",
                "||#index#>=",
                "index#>=#total",
                ">=#total#size",
                "total#size#)",
                "size#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#out",
                "new#out#of",
                "out#of#range",
                "of#range#exception",
                "range#exception#(",
                "exception#(#index",
                "(#index#,",
                "index#,#0",
                ",#0#,",
                "0#,#total",
                ",#total#size",
                "total#size#)",
                "size#)#;",
                ")#;#}",
                ";#}#final",
                "}#final#int",
                "final#int#[",
                "int#[#]",
                "[#]#indices",
                "]#indices#=",
                "indices#=#new",
                "=#new#int",
                "new#int#[",
                "int#[#dimension",
                "[#dimension#]",
                "dimension#]#;",
                "]#;#int",
                ";#int#count",
                "int#count#=",
                "count#=#0",
                "=#0#;",
                "0#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#last",
                "<#last#;",
                "last#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#int",
                "{#int#idx",
                "int#idx#=",
                "idx#=#0",
                "=#0#;",
                "0#;#final",
                ";#final#int",
                "final#int#offset",
                "int#offset#=",
                "offset#=#counter",
                "=#counter#offset",
                "counter#offset#[",
                "offset#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#while",
                ";#while#(",
                "while#(#count",
                "(#count#<=",
                "count#<=#index",
                "<=#index#)",
                "index#)#{",
                ")#{#count",
                "{#count#+=",
                "count#+=#offset",
                "+=#offset#;",
                "offset#;#++",
                ";#++#idx",
                "++#idx#;",
                "idx#;#}",
                ";#}#--",
                "}#--#idx",
                "--#idx#;",
                "idx#;#count",
                ";#count#-=",
                "count#-=#offset",
                "-=#offset#;",
                "offset#;#indices",
                ";#indices#[",
                "indices#[#i",
                "[#i#]",
                "i#]#=",
                "]#=#idx",
                "=#idx#;",
                "idx#;#}",
                ";#}#int",
                "}#int#idx",
                "int#idx#=",
                "idx#=#index",
                "=#index#-",
                "index#-#count",
                "-#count#;",
                "count#;#indices",
                ";#indices#[",
                "indices#[#last",
                "[#last#]",
                "last#]#=",
                "]#=#idx",
                "=#idx#;",
                "idx#;#return",
                ";#return#indices",
                "return#indices#;",
                "indices#;#}",
                ";#}#}"
            ]
        }
    }
}