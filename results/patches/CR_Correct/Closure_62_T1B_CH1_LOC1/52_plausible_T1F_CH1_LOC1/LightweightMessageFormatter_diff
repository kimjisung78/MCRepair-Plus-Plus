--- "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Closure_62/52/LightweightMessageFormatter_Origin.java"	2023-02-22 13:56:30.971486224 +0900
+++ "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Closure_62/52/LightweightMessageFormatter.java"	2023-02-22 13:56:30.975486257 +0900
@@ -63,53 +63,7 @@
     return format(warning, true);
   }
 
-  private String format(JSError error, boolean warning) {
-    // extract source excerpt
-    SourceExcerptProvider source = getSource();
-    String sourceExcerpt = source == null ? null :
-        excerpt.get(
-            source, error.sourceName, error.lineNumber, excerptFormatter);
-
-    // formatting the message
-    StringBuilder b = new StringBuilder();
-    if (error.sourceName != null) {
-      b.append(error.sourceName);
-      if (error.lineNumber > 0) {
-        b.append(':');
-        b.append(error.lineNumber);
-      }
-      b.append(": ");
-    }
-
-    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));
-    b.append(" - ");
-
-    b.append(error.description);
-    b.append('\n');
-    if (sourceExcerpt != null) {
-      b.append(sourceExcerpt);
-      b.append('\n');
-      int charno = error.getCharno();
-
-      // padding equal to the excerpt and arrow at the end
-      // charno == sourceExpert.length() means something is missing
-      // at the end of the line
-      if (excerpt.equals(LINE)
-          && 0 <= charno && charno < sourceExcerpt.length()) {
-        for (int i = 0; i < charno; i++) {
-          char c = sourceExcerpt.charAt(i);
-          if (Character.isWhitespace(c)) {
-            b.append(c);
-          } else {
-            b.append(' ');
-          }
-        }
-        b.append("^\n");
-      }
-    }
-    return b.toString();
-  }
-
+private String format ( JSError error , boolean warning ) { SourceExcerptProvider source = getSource ( ) ; String sourceExcerpt = source == null ? null : excerpt . get ( source , error . sourceName , error . lineNumber , excerptFormatter ) ; StringBuilder b = new StringBuilder ( ) ; if ( error . sourceName != null ) { b . append ( error . sourceName ) ; if ( error . lineNumber > 0 ) { b . append ( ':' ) ; b . append ( error . lineNumber ) ; } b . append ( ": " ) ; } b . append ( getLevelName ( warning ? CheckLevel . WARNING : CheckLevel . ERROR ) ) ; b . append ( " - " ) ; b . append ( error . description ) ; b . append ( '\n' ) ; if ( sourceExcerpt != null ) { b . append ( sourceExcerpt ) ; b . append ( '\n' ) ; int charno = error . getCharno ( ) ; if ( excerpt . equals ( LINE ) && 0 <= charno && charno <= sourceExcerpt . length ( ) ) { for ( int i = 0 ; i < charno ; i ++ ) { char c = sourceExcerpt . charAt ( i ) ; if ( Character . isWhitespace ( c ) ) { b . append ( c ) ; } else { b . append ( ' ' ) ; } } b . append ( "^\n" ) ; } } return b . toString ( ) ; }
   /**
    * Formats a region by appending line numbers in front, e.g.
    * <pre>   9| if (foo) {
