{
    "LightweightMessageFormatter": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "private String format ( JSError error , boolean warning ) { SourceExcerptProvider source = getSource ( ) ; String sourceExcerpt = source == null ? null : excerpt . get ( source , error . sourceName , error . lineNumber , excerptFormatter ) ; StringBuilder b = new StringBuilder ( ) ; if ( error . sourceName != null ) { b . append ( error . sourceName ) ; if ( error . lineNumber > 0 ) { b . append ( ':' ) ; b . append ( error . lineNumber ) ; } b . append ( \": \" ) ; } b . append ( getLevelName ( warning ? CheckLevel . WARNING : CheckLevel . ERROR ) ) ; b . append ( \" - \" ) ; b . append ( error . description ) ; b . append ( '\\n' ) ; if ( sourceExcerpt != null ) { b . append ( sourceExcerpt ) ; b . append ( '\\n' ) ; int charno = error . getCharno ( ) ;  if ( excerpt . equals ( LINE ) && 0 <= charno && charno < sourceExcerpt . length ( ) ) {  for ( int i = 0 ; i < charno ; i ++ ) { char c = sourceExcerpt . charAt ( i ) ; if ( Character . isWhitespace ( c ) ) { b . append ( c ) ; } else { b . append ( ' ' ) ; } } b . append ( \"^\\n\" ) ; } } return b . toString ( ) ; }",
            "buggy_dir": "",
            "criteria_token_length": 310,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#String",
                "private#String#format",
                "String#format#(",
                "format#(#j",
                "(#j#s",
                "j#s#error",
                "s#error#error",
                "error#error#,",
                "error#,#boolean",
                ",#boolean#warning",
                "boolean#warning#)",
                "warning#)#{",
                ")#{#source",
                "{#source#excerpt",
                "source#excerpt#provider",
                "excerpt#provider#source",
                "provider#source#=",
                "source#=#get",
                "=#get#source",
                "get#source#(",
                "source#(#)",
                "(#)#;",
                ")#;#String",
                ";#String#source",
                "String#source#excerpt",
                "source#excerpt#=",
                "excerpt#=#source",
                "=#source#==",
                "source#==#null",
                "==#null#?",
                "null#?#null",
                "?#null#:",
                "null#:#excerpt",
                ":#excerpt#.",
                "excerpt#.#get",
                ".#get#(",
                "get#(#source",
                "(#source#,",
                "source#,#error",
                ",#error#.",
                "error#.#source",
                ".#source#name",
                "source#name#,",
                "name#,#error",
                ",#error#.",
                "error#.#line",
                ".#line#number",
                "line#number#,",
                "number#,#excerpt",
                ",#excerpt#formatter",
                "excerpt#formatter#)",
                "formatter#)#;",
                ")#;#string",
                ";#string#builder",
                "string#builder#b",
                "builder#b#=",
                "b#=#new",
                "=#new#string",
                "new#string#builder",
                "string#builder#(",
                "builder#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#error",
                "(#error#.",
                "error#.#source",
                ".#source#name",
                "source#name#!=",
                "name#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#b",
                "{#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#error",
                "(#error#.",
                "error#.#source",
                ".#source#name",
                "source#name#)",
                "name#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#error",
                "(#error#.",
                "error#.#line",
                ".#line#number",
                "line#number#>",
                "number#>#0",
                ">#0#)",
                "0#)#{",
                ")#{#b",
                "{#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#':'",
                "(#':'#)",
                "':'#)#;",
                ")#;#b",
                ";#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#error",
                "(#error#.",
                "error#.#line",
                ".#line#number",
                "line#number#)",
                "number#)#;",
                ")#;#}",
                ";#}#b",
                "}#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#\": \"",
                "(#\": \"#)",
                "\": \"#)#;",
                ")#;#}",
                ";#}#b",
                "}#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#level",
                "(#level#name",
                "level#name#(",
                "name#(#warning",
                "(#warning#?",
                "warning#?#check",
                "?#check#level",
                "check#level#.",
                "level#.#w",
                ".#w#a",
                "w#a#r",
                "a#r#n",
                "r#n#i",
                "n#i#n",
                "i#n#g",
                "n#g#:",
                "g#:#check",
                ":#check#level",
                "check#level#.",
                "level#.#e",
                ".#e#r",
                "e#r#r",
                "r#r#o",
                "r#o#r",
                "o#r#)",
                "r#)#)",
                ")#)#;",
                ")#;#b",
                ";#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#\" - \"",
                "(#\" - \"#)",
                "\" - \"#)#;",
                ")#;#b",
                ";#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#error",
                "(#error#.",
                "error#.#description",
                ".#description#)",
                "description#)#;",
                ")#;#b",
                ";#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#'\\n'",
                "(#'\\n'#)",
                "'\\n'#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#source",
                "(#source#excerpt",
                "source#excerpt#!=",
                "excerpt#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#b",
                "{#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#source",
                "(#source#excerpt",
                "source#excerpt#)",
                "excerpt#)#;",
                ")#;#b",
                ";#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#'\\n'",
                "(#'\\n'#)",
                "'\\n'#)#;",
                ")#;#int",
                ";#int#charno",
                "int#charno#=",
                "charno#=#error",
                "=#error#.",
                "error#.#get",
                ".#get#charno",
                "get#charno#(",
                "charno#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#excerpt",
                "(#excerpt#.",
                "excerpt#.#equals",
                ".#equals#(",
                "equals#(#l",
                "(#l#i",
                "l#i#n",
                "i#n#e",
                "n#e#)",
                "e#)#&&",
                ")#&&#0",
                "&&#0#<=",
                "0#<=#charno",
                "<=#charno#&&",
                "charno#&&#charno",
                "&&#charno#<",
                "charno#<#source",
                "<#source#excerpt",
                "source#excerpt#.",
                "excerpt#.#length",
                ".#length#(",
                "length#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#for",
                "{#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#charno",
                "<#charno#;",
                "charno#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#char",
                "{#char#c",
                "char#c#=",
                "c#=#source",
                "=#source#excerpt",
                "source#excerpt#.",
                "excerpt#.#char",
                ".#char#at",
                "char#at#(",
                "at#(#i",
                "(#i#)",
                "i#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#Character",
                "(#Character#.",
                "Character#.#is",
                ".#is#whitespace",
                "is#whitespace#(",
                "whitespace#(#c",
                "(#c#)",
                "c#)#)",
                ")#)#{",
                ")#{#b",
                "{#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#c",
                "(#c#)",
                "c#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#b",
                "{#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#' '",
                "(#' '#)",
                "' '#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#b",
                "}#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#\"^\\n\"",
                "(#\"^\\n\"#)",
                "\"^\\n\"#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#return",
                "}#return#b",
                "return#b#.",
                "b#.#to",
                ".#to#string",
                "to#string#(",
                "string#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#}"
            ],
            "diffs": {
                "22": {
                    "action": "CHANGE",
                    "buggy_end_line": 22,
                    "buggy_size": 1,
                    "buggy_start_line": 22,
                    "fixed_end_line": 22,
                    "fixed_size": 1,
                    "fixed_start_line": 22
                }
            },
            "end_line": 111,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Closure_62_src_com_google_javascript_jscomp_LightweightMessageFormatter",
            "file_name": "LightweightMessageFormatter",
            "module_dir": "src/com/google/javascript/jscomp",
            "module_id": "Closure_62",
            "module_name": "Closure",
            "module_num": "62",
            "multi_chunk_key": "Closure_62_src_com_google_javascript_jscomp_LightweightMessageFormatter_method1_format_JSError_boolean",
            "ngram_score": 0.7129032258064516,
            "patch": "private String format ( JSError error , boolean warning ) { SourceExcerptProvider source = getSource ( ) ; String sourceExcerpt = source == null ? null : excerpt . get ( source , error . sourceName , error . lineNumber , excerptFormatter ) ; StringBuilder b = new StringBuilder ( ) ; if ( error . sourceName != null ) { b . append ( error . sourceName ) ; if ( error . lineNumber > 0 ) { b . append ( ':' ) ; b . append ( error . lineNumber ) ; } b . append ( \": \" ) ; } b . append ( getLevelName ( warning ? CheckLevel . WARNING : CheckLevel . ERROR ) ) ; b . append ( \" - \" ) ; b . append ( error . description ) ; b . append ( '\\n' ) ; if ( sourceExcerpt != null ) { b . append ( sourceExcerpt ) ; b . append ( '\\n' ) ; int charno = error . getCharno ( ) ; if ( excerpt . equals ( LINE ) && 0 <= charno && charno <= sourceExcerpt . length ( ) ) { for ( int i = 0 ; i < charno ; i ++ ) { char c = sourceExcerpt . charAt ( i ) ; if ( Character . isWhitespace ( c ) ) { b . append ( c ) ; } else { b . append ( ' ' ) ; } } b . append ( \"^\\n\" ) ; } } return b . toString ( ) ; }",
            "patch_index": 147,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.856,
            "set_index": null,
            "start_line": 66,
            "tf_token_length": 310,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#String",
                "private#String#format",
                "String#format#(",
                "format#(#j",
                "(#j#s",
                "j#s#error",
                "s#error#error",
                "error#error#,",
                "error#,#boolean",
                ",#boolean#warning",
                "boolean#warning#)",
                "warning#)#{",
                ")#{#source",
                "{#source#excerpt",
                "source#excerpt#provider",
                "excerpt#provider#source",
                "provider#source#=",
                "source#=#get",
                "=#get#source",
                "get#source#(",
                "source#(#)",
                "(#)#;",
                ")#;#String",
                ";#String#source",
                "String#source#excerpt",
                "source#excerpt#=",
                "excerpt#=#source",
                "=#source#==",
                "source#==#null",
                "==#null#?",
                "null#?#null",
                "?#null#:",
                "null#:#excerpt",
                ":#excerpt#.",
                "excerpt#.#get",
                ".#get#(",
                "get#(#source",
                "(#source#,",
                "source#,#error",
                ",#error#.",
                "error#.#source",
                ".#source#name",
                "source#name#,",
                "name#,#error",
                ",#error#.",
                "error#.#line",
                ".#line#number",
                "line#number#,",
                "number#,#excerpt",
                ",#excerpt#formatter",
                "excerpt#formatter#)",
                "formatter#)#;",
                ")#;#string",
                ";#string#builder",
                "string#builder#b",
                "builder#b#=",
                "b#=#new",
                "=#new#string",
                "new#string#builder",
                "string#builder#(",
                "builder#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#error",
                "(#error#.",
                "error#.#source",
                ".#source#name",
                "source#name#!=",
                "name#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#b",
                "{#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#error",
                "(#error#.",
                "error#.#source",
                ".#source#name",
                "source#name#)",
                "name#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#error",
                "(#error#.",
                "error#.#line",
                ".#line#number",
                "line#number#>",
                "number#>#0",
                ">#0#)",
                "0#)#{",
                ")#{#b",
                "{#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#':'",
                "(#':'#)",
                "':'#)#;",
                ")#;#b",
                ";#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#error",
                "(#error#.",
                "error#.#line",
                ".#line#number",
                "line#number#)",
                "number#)#;",
                ")#;#}",
                ";#}#b",
                "}#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#\": \"",
                "(#\": \"#)",
                "\": \"#)#;",
                ")#;#}",
                ";#}#b",
                "}#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#level",
                "(#level#name",
                "level#name#(",
                "name#(#warning",
                "(#warning#?",
                "warning#?#check",
                "?#check#level",
                "check#level#.",
                "level#.#w",
                ".#w#a",
                "w#a#r",
                "a#r#n",
                "r#n#i",
                "n#i#n",
                "i#n#g",
                "n#g#:",
                "g#:#check",
                ":#check#level",
                "check#level#.",
                "level#.#e",
                ".#e#r",
                "e#r#r",
                "r#r#o",
                "r#o#r",
                "o#r#)",
                "r#)#)",
                ")#)#;",
                ")#;#b",
                ";#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#\" - \"",
                "(#\" - \"#)",
                "\" - \"#)#;",
                ")#;#b",
                ";#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#error",
                "(#error#.",
                "error#.#description",
                ".#description#)",
                "description#)#;",
                ")#;#b",
                ";#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#'\\n'",
                "(#'\\n'#)",
                "'\\n'#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#source",
                "(#source#excerpt",
                "source#excerpt#!=",
                "excerpt#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#b",
                "{#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#source",
                "(#source#excerpt",
                "source#excerpt#)",
                "excerpt#)#;",
                ")#;#b",
                ";#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#'\\n'",
                "(#'\\n'#)",
                "'\\n'#)#;",
                ")#;#int",
                ";#int#charno",
                "int#charno#=",
                "charno#=#error",
                "=#error#.",
                "error#.#get",
                ".#get#charno",
                "get#charno#(",
                "charno#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#excerpt",
                "(#excerpt#.",
                "excerpt#.#equals",
                ".#equals#(",
                "equals#(#l",
                "(#l#i",
                "l#i#n",
                "i#n#e",
                "n#e#)",
                "e#)#&&",
                ")#&&#0",
                "&&#0#<=",
                "0#<=#charno",
                "<=#charno#&&",
                "charno#&&#charno",
                "&&#charno#<=",
                "charno#<=#source",
                "<=#source#excerpt",
                "source#excerpt#.",
                "excerpt#.#length",
                ".#length#(",
                "length#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#for",
                "{#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#charno",
                "<#charno#;",
                "charno#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#char",
                "{#char#c",
                "char#c#=",
                "c#=#source",
                "=#source#excerpt",
                "source#excerpt#.",
                "excerpt#.#char",
                ".#char#at",
                "char#at#(",
                "at#(#i",
                "(#i#)",
                "i#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#Character",
                "(#Character#.",
                "Character#.#is",
                ".#is#whitespace",
                "is#whitespace#(",
                "whitespace#(#c",
                "(#c#)",
                "c#)#)",
                ")#)#{",
                ")#{#b",
                "{#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#c",
                "(#c#)",
                "c#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#b",
                "{#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#' '",
                "(#' '#)",
                "' '#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#b",
                "}#b#.",
                "b#.#append",
                ".#append#(",
                "append#(#\"^\\n\"",
                "(#\"^\\n\"#)",
                "\"^\\n\"#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#return",
                "}#return#b",
                "return#b#.",
                "b#.#to",
                ".#to#string",
                "to#string#(",
                "string#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#}"
            ]
        }
    }
}