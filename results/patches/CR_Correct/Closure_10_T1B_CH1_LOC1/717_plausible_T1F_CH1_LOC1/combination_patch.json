{
    "NodeUtil": {
        "0": {
            "action_judgements": null,
            "action_score": 0.75,
            "buggy_code": "static boolean mayBeString ( Node n , boolean recurse ) { if ( recurse ) {  return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ;  } else { return mayBeStringHelper ( n ) ; } }",
            "buggy_dir": "",
            "criteria_token_length": 61,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#static",
                "{#static#boolean",
                "static#boolean#be",
                "boolean#be#string",
                "be#string#(",
                "string#(#Node",
                "(#Node#n",
                "Node#n#,",
                "n#,#boolean",
                ",#boolean#recurse",
                "boolean#recurse#)",
                "recurse#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#recurse",
                "(#recurse#)",
                "recurse#)#{",
                ")#{#return",
                "{#return#results",
                "return#results#match",
                "results#match#(",
                "match#(#n",
                "(#n#,",
                "n#,#m",
                ",#m#a",
                "m#a#y",
                "a#y#b",
                "y#b#e",
                "b#e#s",
                "e#s#t",
                "s#t#r",
                "t#r#i",
                "r#i#n",
                "i#n#g",
                "n#g#p",
                "g#p#r",
                "p#r#e",
                "r#e#d",
                "e#d#i",
                "d#i#c",
                "i#c#a",
                "c#a#t",
                "a#t#e",
                "t#e#)",
                "e#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#return",
                "{#return#be",
                "return#be#string",
                "be#string#helper",
                "string#helper#(",
                "helper#(#n",
                "(#n#)",
                "n#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}"
            ],
            "diffs": {
                "2": {
                    "action": "CHANGE",
                    "buggy_end_line": 2,
                    "buggy_size": 1,
                    "buggy_start_line": 2,
                    "fixed_end_line": 2,
                    "fixed_size": 1,
                    "fixed_start_line": 2
                },
                "4": {
                    "action": "CHANGE",
                    "buggy_end_line": 4,
                    "buggy_size": 1,
                    "buggy_start_line": 4,
                    "fixed_end_line": 4,
                    "fixed_size": 1,
                    "fixed_start_line": 4
                }
            },
            "end_line": 1421,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Closure_10_src_com_google_javascript_jscomp_NodeUtil",
            "file_name": "NodeUtil",
            "module_dir": "src/com/google/javascript/jscomp",
            "module_id": "Closure_10",
            "module_name": "Closure",
            "module_num": "10",
            "multi_chunk_key": "Closure_10_src_com_google_javascript_jscomp_NodeUtil_method1_mayBeString_Node_boolean",
            "ngram_score": 0.9193548387096774,
            "patch": "public static boolean mayBeString ( Node n , boolean recurse ) { if ( recurse ) { return anyResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }",
            "patch_index": 625,
            "per_ins": 0,
            "per_other": 2,
            "score_total": 0.835,
            "set_index": null,
            "start_line": 1415,
            "tf_token_length": 62,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#static",
                "public#static#boolean",
                "static#boolean#be",
                "boolean#be#string",
                "be#string#(",
                "string#(#Node",
                "(#Node#n",
                "Node#n#,",
                "n#,#boolean",
                ",#boolean#recurse",
                "boolean#recurse#)",
                "recurse#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#recurse",
                "(#recurse#)",
                "recurse#)#{",
                ")#{#return",
                "{#return#results",
                "return#results#match",
                "results#match#(",
                "match#(#n",
                "(#n#,",
                "n#,#m",
                ",#m#a",
                "m#a#y",
                "a#y#b",
                "y#b#e",
                "b#e#s",
                "e#s#t",
                "s#t#r",
                "t#r#i",
                "r#i#n",
                "i#n#g",
                "n#g#p",
                "g#p#r",
                "p#r#e",
                "r#e#d",
                "e#d#i",
                "d#i#c",
                "i#c#a",
                "c#a#t",
                "a#t#e",
                "t#e#)",
                "e#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#return",
                "{#return#be",
                "return#be#string",
                "be#string#helper",
                "string#helper#(",
                "helper#(#n",
                "(#n#)",
                "n#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}"
            ]
        }
    }
}