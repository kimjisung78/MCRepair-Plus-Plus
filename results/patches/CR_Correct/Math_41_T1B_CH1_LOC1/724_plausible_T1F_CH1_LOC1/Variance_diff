--- "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Math_41/724/Variance_Origin.java"	2023-02-22 18:20:40.232194815 +0900
+++ "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Math_41/724/Variance.java"	2023-02-22 18:20:40.232194815 +0900
@@ -498,39 +498,7 @@
      * @throws IllegalArgumentException if the parameters are not valid
      * @since 2.1
      */
-    public double evaluate(final double[] values, final double[] weights,
-                           final double mean, final int begin, final int length) {
-
-        double var = Double.NaN;
-
-        if (test(values, weights, begin, length)) {
-            if (length == 1) {
-                var = 0.0;
-            } else if (length > 1) {
-                double accum = 0.0;
-                double dev = 0.0;
-                double accum2 = 0.0;
-                for (int i = begin; i < begin + length; i++) {
-                    dev = values[i] - mean;
-                    accum += weights[i] * (dev * dev);
-                    accum2 += weights[i] * dev;
-                }
-
-                double sumWts = 0;
-                for (int i = 0; i < weights.length; i++) {
-                    sumWts += weights[i];
-                }
-
-                if (isBiasCorrected) {
-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);
-                } else {
-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;
-                }
-            }
-        }
-        return var;
-    }
-
+public double evaluate ( final double [ ] values , final double [ ] weights , final double mean , final int begin , final int length ) { double var = Double . NaN ; if ( test ( values , weights , begin , length ) ) { if ( length == 1 ) { var = 0.0 ; } else if ( length > 1 ) { double accum = 0.0 ; double dev = 0.0 ; double accum2 = 0.0 ; for ( int i = begin ; i < begin + length ; i ++ ) { dev = values [ i ] - mean ; accum += weights [ i ] * ( dev * dev ) ; accum2 += weights [ i ] * dev ; } double sumWts = 0 ; for ( int i = begin ; i < begin + length ; i ++ ) { sumWts += weights [ i ] ; } if ( isBiasCorrected ) { var = ( accum - ( accum2 * accum2 / sumWts ) ) / ( sumWts - 1.0 ) ; } else { var = ( accum - ( accum2 * accum2 / sumWts ) ) / sumWts ; } } } return var ; }
     /**
      * <p>Returns the weighted variance of the values in the input array, using
      * the precomputed weighted mean value.</p>
