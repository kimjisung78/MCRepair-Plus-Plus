{
    "Variance": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "public double evaluate ( final double [ ] values , final double [ ] weights , final double mean , final int begin , final int length ) { double var = Double . NaN ; if ( test ( values , weights , begin , length ) ) { if ( length == 1 ) { var = 0.0 ; } else if ( length > 1 ) { double accum = 0.0 ; double dev = 0.0 ; double accum2 = 0.0 ; for ( int i = begin ; i < begin + length ; i ++ ) { dev = values [ i ] - mean ; accum += weights [ i ] * ( dev * dev ) ; accum2 += weights [ i ] * dev ; } double sumWts = 0 ;  for ( int i = 0 ; i < weights . length ; i ++ ) {  sumWts += weights [ i ] ; } if ( isBiasCorrected ) { var = ( accum - ( accum2 * accum2 / sumWts ) ) / ( sumWts - 1.0 ) ; } else { var = ( accum - ( accum2 * accum2 / sumWts ) ) / sumWts ; } } } return var ; }",
            "buggy_dir": "",
            "criteria_token_length": 226,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#double",
                "public#double#evaluate",
                "double#evaluate#(",
                "evaluate#(#final",
                "(#final#double",
                "final#double#[",
                "double#[#]",
                "[#]#values",
                "]#values#,",
                "values#,#final",
                ",#final#double",
                "final#double#[",
                "double#[#]",
                "[#]#weights",
                "]#weights#,",
                "weights#,#final",
                ",#final#double",
                "final#double#mean",
                "double#mean#,",
                "mean#,#final",
                ",#final#int",
                "final#int#begin",
                "int#begin#,",
                "begin#,#final",
                ",#final#int",
                "final#int#length",
                "int#length#)",
                "length#)#{",
                ")#{#double",
                "{#double#var",
                "double#var#=",
                "var#=#Double",
                "=#Double#.",
                "Double#.#na",
                ".#na#n",
                "na#n#;",
                "n#;#if",
                ";#if#(",
                "if#(#test",
                "(#test#(",
                "test#(#values",
                "(#values#,",
                "values#,#weights",
                ",#weights#,",
                "weights#,#begin",
                ",#begin#,",
                "begin#,#length",
                ",#length#)",
                "length#)#)",
                ")#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#length",
                "(#length#==",
                "length#==#1",
                "==#1#)",
                "1#)#{",
                ")#{#var",
                "{#var#=",
                "var#=#0.0",
                "=#0.0#;",
                "0.0#;#}",
                ";#}#else",
                "}#else#if",
                "else#if#(",
                "if#(#length",
                "(#length#>",
                "length#>#1",
                ">#1#)",
                "1#)#{",
                ")#{#double",
                "{#double#accum",
                "double#accum#=",
                "accum#=#0.0",
                "=#0.0#;",
                "0.0#;#double",
                ";#double#dev",
                "double#dev#=",
                "dev#=#0.0",
                "=#0.0#;",
                "0.0#;#double",
                ";#double#accum2",
                "double#accum2#=",
                "accum2#=#0.0",
                "=#0.0#;",
                "0.0#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#begin",
                "=#begin#;",
                "begin#;#i",
                ";#i#<",
                "i#<#begin",
                "<#begin#+",
                "begin#+#length",
                "+#length#;",
                "length#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#dev",
                "{#dev#=",
                "dev#=#values",
                "=#values#[",
                "values#[#i",
                "[#i#]",
                "i#]#-",
                "]#-#mean",
                "-#mean#;",
                "mean#;#accum",
                ";#accum#+=",
                "accum#+=#weights",
                "+=#weights#[",
                "weights#[#i",
                "[#i#]",
                "i#]#*",
                "]#*#(",
                "*#(#dev",
                "(#dev#*",
                "dev#*#dev",
                "*#dev#)",
                "dev#)#;",
                ")#;#accum2",
                ";#accum2#+=",
                "accum2#+=#weights",
                "+=#weights#[",
                "weights#[#i",
                "[#i#]",
                "i#]#*",
                "]#*#dev",
                "*#dev#;",
                "dev#;#}",
                ";#}#double",
                "}#double#sum",
                "double#sum#wts",
                "sum#wts#=",
                "wts#=#0",
                "=#0#;",
                "0#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#weights",
                "<#weights#.",
                "weights#.#length",
                ".#length#;",
                "length#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#sum",
                "{#sum#wts",
                "sum#wts#+=",
                "wts#+=#weights",
                "+=#weights#[",
                "weights#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#bias",
                "(#bias#corrected",
                "bias#corrected#)",
                "corrected#)#{",
                ")#{#var",
                "{#var#=",
                "var#=#(",
                "=#(#accum",
                "(#accum#-",
                "accum#-#(",
                "-#(#accum2",
                "(#accum2#*",
                "accum2#*#accum2",
                "*#accum2#/",
                "accum2#/#sum",
                "/#sum#wts",
                "sum#wts#)",
                "wts#)#)",
                ")#)#/",
                ")#/#(",
                "/#(#sum",
                "(#sum#wts",
                "sum#wts#-",
                "wts#-#1.0",
                "-#1.0#)",
                "1.0#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#var",
                "{#var#=",
                "var#=#(",
                "=#(#accum",
                "(#accum#-",
                "accum#-#(",
                "-#(#accum2",
                "(#accum2#*",
                "accum2#*#accum2",
                "*#accum2#/",
                "accum2#/#sum",
                "/#sum#wts",
                "sum#wts#)",
                "wts#)#)",
                ")#)#/",
                ")#/#sum",
                "/#sum#wts",
                "sum#wts#;",
                "wts#;#}",
                ";#}#}",
                "}#}#}",
                "}#}#return",
                "}#return#var",
                "return#var#;",
                "var#;#}",
                ";#}#}"
            ],
            "diffs": {
                "17": {
                    "action": "CHANGE",
                    "buggy_end_line": 17,
                    "buggy_size": 1,
                    "buggy_start_line": 17,
                    "fixed_end_line": 17,
                    "fixed_size": 1,
                    "fixed_start_line": 17
                }
            },
            "end_line": 532,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Math_41_src_main_java_org_apache_commons_math_stat_descriptive_moment_Variance",
            "file_name": "Variance",
            "module_dir": "src/main/java/org/apache/commons/math/stat/descriptive/moment",
            "module_id": "Math_41",
            "module_name": "Math",
            "module_num": "41",
            "multi_chunk_key": "Math_41_src_main_java_org_apache_commons_math_stat_descriptive_moment_Variance_method1_evaluate_double[]_double[]_double_int_int",
            "ngram_score": 0.7610619469026548,
            "patch": "public double evaluate ( final double [ ] values , final double [ ] weights , final double mean , final int begin , final int length ) { double var = Double . NaN ; if ( test ( values , weights , begin , length ) ) { if ( length == 1 ) { var = 0.0 ; } else if ( length > 1 ) { double accum = 0.0 ; double dev = 0.0 ; double accum2 = 0.0 ; for ( int i = begin ; i < begin + length ; i ++ ) { dev = values [ i ] - mean ; accum += weights [ i ] * ( dev * dev ) ; accum2 += weights [ i ] * dev ; } double sumWts = 0 ; for ( int i = begin ; i < begin + length ; i ++ ) { sumWts += weights [ i ] ; } if ( isBiasCorrected ) { var = ( accum - ( accum2 * accum2 / sumWts ) ) / ( sumWts - 1.0 ) ; } else { var = ( accum - ( accum2 * accum2 / sumWts ) ) / sumWts ; } } } return var ; }",
            "patch_index": 349,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.881,
            "set_index": null,
            "start_line": 501,
            "tf_token_length": 226,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#double",
                "public#double#evaluate",
                "double#evaluate#(",
                "evaluate#(#final",
                "(#final#double",
                "final#double#[",
                "double#[#]",
                "[#]#values",
                "]#values#,",
                "values#,#final",
                ",#final#double",
                "final#double#[",
                "double#[#]",
                "[#]#weights",
                "]#weights#,",
                "weights#,#final",
                ",#final#double",
                "final#double#mean",
                "double#mean#,",
                "mean#,#final",
                ",#final#int",
                "final#int#begin",
                "int#begin#,",
                "begin#,#final",
                ",#final#int",
                "final#int#length",
                "int#length#)",
                "length#)#{",
                ")#{#double",
                "{#double#var",
                "double#var#=",
                "var#=#Double",
                "=#Double#.",
                "Double#.#na",
                ".#na#n",
                "na#n#;",
                "n#;#if",
                ";#if#(",
                "if#(#test",
                "(#test#(",
                "test#(#values",
                "(#values#,",
                "values#,#weights",
                ",#weights#,",
                "weights#,#begin",
                ",#begin#,",
                "begin#,#length",
                ",#length#)",
                "length#)#)",
                ")#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#length",
                "(#length#==",
                "length#==#1",
                "==#1#)",
                "1#)#{",
                ")#{#var",
                "{#var#=",
                "var#=#0.0",
                "=#0.0#;",
                "0.0#;#}",
                ";#}#else",
                "}#else#if",
                "else#if#(",
                "if#(#length",
                "(#length#>",
                "length#>#1",
                ">#1#)",
                "1#)#{",
                ")#{#double",
                "{#double#accum",
                "double#accum#=",
                "accum#=#0.0",
                "=#0.0#;",
                "0.0#;#double",
                ";#double#dev",
                "double#dev#=",
                "dev#=#0.0",
                "=#0.0#;",
                "0.0#;#double",
                ";#double#accum2",
                "double#accum2#=",
                "accum2#=#0.0",
                "=#0.0#;",
                "0.0#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#begin",
                "=#begin#;",
                "begin#;#i",
                ";#i#<",
                "i#<#begin",
                "<#begin#+",
                "begin#+#length",
                "+#length#;",
                "length#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#dev",
                "{#dev#=",
                "dev#=#values",
                "=#values#[",
                "values#[#i",
                "[#i#]",
                "i#]#-",
                "]#-#mean",
                "-#mean#;",
                "mean#;#accum",
                ";#accum#+=",
                "accum#+=#weights",
                "+=#weights#[",
                "weights#[#i",
                "[#i#]",
                "i#]#*",
                "]#*#(",
                "*#(#dev",
                "(#dev#*",
                "dev#*#dev",
                "*#dev#)",
                "dev#)#;",
                ")#;#accum2",
                ";#accum2#+=",
                "accum2#+=#weights",
                "+=#weights#[",
                "weights#[#i",
                "[#i#]",
                "i#]#*",
                "]#*#dev",
                "*#dev#;",
                "dev#;#}",
                ";#}#double",
                "}#double#sum",
                "double#sum#wts",
                "sum#wts#=",
                "wts#=#0",
                "=#0#;",
                "0#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#begin",
                "=#begin#;",
                "begin#;#i",
                ";#i#<",
                "i#<#begin",
                "<#begin#+",
                "begin#+#length",
                "+#length#;",
                "length#;#i",
                ";#i#++",
                "i#++#)",
                "++#)#{",
                ")#{#sum",
                "{#sum#wts",
                "sum#wts#+=",
                "wts#+=#weights",
                "+=#weights#[",
                "weights#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#bias",
                "(#bias#corrected",
                "bias#corrected#)",
                "corrected#)#{",
                ")#{#var",
                "{#var#=",
                "var#=#(",
                "=#(#accum",
                "(#accum#-",
                "accum#-#(",
                "-#(#accum2",
                "(#accum2#*",
                "accum2#*#accum2",
                "*#accum2#/",
                "accum2#/#sum",
                "/#sum#wts",
                "sum#wts#)",
                "wts#)#)",
                ")#)#/",
                ")#/#(",
                "/#(#sum",
                "(#sum#wts",
                "sum#wts#-",
                "wts#-#1.0",
                "-#1.0#)",
                "1.0#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#var",
                "{#var#=",
                "var#=#(",
                "=#(#accum",
                "(#accum#-",
                "accum#-#(",
                "-#(#accum2",
                "(#accum2#*",
                "accum2#*#accum2",
                "*#accum2#/",
                "accum2#/#sum",
                "/#sum#wts",
                "sum#wts#)",
                "wts#)#)",
                ")#)#/",
                ")#/#sum",
                "/#sum#wts",
                "sum#wts#;",
                "wts#;#}",
                ";#}#}",
                "}#}#}",
                "}#}#return",
                "}#return#var",
                "return#var#;",
                "var#;#}",
                ";#}#}"
            ]
        }
    }
}