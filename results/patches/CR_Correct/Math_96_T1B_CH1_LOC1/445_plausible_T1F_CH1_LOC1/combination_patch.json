{
    "Complex": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "public boolean equals ( Object other ) { boolean ret ; if ( this == other ) { ret = true ; } else if ( other == null ) { ret = false ; } else { try { Complex rhs = ( Complex ) other ; if ( rhs . isNaN ( ) ) { ret = this . isNaN ( ) ; } else {  ret = ( Double . doubleToRawLongBits ( real ) == Double . doubleToRawLongBits ( rhs . getReal ( ) ) ) && ( Double . doubleToRawLongBits ( imaginary ) == Double . doubleToRawLongBits ( rhs . getImaginary ( ) ) ) ;  } } catch ( ClassCastException ex ) { ret = false ; } } return ret ; }",
            "buggy_dir": "",
            "criteria_token_length": 149,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#boolean",
                "public#boolean#equals",
                "boolean#equals#(",
                "equals#(#Object",
                "(#Object#other",
                "Object#other#)",
                "other#)#{",
                ")#{#boolean",
                "{#boolean#ret",
                "boolean#ret#;",
                "ret#;#if",
                ";#if#(",
                "if#(#this",
                "(#this#==",
                "this#==#other",
                "==#other#)",
                "other#)#{",
                ")#{#ret",
                "{#ret#=",
                "ret#=#true",
                "=#true#;",
                "true#;#}",
                ";#}#else",
                "}#else#if",
                "else#if#(",
                "if#(#other",
                "(#other#==",
                "other#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#ret",
                "{#ret#=",
                "ret#=#false",
                "=#false#;",
                "false#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#try",
                "{#try#{",
                "try#{#Complex",
                "{#Complex#rhs",
                "Complex#rhs#=",
                "rhs#=#(",
                "=#(#Complex",
                "(#Complex#)",
                "Complex#)#other",
                ")#other#;",
                "other#;#if",
                ";#if#(",
                "if#(#rhs",
                "(#rhs#.",
                "rhs#.#na",
                ".#na#n",
                "na#n#(",
                "n#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#ret",
                "{#ret#=",
                "ret#=#this",
                "=#this#.",
                "this#.#na",
                ".#na#n",
                "na#n#(",
                "n#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#ret",
                "{#ret#=",
                "ret#=#(",
                "=#(#Double",
                "(#Double#.",
                "Double#.#to",
                ".#to#raw",
                "to#raw#long",
                "raw#long#bits",
                "long#bits#(",
                "bits#(#real",
                "(#real#)",
                "real#)#==",
                ")#==#Double",
                "==#Double#.",
                "Double#.#to",
                ".#to#raw",
                "to#raw#long",
                "raw#long#bits",
                "long#bits#(",
                "bits#(#rhs",
                "(#rhs#.",
                "rhs#.#get",
                ".#get#real",
                "get#real#(",
                "real#(#)",
                "(#)#)",
                ")#)#)",
                ")#)#&&",
                ")#&&#(",
                "&&#(#Double",
                "(#Double#.",
                "Double#.#to",
                ".#to#raw",
                "to#raw#long",
                "raw#long#bits",
                "long#bits#(",
                "bits#(#imaginary",
                "(#imaginary#)",
                "imaginary#)#==",
                ")#==#Double",
                "==#Double#.",
                "Double#.#to",
                ".#to#raw",
                "to#raw#long",
                "raw#long#bits",
                "long#bits#(",
                "bits#(#rhs",
                "(#rhs#.",
                "rhs#.#get",
                ".#get#imaginary",
                "get#imaginary#(",
                "imaginary#(#)",
                "(#)#)",
                ")#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#catch",
                "}#catch#(",
                "catch#(#class",
                "(#class#cast",
                "class#cast#exception",
                "cast#exception#ex",
                "exception#ex#)",
                "ex#)#{",
                ")#{#ret",
                "{#ret#=",
                "ret#=#false",
                "=#false#;",
                "false#;#}",
                ";#}#}",
                "}#}#return",
                "}#return#ret",
                "return#ret#;",
                "ret#;#}",
                ";#}#}"
            ],
            "diffs": {
                "14": {
                    "action": "CHANGE",
                    "buggy_end_line": 14,
                    "buggy_size": 1,
                    "buggy_start_line": 14,
                    "fixed_end_line": 14,
                    "fixed_size": 1,
                    "fixed_start_line": 14
                }
            },
            "end_line": 267,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Math_96_src_java_org_apache_commons_math_complex_Complex",
            "file_name": "Complex",
            "module_dir": "src/java/org/apache/commons/math/complex",
            "module_id": "Math_96",
            "module_name": "Math",
            "module_num": "96",
            "multi_chunk_key": "Math_96_src_java_org_apache_commons_math_complex_Complex_method1_equals_Object",
            "ngram_score": 0.5704697986577181,
            "patch": "public boolean equals ( Object other ) { boolean ret ; if ( this == other ) { ret = true ; } else if ( other == null ) { ret = false ; } else { try { Complex rhs = ( Complex ) other ; if ( rhs . isNaN ( ) ) { ret = this . isNaN ( ) ; } else { ret = ( real == rhs . getReal ( ) ) && ( imaginary == rhs . getImaginary ( ) ) ; } } catch ( ClassCastException ex ) { ret = false ; } } return ret ; }",
            "patch_index": 589,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.785,
            "set_index": null,
            "start_line": 245,
            "tf_token_length": 117,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#boolean",
                "public#boolean#equals",
                "boolean#equals#(",
                "equals#(#Object",
                "(#Object#other",
                "Object#other#)",
                "other#)#{",
                ")#{#boolean",
                "{#boolean#ret",
                "boolean#ret#;",
                "ret#;#if",
                ";#if#(",
                "if#(#this",
                "(#this#==",
                "this#==#other",
                "==#other#)",
                "other#)#{",
                ")#{#ret",
                "{#ret#=",
                "ret#=#true",
                "=#true#;",
                "true#;#}",
                ";#}#else",
                "}#else#if",
                "else#if#(",
                "if#(#other",
                "(#other#==",
                "other#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#ret",
                "{#ret#=",
                "ret#=#false",
                "=#false#;",
                "false#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#try",
                "{#try#{",
                "try#{#Complex",
                "{#Complex#rhs",
                "Complex#rhs#=",
                "rhs#=#(",
                "=#(#Complex",
                "(#Complex#)",
                "Complex#)#other",
                ")#other#;",
                "other#;#if",
                ";#if#(",
                "if#(#rhs",
                "(#rhs#.",
                "rhs#.#na",
                ".#na#n",
                "na#n#(",
                "n#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#ret",
                "{#ret#=",
                "ret#=#this",
                "=#this#.",
                "this#.#na",
                ".#na#n",
                "na#n#(",
                "n#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#ret",
                "{#ret#=",
                "ret#=#(",
                "=#(#real",
                "(#real#==",
                "real#==#rhs",
                "==#rhs#.",
                "rhs#.#get",
                ".#get#real",
                "get#real#(",
                "real#(#)",
                "(#)#)",
                ")#)#&&",
                ")#&&#(",
                "&&#(#imaginary",
                "(#imaginary#==",
                "imaginary#==#rhs",
                "==#rhs#.",
                "rhs#.#get",
                ".#get#imaginary",
                "get#imaginary#(",
                "imaginary#(#)",
                "(#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#catch",
                "}#catch#(",
                "catch#(#class",
                "(#class#cast",
                "class#cast#exception",
                "cast#exception#ex",
                "exception#ex#)",
                "ex#)#{",
                ")#{#ret",
                "{#ret#=",
                "ret#=#false",
                "=#false#;",
                "false#;#}",
                ";#}#}",
                "}#}#return",
                "}#return#ret",
                "return#ret#;",
                "ret#;#}",
                ";#}#}"
            ]
        }
    }
}