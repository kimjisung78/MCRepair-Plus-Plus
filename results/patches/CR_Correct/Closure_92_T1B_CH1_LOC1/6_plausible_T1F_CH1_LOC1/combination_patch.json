{
    "ProcessClosurePrimitives": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "void replace ( ) { if ( firstNode == null ) { replacementNode = candidateDefinition ; return ; } if ( candidateDefinition != null && explicitNode != null ) { explicitNode . detachFromParent ( ) ; compiler . reportCodeChange ( ) ; replacementNode = candidateDefinition ; if ( NodeUtil . isExpressionNode ( candidateDefinition ) ) { candidateDefinition . putBooleanProp ( Node . IS_NAMESPACE , true ) ; Node assignNode = candidateDefinition . getFirstChild ( ) ; Node nameNode = assignNode . getFirstChild ( ) ; if ( nameNode . getType ( ) == Token . NAME ) { Node valueNode = nameNode . getNext ( ) ; assignNode . removeChild ( nameNode ) ; assignNode . removeChild ( valueNode ) ; nameNode . addChildToFront ( valueNode ) ; Node varNode = new Node ( Token . VAR , nameNode ) ; varNode . copyInformationFrom ( candidateDefinition ) ; candidateDefinition . getParent ( ) . replaceChild ( candidateDefinition , varNode ) ; nameNode . setJSDocInfo ( assignNode . getJSDocInfo ( ) ) ; compiler . reportCodeChange ( ) ; replacementNode = varNode ; } } } else { replacementNode = createDeclarationNode ( ) ; if ( firstModule == minimumModule ) { firstNode . getParent ( ) . addChildBefore ( replacementNode , firstNode ) ; } else {  int indexOfDot = namespace . indexOf ( '.' ) ;  if ( indexOfDot == - 1 ) { compiler . getNodeForCodeInsertion ( minimumModule ) . addChildToBack ( replacementNode ) ; } else { ProvidedName parentName = providedNames . get ( namespace . substring ( 0 , indexOfDot ) ) ; Preconditions . checkNotNull ( parentName ) ; Preconditions . checkNotNull ( parentName . replacementNode ) ; parentName . replacementNode . getParent ( ) . addChildAfter ( replacementNode , parentName . replacementNode ) ; } } if ( explicitNode != null ) { explicitNode . detachFromParent ( ) ; } compiler . reportCodeChange ( ) ; } }",
            "buggy_dir": "",
            "criteria_token_length": 437,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#void",
                "{#void#replace",
                "void#replace#(",
                "replace#(#)",
                "(#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#first",
                "(#first#node",
                "first#node#==",
                "node#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#replacement",
                "{#replacement#node",
                "replacement#node#=",
                "node#=#candidate",
                "=#candidate#definition",
                "candidate#definition#;",
                "definition#;#return",
                ";#return#;",
                "return#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#candidate",
                "(#candidate#definition",
                "candidate#definition#!=",
                "definition#!=#null",
                "!=#null#&&",
                "null#&&#explicit",
                "&&#explicit#node",
                "explicit#node#!=",
                "node#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#explicit",
                "{#explicit#node",
                "explicit#node#.",
                "node#.#from",
                ".#from#parent",
                "from#parent#(",
                "parent#(#)",
                "(#)#;",
                ")#;#compiler",
                ";#compiler#.",
                "compiler#.#code",
                ".#code#change",
                "code#change#(",
                "change#(#)",
                "(#)#;",
                ")#;#replacement",
                ";#replacement#node",
                "replacement#node#=",
                "node#=#candidate",
                "=#candidate#definition",
                "candidate#definition#;",
                "definition#;#if",
                ";#if#(",
                "if#(#node",
                "(#node#util",
                "node#util#.",
                "util#.#expression",
                ".#expression#node",
                "expression#node#(",
                "node#(#candidate",
                "(#candidate#definition",
                "candidate#definition#)",
                "definition#)#)",
                ")#)#{",
                ")#{#candidate",
                "{#candidate#definition",
                "candidate#definition#.",
                "definition#.#boolean",
                ".#boolean#prop",
                "boolean#prop#(",
                "prop#(#Node",
                "(#Node#.",
                "Node#.#i",
                ".#i#s",
                "i#s#n",
                "s#n#a",
                "n#a#m",
                "a#m#e",
                "m#e#s",
                "e#s#p",
                "s#p#a",
                "p#a#c",
                "a#c#e",
                "c#e#,",
                "e#,#true",
                ",#true#)",
                "true#)#;",
                ")#;#Node",
                ";#Node#assign",
                "Node#assign#node",
                "assign#node#=",
                "node#=#candidate",
                "=#candidate#definition",
                "candidate#definition#.",
                "definition#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#Node",
                ";#Node#name",
                "Node#name#node",
                "name#node#=",
                "node#=#assign",
                "=#assign#node",
                "assign#node#.",
                "node#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#name",
                "(#name#node",
                "name#node#.",
                "node#.#get",
                ".#get#type",
                "get#type#(",
                "type#(#)",
                "(#)#==",
                ")#==#Token",
                "==#Token#.",
                "Token#.#n",
                ".#n#a",
                "n#a#m",
                "a#m#e",
                "m#e#)",
                "e#)#{",
                ")#{#Node",
                "{#Node#value",
                "Node#value#node",
                "value#node#=",
                "node#=#name",
                "=#name#node",
                "name#node#.",
                "node#.#get",
                ".#get#next",
                "get#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#assign",
                ";#assign#node",
                "assign#node#.",
                "node#.#remove",
                ".#remove#child",
                "remove#child#(",
                "child#(#name",
                "(#name#node",
                "name#node#)",
                "node#)#;",
                ")#;#assign",
                ";#assign#node",
                "assign#node#.",
                "node#.#remove",
                ".#remove#child",
                "remove#child#(",
                "child#(#value",
                "(#value#node",
                "value#node#)",
                "node#)#;",
                ")#;#name",
                ";#name#node",
                "name#node#.",
                "node#.#child",
                ".#child#to",
                "child#to#front",
                "to#front#(",
                "front#(#value",
                "(#value#node",
                "value#node#)",
                "node#)#;",
                ")#;#Node",
                ";#Node#var",
                "Node#var#node",
                "var#node#=",
                "node#=#new",
                "=#new#Node",
                "new#Node#(",
                "Node#(#Token",
                "(#Token#.",
                "Token#.#v",
                ".#v#a",
                "v#a#r",
                "a#r#,",
                "r#,#name",
                ",#name#node",
                "name#node#)",
                "node#)#;",
                ")#;#var",
                ";#var#node",
                "var#node#.",
                "node#.#information",
                ".#information#from",
                "information#from#(",
                "from#(#candidate",
                "(#candidate#definition",
                "candidate#definition#)",
                "definition#)#;",
                ")#;#candidate",
                ";#candidate#definition",
                "candidate#definition#.",
                "definition#.#get",
                ".#get#parent",
                "get#parent#(",
                "parent#(#)",
                "(#)#.",
                ")#.#replace",
                ".#replace#child",
                "replace#child#(",
                "child#(#candidate",
                "(#candidate#definition",
                "candidate#definition#,",
                "definition#,#var",
                ",#var#node",
                "var#node#)",
                "node#)#;",
                ")#;#name",
                ";#name#node",
                "name#node#.",
                "node#.#j",
                ".#j#s",
                "j#s#doc",
                "s#doc#info",
                "doc#info#(",
                "info#(#assign",
                "(#assign#node",
                "assign#node#.",
                "node#.#j",
                ".#j#s",
                "j#s#doc",
                "s#doc#info",
                "doc#info#(",
                "info#(#)",
                "(#)#)",
                ")#)#;",
                ")#;#compiler",
                ";#compiler#.",
                "compiler#.#code",
                ".#code#change",
                "code#change#(",
                "change#(#)",
                "(#)#;",
                ")#;#replacement",
                ";#replacement#node",
                "replacement#node#=",
                "node#=#var",
                "=#var#node",
                "var#node#;",
                "node#;#}",
                ";#}#}",
                "}#}#}",
                "}#}#else",
                "}#else#{",
                "else#{#replacement",
                "{#replacement#node",
                "replacement#node#=",
                "node#=#declaration",
                "=#declaration#node",
                "declaration#node#(",
                "node#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#first",
                "(#first#module",
                "first#module#==",
                "module#==#minimum",
                "==#minimum#module",
                "minimum#module#)",
                "module#)#{",
                ")#{#first",
                "{#first#node",
                "first#node#.",
                "node#.#get",
                ".#get#parent",
                "get#parent#(",
                "parent#(#)",
                "(#)#.",
                ")#.#child",
                ".#child#before",
                "child#before#(",
                "before#(#replacement",
                "(#replacement#node",
                "replacement#node#,",
                "node#,#first",
                ",#first#node",
                "first#node#)",
                "node#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#int",
                "{#int#of",
                "int#of#dot",
                "of#dot#=",
                "dot#=#namespace",
                "=#namespace#.",
                "namespace#.#index",
                ".#index#of",
                "index#of#(",
                "of#(#'.'",
                "(#'.'#)",
                "'.'#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#of",
                "(#of#dot",
                "of#dot#==",
                "dot#==#-",
                "==#-#1",
                "-#1#)",
                "1#)#{",
                ")#{#compiler",
                "{#compiler#.",
                "compiler#.#node",
                ".#node#for",
                "node#for#code",
                "for#code#insertion",
                "code#insertion#(",
                "insertion#(#minimum",
                "(#minimum#module",
                "minimum#module#)",
                "module#)#.",
                ")#.#child",
                ".#child#to",
                "child#to#back",
                "to#back#(",
                "back#(#replacement",
                "(#replacement#node",
                "replacement#node#)",
                "node#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#provided",
                "{#provided#name",
                "provided#name#parent",
                "name#parent#name",
                "parent#name#=",
                "name#=#provided",
                "=#provided#names",
                "provided#names#.",
                "names#.#get",
                ".#get#(",
                "get#(#namespace",
                "(#namespace#.",
                "namespace#.#substring",
                ".#substring#(",
                "substring#(#0",
                "(#0#,",
                "0#,#of",
                ",#of#dot",
                "of#dot#)",
                "dot#)#)",
                ")#)#;",
                ")#;#Preconditions",
                ";#Preconditions#.",
                "Preconditions#.#not",
                ".#not#null",
                "not#null#(",
                "null#(#parent",
                "(#parent#name",
                "parent#name#)",
                "name#)#;",
                ")#;#Preconditions",
                ";#Preconditions#.",
                "Preconditions#.#not",
                ".#not#null",
                "not#null#(",
                "null#(#parent",
                "(#parent#name",
                "parent#name#.",
                "name#.#replacement",
                ".#replacement#node",
                "replacement#node#)",
                "node#)#;",
                ")#;#parent",
                ";#parent#name",
                "parent#name#.",
                "name#.#replacement",
                ".#replacement#node",
                "replacement#node#.",
                "node#.#get",
                ".#get#parent",
                "get#parent#(",
                "parent#(#)",
                "(#)#.",
                ")#.#child",
                ".#child#after",
                "child#after#(",
                "after#(#replacement",
                "(#replacement#node",
                "replacement#node#,",
                "node#,#parent",
                ",#parent#name",
                "parent#name#.",
                "name#.#replacement",
                ".#replacement#node",
                "replacement#node#)",
                "node#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#if",
                "}#if#(",
                "if#(#explicit",
                "(#explicit#node",
                "explicit#node#!=",
                "node#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#explicit",
                "{#explicit#node",
                "explicit#node#.",
                "node#.#from",
                ".#from#parent",
                "from#parent#(",
                "parent#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#compiler",
                "}#compiler#.",
                "compiler#.#code",
                ".#code#change",
                "code#change#(",
                "change#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}"
            ],
            "diffs": {
                "33": {
                    "action": "CHANGE",
                    "buggy_end_line": 33,
                    "buggy_size": 1,
                    "buggy_start_line": 33,
                    "fixed_end_line": 33,
                    "fixed_size": 1,
                    "fixed_start_line": 33
                }
            },
            "end_line": 809,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Closure_92_src_com_google_javascript_jscomp_ProcessClosurePrimitives",
            "file_name": "ProcessClosurePrimitives",
            "module_dir": "src/com/google/javascript/jscomp",
            "module_id": "Closure_92",
            "module_name": "Closure",
            "module_num": "92",
            "multi_chunk_key": "Closure_92_src_com_google_javascript_jscomp_ProcessClosurePrimitives_method2_replace",
            "ngram_score": 0.6887871853546911,
            "patch": "void replace ( ) { if ( firstNode == null ) { replacementNode = candidateDefinition ; return ; } if ( candidateDefinition != null && explicitNode != null ) { explicitNode . detachFromParent ( ) ; compiler . reportCodeChange ( ) ; replacementNode = candidateDefinition ; if ( NodeUtil . isExpressionNode ( candidateDefinition ) ) { candidateDefinition . putBooleanProp ( Node . IS_NAMESPACE , true ) ; Node assignNode = candidateDefinition . getFirstChild ( ) ; Node nameNode = assignNode . getFirstChild ( ) ; if ( nameNode . getType ( ) == Token . NAME ) { Node valueNode = nameNode . getNext ( ) ; assignNode . removeChild ( nameNode ) ; assignNode . removeChild ( valueNode ) ; nameNode . addChildToFront ( valueNode ) ; Node varNode = new Node ( Token . VAR , nameNode ) ; varNode . copyInformationFrom ( candidateDefinition ) ; candidateDefinition . getParent ( ) . replaceChild ( candidateDefinition , varNode ) ; nameNode . setJSDocInfo ( assignNode . getJSDocInfo ( ) ) ; compiler . reportCodeChange ( ) ; replacementNode = varNode ; } } } else { replacementNode = createDeclarationNode ( ) ; if ( firstModule == minimumModule ) { firstNode . getParent ( ) . addChildBefore ( replacementNode , firstNode ) ; } else { int indexOfDot = namespace . lastIndexOf ( '.' ) ; if ( indexOfDot == - 1 ) { compiler . getNodeForCodeInsertion ( minimumModule ) . addChildToBack ( replacementNode ) ; } else { ProvidedName parentName = providedNames . get ( namespace . substring ( 0 , indexOfDot ) ) ; Preconditions . checkNotNull ( parentName ) ; Preconditions . checkNotNull ( parentName . replacementNode ) ; parentName . replacementNode . getParent ( ) . addChildAfter ( replacementNode , parentName . replacementNode ) ; } } if ( explicitNode != null ) { explicitNode . detachFromParent ( ) ; } compiler . reportCodeChange ( ) ; } }",
            "patch_index": 335,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.844,
            "set_index": null,
            "start_line": 747,
            "tf_token_length": 437,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#void",
                "{#void#replace",
                "void#replace#(",
                "replace#(#)",
                "(#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#first",
                "(#first#node",
                "first#node#==",
                "node#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#replacement",
                "{#replacement#node",
                "replacement#node#=",
                "node#=#candidate",
                "=#candidate#definition",
                "candidate#definition#;",
                "definition#;#return",
                ";#return#;",
                "return#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#candidate",
                "(#candidate#definition",
                "candidate#definition#!=",
                "definition#!=#null",
                "!=#null#&&",
                "null#&&#explicit",
                "&&#explicit#node",
                "explicit#node#!=",
                "node#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#explicit",
                "{#explicit#node",
                "explicit#node#.",
                "node#.#from",
                ".#from#parent",
                "from#parent#(",
                "parent#(#)",
                "(#)#;",
                ")#;#compiler",
                ";#compiler#.",
                "compiler#.#code",
                ".#code#change",
                "code#change#(",
                "change#(#)",
                "(#)#;",
                ")#;#replacement",
                ";#replacement#node",
                "replacement#node#=",
                "node#=#candidate",
                "=#candidate#definition",
                "candidate#definition#;",
                "definition#;#if",
                ";#if#(",
                "if#(#node",
                "(#node#util",
                "node#util#.",
                "util#.#expression",
                ".#expression#node",
                "expression#node#(",
                "node#(#candidate",
                "(#candidate#definition",
                "candidate#definition#)",
                "definition#)#)",
                ")#)#{",
                ")#{#candidate",
                "{#candidate#definition",
                "candidate#definition#.",
                "definition#.#boolean",
                ".#boolean#prop",
                "boolean#prop#(",
                "prop#(#Node",
                "(#Node#.",
                "Node#.#i",
                ".#i#s",
                "i#s#n",
                "s#n#a",
                "n#a#m",
                "a#m#e",
                "m#e#s",
                "e#s#p",
                "s#p#a",
                "p#a#c",
                "a#c#e",
                "c#e#,",
                "e#,#true",
                ",#true#)",
                "true#)#;",
                ")#;#Node",
                ";#Node#assign",
                "Node#assign#node",
                "assign#node#=",
                "node#=#candidate",
                "=#candidate#definition",
                "candidate#definition#.",
                "definition#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#Node",
                ";#Node#name",
                "Node#name#node",
                "name#node#=",
                "node#=#assign",
                "=#assign#node",
                "assign#node#.",
                "node#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#name",
                "(#name#node",
                "name#node#.",
                "node#.#get",
                ".#get#type",
                "get#type#(",
                "type#(#)",
                "(#)#==",
                ")#==#Token",
                "==#Token#.",
                "Token#.#n",
                ".#n#a",
                "n#a#m",
                "a#m#e",
                "m#e#)",
                "e#)#{",
                ")#{#Node",
                "{#Node#value",
                "Node#value#node",
                "value#node#=",
                "node#=#name",
                "=#name#node",
                "name#node#.",
                "node#.#get",
                ".#get#next",
                "get#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#assign",
                ";#assign#node",
                "assign#node#.",
                "node#.#remove",
                ".#remove#child",
                "remove#child#(",
                "child#(#name",
                "(#name#node",
                "name#node#)",
                "node#)#;",
                ")#;#assign",
                ";#assign#node",
                "assign#node#.",
                "node#.#remove",
                ".#remove#child",
                "remove#child#(",
                "child#(#value",
                "(#value#node",
                "value#node#)",
                "node#)#;",
                ")#;#name",
                ";#name#node",
                "name#node#.",
                "node#.#child",
                ".#child#to",
                "child#to#front",
                "to#front#(",
                "front#(#value",
                "(#value#node",
                "value#node#)",
                "node#)#;",
                ")#;#Node",
                ";#Node#var",
                "Node#var#node",
                "var#node#=",
                "node#=#new",
                "=#new#Node",
                "new#Node#(",
                "Node#(#Token",
                "(#Token#.",
                "Token#.#v",
                ".#v#a",
                "v#a#r",
                "a#r#,",
                "r#,#name",
                ",#name#node",
                "name#node#)",
                "node#)#;",
                ")#;#var",
                ";#var#node",
                "var#node#.",
                "node#.#information",
                ".#information#from",
                "information#from#(",
                "from#(#candidate",
                "(#candidate#definition",
                "candidate#definition#)",
                "definition#)#;",
                ")#;#candidate",
                ";#candidate#definition",
                "candidate#definition#.",
                "definition#.#get",
                ".#get#parent",
                "get#parent#(",
                "parent#(#)",
                "(#)#.",
                ")#.#replace",
                ".#replace#child",
                "replace#child#(",
                "child#(#candidate",
                "(#candidate#definition",
                "candidate#definition#,",
                "definition#,#var",
                ",#var#node",
                "var#node#)",
                "node#)#;",
                ")#;#name",
                ";#name#node",
                "name#node#.",
                "node#.#j",
                ".#j#s",
                "j#s#doc",
                "s#doc#info",
                "doc#info#(",
                "info#(#assign",
                "(#assign#node",
                "assign#node#.",
                "node#.#j",
                ".#j#s",
                "j#s#doc",
                "s#doc#info",
                "doc#info#(",
                "info#(#)",
                "(#)#)",
                ")#)#;",
                ")#;#compiler",
                ";#compiler#.",
                "compiler#.#code",
                ".#code#change",
                "code#change#(",
                "change#(#)",
                "(#)#;",
                ")#;#replacement",
                ";#replacement#node",
                "replacement#node#=",
                "node#=#var",
                "=#var#node",
                "var#node#;",
                "node#;#}",
                ";#}#}",
                "}#}#}",
                "}#}#else",
                "}#else#{",
                "else#{#replacement",
                "{#replacement#node",
                "replacement#node#=",
                "node#=#declaration",
                "=#declaration#node",
                "declaration#node#(",
                "node#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#first",
                "(#first#module",
                "first#module#==",
                "module#==#minimum",
                "==#minimum#module",
                "minimum#module#)",
                "module#)#{",
                ")#{#first",
                "{#first#node",
                "first#node#.",
                "node#.#get",
                ".#get#parent",
                "get#parent#(",
                "parent#(#)",
                "(#)#.",
                ")#.#child",
                ".#child#before",
                "child#before#(",
                "before#(#replacement",
                "(#replacement#node",
                "replacement#node#,",
                "node#,#first",
                ",#first#node",
                "first#node#)",
                "node#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#int",
                "{#int#of",
                "int#of#dot",
                "of#dot#=",
                "dot#=#namespace",
                "=#namespace#.",
                "namespace#.#index",
                ".#index#of",
                "index#of#(",
                "of#(#'.'",
                "(#'.'#)",
                "'.'#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#of",
                "(#of#dot",
                "of#dot#==",
                "dot#==#-",
                "==#-#1",
                "-#1#)",
                "1#)#{",
                ")#{#compiler",
                "{#compiler#.",
                "compiler#.#node",
                ".#node#for",
                "node#for#code",
                "for#code#insertion",
                "code#insertion#(",
                "insertion#(#minimum",
                "(#minimum#module",
                "minimum#module#)",
                "module#)#.",
                ")#.#child",
                ".#child#to",
                "child#to#back",
                "to#back#(",
                "back#(#replacement",
                "(#replacement#node",
                "replacement#node#)",
                "node#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#provided",
                "{#provided#name",
                "provided#name#parent",
                "name#parent#name",
                "parent#name#=",
                "name#=#provided",
                "=#provided#names",
                "provided#names#.",
                "names#.#get",
                ".#get#(",
                "get#(#namespace",
                "(#namespace#.",
                "namespace#.#substring",
                ".#substring#(",
                "substring#(#0",
                "(#0#,",
                "0#,#of",
                ",#of#dot",
                "of#dot#)",
                "dot#)#)",
                ")#)#;",
                ")#;#Preconditions",
                ";#Preconditions#.",
                "Preconditions#.#not",
                ".#not#null",
                "not#null#(",
                "null#(#parent",
                "(#parent#name",
                "parent#name#)",
                "name#)#;",
                ")#;#Preconditions",
                ";#Preconditions#.",
                "Preconditions#.#not",
                ".#not#null",
                "not#null#(",
                "null#(#parent",
                "(#parent#name",
                "parent#name#.",
                "name#.#replacement",
                ".#replacement#node",
                "replacement#node#)",
                "node#)#;",
                ")#;#parent",
                ";#parent#name",
                "parent#name#.",
                "name#.#replacement",
                ".#replacement#node",
                "replacement#node#.",
                "node#.#get",
                ".#get#parent",
                "get#parent#(",
                "parent#(#)",
                "(#)#.",
                ")#.#child",
                ".#child#after",
                "child#after#(",
                "after#(#replacement",
                "(#replacement#node",
                "replacement#node#,",
                "node#,#parent",
                ",#parent#name",
                "parent#name#.",
                "name#.#replacement",
                ".#replacement#node",
                "replacement#node#)",
                "node#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#if",
                "}#if#(",
                "if#(#explicit",
                "(#explicit#node",
                "explicit#node#!=",
                "node#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#explicit",
                "{#explicit#node",
                "explicit#node#.",
                "node#.#from",
                ".#from#parent",
                "from#parent#(",
                "parent#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#compiler",
                "}#compiler#.",
                "compiler#.#code",
                ".#code#change",
                "code#change#(",
                "change#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}"
            ]
        }
    }
}