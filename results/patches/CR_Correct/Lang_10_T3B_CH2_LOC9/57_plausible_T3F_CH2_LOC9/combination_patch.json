{
    "FastDateParser": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "private static StringBuilder escapeRegex ( StringBuilder regex , String value , boolean unquote ) {  boolean wasWhite = false ;  for ( int i = 0 ; i < value . length ( ) ; ++ i ) { char c = value . charAt ( i ) ;  if ( Character . isWhitespace ( c ) ) {   if ( ! wasWhite ) {   wasWhite = true ;   regex . append ( \"\\\\s*\" ) ;   }   continue ;   }   wasWhite = false ;  switch ( c ) { case '\\'' : if ( unquote ) { if ( ++ i == value . length ( ) ) { return regex ; } c = value . charAt ( i ) ; } break ; case '?' : case '[' : case ']' : case '(' : case ')' : case '{' : case '}' : case '\\\\' : case '|' : case '*' : case '+' : case '^' : case '$' : case '.' : regex . append ( '\\\\' ) ; } regex . append ( c ) ; } return regex ; }",
            "buggy_dir": "",
            "criteria_token_length": 200,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#static",
                "private#static#string",
                "static#string#builder",
                "string#builder#escape",
                "builder#escape#regex",
                "escape#regex#(",
                "regex#(#string",
                "(#string#builder",
                "string#builder#regex",
                "builder#regex#,",
                "regex#,#String",
                ",#String#value",
                "String#value#,",
                "value#,#boolean",
                ",#boolean#unquote",
                "boolean#unquote#)",
                "unquote#)#{",
                ")#{#boolean",
                "{#boolean#was",
                "boolean#was#white",
                "was#white#=",
                "white#=#false",
                "=#false#;",
                "false#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#value",
                "<#value#.",
                "value#.#length",
                ".#length#(",
                "length#(#)",
                "(#)#;",
                ")#;#++",
                ";#++#i",
                "++#i#)",
                "i#)#{",
                ")#{#char",
                "{#char#c",
                "char#c#=",
                "c#=#value",
                "=#value#.",
                "value#.#char",
                ".#char#at",
                "char#at#(",
                "at#(#i",
                "(#i#)",
                "i#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#Character",
                "(#Character#.",
                "Character#.#is",
                ".#is#whitespace",
                "is#whitespace#(",
                "whitespace#(#c",
                "(#c#)",
                "c#)#)",
                ")#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#!",
                "(#!#was",
                "!#was#white",
                "was#white#)",
                "white#)#{",
                ")#{#was",
                "{#was#white",
                "was#white#=",
                "white#=#true",
                "=#true#;",
                "true#;#regex",
                ";#regex#.",
                "regex#.#append",
                ".#append#(",
                "append#(#\"\\\\s*\"",
                "(#\"\\\\s*\"#)",
                "\"\\\\s*\"#)#;",
                ")#;#}",
                ";#}#continue",
                "}#continue#;",
                "continue#;#}",
                ";#}#was",
                "}#was#white",
                "was#white#=",
                "white#=#false",
                "=#false#;",
                "false#;#switch",
                ";#switch#(",
                "switch#(#c",
                "(#c#)",
                "c#)#{",
                ")#{#case",
                "{#case#'\\''",
                "case#'\\''#:",
                "'\\''#:#if",
                ":#if#(",
                "if#(#unquote",
                "(#unquote#)",
                "unquote#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#++",
                "(#++#i",
                "++#i#==",
                "i#==#value",
                "==#value#.",
                "value#.#length",
                ".#length#(",
                "length#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#regex",
                "return#regex#;",
                "regex#;#}",
                ";#}#c",
                "}#c#=",
                "c#=#value",
                "=#value#.",
                "value#.#char",
                ".#char#at",
                "char#at#(",
                "at#(#i",
                "(#i#)",
                "i#)#;",
                ")#;#}",
                ";#}#break",
                "}#break#;",
                "break#;#case",
                ";#case#'?'",
                "case#'?'#:",
                "'?'#:#case",
                ":#case#'['",
                "case#'['#:",
                "'['#:#case",
                ":#case#']'",
                "case#']'#:",
                "']'#:#case",
                ":#case#'('",
                "case#'('#:",
                "'('#:#case",
                ":#case#')'",
                "case#')'#:",
                "')'#:#case",
                ":#case#'{'",
                "case#'{'#:",
                "'{'#:#case",
                ":#case#'}'",
                "case#'}'#:",
                "'}'#:#case",
                ":#case#'\\\\'",
                "case#'\\\\'#:",
                "'\\\\'#:#case",
                ":#case#'|'",
                "case#'|'#:",
                "'|'#:#case",
                ":#case#'*'",
                "case#'*'#:",
                "'*'#:#case",
                ":#case#'+'",
                "case#'+'#:",
                "'+'#:#case",
                ":#case#'^'",
                "case#'^'#:",
                "'^'#:#case",
                ":#case#'$'",
                "case#'$'#:",
                "'$'#:#case",
                ":#case#'.'",
                "case#'.'#:",
                "'.'#:#regex",
                ":#regex#.",
                "regex#.#append",
                ".#append#(",
                "append#(#'\\\\'",
                "(#'\\\\'#)",
                "'\\\\'#)#;",
                ")#;#}",
                ";#}#regex",
                "}#regex#.",
                "regex#.#append",
                ".#append#(",
                "append#(#c",
                "(#c#)",
                "c#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#regex",
                "return#regex#;",
                "regex#;#}",
                ";#}#}"
            ],
            "diffs": {
                "3": {
                    "action": "CHANGE",
                    "buggy_end_line": 3,
                    "buggy_size": 1,
                    "buggy_start_line": 3,
                    "fixed_end_line": 3,
                    "fixed_size": 1,
                    "fixed_start_line": 3
                },
                "6": {
                    "action": "DELETE",
                    "buggy_end_line": 13,
                    "buggy_size": 8,
                    "buggy_start_line": 6,
                    "fixed_end_line": 6,
                    "fixed_size": 0,
                    "fixed_start_line": 6
                }
            },
            "end_line": 343,
            "exp_ins": 0,
            "exp_other": 9,
            "file_ext": ".java",
            "file_key": "Lang_10_src_main_java_org_apache_commons_lang3_time_FastDateParser",
            "file_name": "FastDateParser",
            "module_dir": "src/main/java/org/apache/commons/lang3/time",
            "module_id": "Lang_10",
            "module_name": "Lang",
            "module_num": "10",
            "multi_chunk_key": "Lang_10_src_main_java_org_apache_commons_lang3_time_FastDateParser_method1_escapeRegex_StringBuilder_String_boolean",
            "ngram_score": 0.69,
            "patch": "private static StringBuilder escapeRegex ( StringBuilder regex , String value , boolean unquote ) { boolean white = false ; for ( int i = 0 ; i < value . length ( ) ; ++ i ) { char c = value . charAt ( i ) ; switch ( c ) { case '\\'' : if ( unquote ) { if ( ++ i == value . length ( ) ) { return regex ; } c = value . charAt ( i ) ; } break ; case '?' : case '[' : case ']' : case '(' : case ')' : case '{' : case '}' : case '\\\\' : case '|' : case '*' : case '+' : case '^' : case '$' : case '.' : regex . append ( '\\\\' ) ; } regex . append ( c ) ; } return regex ; }",
            "patch_index": 35,
            "per_ins": 0,
            "per_other": 9,
            "score_total": 0.845,
            "set_index": null,
            "start_line": 303,
            "tf_token_length": 160,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#static",
                "private#static#string",
                "static#string#builder",
                "string#builder#escape",
                "builder#escape#regex",
                "escape#regex#(",
                "regex#(#string",
                "(#string#builder",
                "string#builder#regex",
                "builder#regex#,",
                "regex#,#String",
                ",#String#value",
                "String#value#,",
                "value#,#boolean",
                ",#boolean#unquote",
                "boolean#unquote#)",
                "unquote#)#{",
                ")#{#boolean",
                "{#boolean#white",
                "boolean#white#=",
                "white#=#false",
                "=#false#;",
                "false#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#value",
                "<#value#.",
                "value#.#length",
                ".#length#(",
                "length#(#)",
                "(#)#;",
                ")#;#++",
                ";#++#i",
                "++#i#)",
                "i#)#{",
                ")#{#char",
                "{#char#c",
                "char#c#=",
                "c#=#value",
                "=#value#.",
                "value#.#char",
                ".#char#at",
                "char#at#(",
                "at#(#i",
                "(#i#)",
                "i#)#;",
                ")#;#switch",
                ";#switch#(",
                "switch#(#c",
                "(#c#)",
                "c#)#{",
                ")#{#case",
                "{#case#'\\''",
                "case#'\\''#:",
                "'\\''#:#if",
                ":#if#(",
                "if#(#unquote",
                "(#unquote#)",
                "unquote#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#++",
                "(#++#i",
                "++#i#==",
                "i#==#value",
                "==#value#.",
                "value#.#length",
                ".#length#(",
                "length#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#regex",
                "return#regex#;",
                "regex#;#}",
                ";#}#c",
                "}#c#=",
                "c#=#value",
                "=#value#.",
                "value#.#char",
                ".#char#at",
                "char#at#(",
                "at#(#i",
                "(#i#)",
                "i#)#;",
                ")#;#}",
                ";#}#break",
                "}#break#;",
                "break#;#case",
                ";#case#'?'",
                "case#'?'#:",
                "'?'#:#case",
                ":#case#'['",
                "case#'['#:",
                "'['#:#case",
                ":#case#']'",
                "case#']'#:",
                "']'#:#case",
                ":#case#'('",
                "case#'('#:",
                "'('#:#case",
                ":#case#')'",
                "case#')'#:",
                "')'#:#case",
                ":#case#'{'",
                "case#'{'#:",
                "'{'#:#case",
                ":#case#'}'",
                "case#'}'#:",
                "'}'#:#case",
                ":#case#'\\\\'",
                "case#'\\\\'#:",
                "'\\\\'#:#case",
                ":#case#'|'",
                "case#'|'#:",
                "'|'#:#case",
                ":#case#'*'",
                "case#'*'#:",
                "'*'#:#case",
                ":#case#'+'",
                "case#'+'#:",
                "'+'#:#case",
                ":#case#'^'",
                "case#'^'#:",
                "'^'#:#case",
                ":#case#'$'",
                "case#'$'#:",
                "'$'#:#case",
                ":#case#'.'",
                "case#'.'#:",
                "'.'#:#regex",
                ":#regex#.",
                "regex#.#append",
                ".#append#(",
                "append#(#'\\\\'",
                "(#'\\\\'#)",
                "'\\\\'#)#;",
                ")#;#}",
                ";#}#regex",
                "}#regex#.",
                "regex#.#append",
                ".#append#(",
                "append#(#c",
                "(#c#)",
                "c#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#regex",
                "return#regex#;",
                "regex#;#}",
                ";#}#}"
            ]
        }
    }
}