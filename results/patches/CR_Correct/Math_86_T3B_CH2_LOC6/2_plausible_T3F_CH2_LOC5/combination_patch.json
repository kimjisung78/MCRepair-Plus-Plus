{
    "CholeskyDecompositionImpl": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "public CholeskyDecompositionImpl ( final RealMatrix matrix , final double relativeSymmetryThreshold , final double absolutePositivityThreshold ) throws NonSquareMatrixException , NotSymmetricMatrixException , NotPositiveDefiniteMatrixException { if ( ! matrix . isSquare ( ) ) { throw new NonSquareMatrixException ( matrix . getRowDimension ( ) , matrix . getColumnDimension ( ) ) ; } final int order = matrix . getRowDimension ( ) ; lTData = matrix . getData ( ) ; cachedL = null ; cachedLT = null ; for ( int i = 0 ; i < order ; ++ i ) { final double [ ] lI = lTData [ i ] ;  if ( lTData [ i ] [ i ] < absolutePositivityThreshold ) {   throw new NotPositiveDefiniteMatrixException ( ) ;   }  for ( int j = i + 1 ; j < order ; ++ j ) { final double [ ] lJ = lTData [ j ] ; final double lIJ = lI [ j ] ; final double lJI = lJ [ i ] ; final double maxDelta = relativeSymmetryThreshold * Math . max ( Math . abs ( lIJ ) , Math . abs ( lJI ) ) ; if ( Math . abs ( lIJ - lJI ) > maxDelta ) { throw new NotSymmetricMatrixException ( ) ; } lJ [ i ] = 0 ; } } for ( int i = 0 ; i < order ; ++ i ) { final double [ ] ltI = lTData [ i ] ;  ltI [ i ] = Math . sqrt ( ltI [ i ] ) ;  final double inverse = 1.0 / ltI [ i ] ; for ( int q = order - 1 ; q > i ; -- q ) { ltI [ q ] *= inverse ; final double [ ] ltQ = lTData [ q ] ; for ( int p = q ; p < order ; ++ p ) { ltQ [ p ] -= ltI [ q ] * ltI [ p ] ; } } } }",
            "buggy_dir": "",
            "criteria_token_length": 409,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#cholesky",
                "public#cholesky#decomposition",
                "cholesky#decomposition#impl",
                "decomposition#impl#(",
                "impl#(#final",
                "(#final#real",
                "final#real#matrix",
                "real#matrix#matrix",
                "matrix#matrix#,",
                "matrix#,#final",
                ",#final#double",
                "final#double#symmetry",
                "double#symmetry#threshold",
                "symmetry#threshold#,",
                "threshold#,#final",
                ",#final#double",
                "final#double#positivity",
                "double#positivity#threshold",
                "positivity#threshold#)",
                "threshold#)#throws",
                ")#throws#non",
                "throws#non#square",
                "non#square#matrix",
                "square#matrix#exception",
                "matrix#exception#,",
                "exception#,#not",
                ",#not#symmetric",
                "not#symmetric#matrix",
                "symmetric#matrix#exception",
                "matrix#exception#,",
                "exception#,#not",
                ",#not#positive",
                "not#positive#definite",
                "positive#definite#matrix",
                "definite#matrix#exception",
                "matrix#exception#{",
                "exception#{#if",
                "{#if#(",
                "if#(#!",
                "(#!#matrix",
                "!#matrix#.",
                "matrix#.#is",
                ".#is#square",
                "is#square#(",
                "square#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#non",
                "new#non#square",
                "non#square#matrix",
                "square#matrix#exception",
                "matrix#exception#(",
                "exception#(#matrix",
                "(#matrix#.",
                "matrix#.#row",
                ".#row#dimension",
                "row#dimension#(",
                "dimension#(#)",
                "(#)#,",
                ")#,#matrix",
                ",#matrix#.",
                "matrix#.#column",
                ".#column#dimension",
                "column#dimension#(",
                "dimension#(#)",
                "(#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#final",
                "}#final#int",
                "final#int#order",
                "int#order#=",
                "order#=#matrix",
                "=#matrix#.",
                "matrix#.#row",
                ".#row#dimension",
                "row#dimension#(",
                "dimension#(#)",
                "(#)#;",
                ")#;#t",
                ";#t#data",
                "t#data#=",
                "data#=#matrix",
                "=#matrix#.",
                "matrix#.#get",
                ".#get#data",
                "get#data#(",
                "data#(#)",
                "(#)#;",
                ")#;#cached",
                ";#cached#l",
                "cached#l#=",
                "l#=#null",
                "=#null#;",
                "null#;#l",
                ";#l#t",
                "l#t#=",
                "t#=#null",
                "=#null#;",
                "null#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#order",
                "<#order#;",
                "order#;#++",
                ";#++#i",
                "++#i#)",
                "i#)#{",
                ")#{#final",
                "{#final#double",
                "final#double#[",
                "double#[#]",
                "[#]#l",
                "]#l#i",
                "l#i#=",
                "i#=#t",
                "=#t#data",
                "t#data#[",
                "data#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#if",
                ";#if#(",
                "if#(#t",
                "(#t#data",
                "t#data#[",
                "data#[#i",
                "[#i#]",
                "i#]#[",
                "]#[#i",
                "[#i#]",
                "i#]#<",
                "]#<#positivity",
                "<#positivity#threshold",
                "positivity#threshold#)",
                "threshold#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#not",
                "new#not#positive",
                "not#positive#definite",
                "positive#definite#matrix",
                "definite#matrix#exception",
                "matrix#exception#(",
                "exception#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#for",
                "}#for#(",
                "for#(#int",
                "(#int#j",
                "int#j#=",
                "j#=#i",
                "=#i#+",
                "i#+#1",
                "+#1#;",
                "1#;#j",
                ";#j#<",
                "j#<#order",
                "<#order#;",
                "order#;#++",
                ";#++#j",
                "++#j#)",
                "j#)#{",
                ")#{#final",
                "{#final#double",
                "final#double#[",
                "double#[#]",
                "[#]#l",
                "]#l#j",
                "l#j#=",
                "j#=#t",
                "=#t#data",
                "t#data#[",
                "data#[#j",
                "[#j#]",
                "j#]#;",
                "]#;#final",
                ";#final#double",
                "final#double#i",
                "double#i#j",
                "i#j#=",
                "j#=#l",
                "=#l#i",
                "l#i#[",
                "i#[#j",
                "[#j#]",
                "j#]#;",
                "]#;#final",
                ";#final#double",
                "final#double#j",
                "double#j#i",
                "j#i#=",
                "i#=#l",
                "=#l#j",
                "l#j#[",
                "j#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#final",
                ";#final#double",
                "final#double#max",
                "double#max#delta",
                "max#delta#=",
                "delta#=#symmetry",
                "=#symmetry#threshold",
                "symmetry#threshold#*",
                "threshold#*#Math",
                "*#Math#.",
                "Math#.#max",
                ".#max#(",
                "max#(#Math",
                "(#Math#.",
                "Math#.#abs",
                ".#abs#(",
                "abs#(#i",
                "(#i#j",
                "i#j#)",
                "j#)#,",
                ")#,#Math",
                ",#Math#.",
                "Math#.#abs",
                ".#abs#(",
                "abs#(#j",
                "(#j#i",
                "j#i#)",
                "i#)#)",
                ")#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#Math",
                "(#Math#.",
                "Math#.#abs",
                ".#abs#(",
                "abs#(#i",
                "(#i#j",
                "i#j#-",
                "j#-#j",
                "-#j#i",
                "j#i#)",
                "i#)#>",
                ")#>#max",
                ">#max#delta",
                "max#delta#)",
                "delta#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#not",
                "new#not#symmetric",
                "not#symmetric#matrix",
                "symmetric#matrix#exception",
                "matrix#exception#(",
                "exception#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#l",
                "}#l#j",
                "l#j#[",
                "j#[#i",
                "[#i#]",
                "i#]#=",
                "]#=#0",
                "=#0#;",
                "0#;#}",
                ";#}#}",
                "}#}#for",
                "}#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#order",
                "<#order#;",
                "order#;#++",
                ";#++#i",
                "++#i#)",
                "i#)#{",
                ")#{#final",
                "{#final#double",
                "final#double#[",
                "double#[#]",
                "[#]#lt",
                "]#lt#i",
                "lt#i#=",
                "i#=#t",
                "=#t#data",
                "t#data#[",
                "data#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#lt",
                ";#lt#i",
                "lt#i#[",
                "i#[#i",
                "[#i#]",
                "i#]#=",
                "]#=#Math",
                "=#Math#.",
                "Math#.#sqrt",
                ".#sqrt#(",
                "sqrt#(#lt",
                "(#lt#i",
                "lt#i#[",
                "i#[#i",
                "[#i#]",
                "i#]#)",
                "]#)#;",
                ")#;#final",
                ";#final#double",
                "final#double#inverse",
                "double#inverse#=",
                "inverse#=#1.0",
                "=#1.0#/",
                "1.0#/#lt",
                "/#lt#i",
                "lt#i#[",
                "i#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#q",
                "int#q#=",
                "q#=#order",
                "=#order#-",
                "order#-#1",
                "-#1#;",
                "1#;#q",
                ";#q#>",
                "q#>#i",
                ">#i#;",
                "i#;#--",
                ";#--#q",
                "--#q#)",
                "q#)#{",
                ")#{#lt",
                "{#lt#i",
                "lt#i#[",
                "i#[#q",
                "[#q#]",
                "q#]#*=",
                "]#*=#inverse",
                "*=#inverse#;",
                "inverse#;#final",
                ";#final#double",
                "final#double#[",
                "double#[#]",
                "[#]#lt",
                "]#lt#q",
                "lt#q#=",
                "q#=#t",
                "=#t#data",
                "t#data#[",
                "data#[#q",
                "[#q#]",
                "q#]#;",
                "]#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#p",
                "int#p#=",
                "p#=#q",
                "=#q#;",
                "q#;#p",
                ";#p#<",
                "p#<#order",
                "<#order#;",
                "order#;#++",
                ";#++#p",
                "++#p#)",
                "p#)#{",
                ")#{#lt",
                "{#lt#q",
                "lt#q#[",
                "q#[#p",
                "[#p#]",
                "p#]#-=",
                "]#-=#lt",
                "-=#lt#i",
                "lt#i#[",
                "i#[#q",
                "[#q#]",
                "q#]#*",
                "]#*#lt",
                "*#lt#i",
                "lt#i#[",
                "i#[#p",
                "[#p#]",
                "p#]#;",
                "]#;#}",
                ";#}#}",
                "}#}#}",
                "}#}#}",
                "}#}#}"
            ],
            "diffs": {
                "12": {
                    "action": "DELETE",
                    "buggy_end_line": 14,
                    "buggy_size": 3,
                    "buggy_start_line": 12,
                    "fixed_end_line": 12,
                    "fixed_size": 0,
                    "fixed_start_line": 12
                },
                "28": {
                    "action": "INSERT",
                    "buggy_end_line": 28,
                    "buggy_size": 0,
                    "buggy_start_line": 28,
                    "fixed_end_line": 26,
                    "fixed_size": 2,
                    "fixed_start_line": 25
                }
            },
            "end_line": 151,
            "exp_ins": 1,
            "exp_other": 3,
            "file_ext": ".java",
            "file_key": "Math_86_src_java_org_apache_commons_math_linear_CholeskyDecompositionImpl",
            "file_name": "CholeskyDecompositionImpl",
            "module_dir": "src/java/org/apache/commons/math/linear",
            "module_id": "Math_86",
            "module_name": "Math",
            "module_num": "86",
            "multi_chunk_key": "Math_86_src_java_org_apache_commons_math_linear_CholeskyDecompositionImpl_constructor1_CholeskyDecompositionImpl_RealMatrix_double_double",
            "ngram_score": 0.684596577017115,
            "patch": "public CholeskyDecompositionImpl ( final RealMatrix matrix , final double relativeSymmetryThreshold , final double absolutePositivityThreshold ) throws NonSquareMatrixException , NotSymmetricMatrixException , NotPositiveDefiniteMatrixException { if ( ! matrix . isSquare ( ) ) { throw new NonSquareMatrixException ( matrix . getRowDimension ( ) , matrix . getColumnDimension ( ) ) ; } final int order = matrix . getRowDimension ( ) ; lTData = matrix . getData ( ) ; cachedL = null ; cachedLT = null ; for ( int i = 0 ; i < order ; ++ i ) { final double [ ] lI = lTData [ i ] ; for ( int j = i + 1 ; j < order ; ++ j ) { final double [ ] lJ = lTData [ j ] ; final double lIJ = lI [ j ] ; final double lJI = lJ [ i ] ; final double maxDelta = relativeSymmetryThreshold * Math . max ( Math . abs ( lIJ ) , Math . abs ( lJI ) ) ; if ( Math . abs ( lIJ - lJI ) > maxDelta ) { throw new NotSymmetricMatrixException ( ) ; } lJ [ i ] = 0 ; } } for ( int i = 0 ; i < order ; ++ i ) { final double [ ] ltI = lTData [ i ] ; if ( lTData [ i ] [ i ] < absolutePositivityThreshold ) throw new NotPositiveDefiniteMatrixException ( ) ; ltI [ i ] = Math . sqrt ( ltI [ i ] ) ; final double inverse = 1.0 / ltI [ i ] ; for ( int q = order - 1 ; q > i ; -- q ) { ltI [ q ] *= inverse ; final double [ ] ltQ = lTData [ q ] ; for ( int p = q ; p < order ; ++ p ) { ltQ [ p ] -= ltI [ q ] * ltI [ p ] ; } } } }",
            "patch_index": 282,
            "per_ins": 1,
            "per_other": 3,
            "score_total": 0.842,
            "set_index": null,
            "start_line": 93,
            "tf_token_length": 407,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#cholesky",
                "public#cholesky#decomposition",
                "cholesky#decomposition#impl",
                "decomposition#impl#(",
                "impl#(#final",
                "(#final#real",
                "final#real#matrix",
                "real#matrix#matrix",
                "matrix#matrix#,",
                "matrix#,#final",
                ",#final#double",
                "final#double#symmetry",
                "double#symmetry#threshold",
                "symmetry#threshold#,",
                "threshold#,#final",
                ",#final#double",
                "final#double#positivity",
                "double#positivity#threshold",
                "positivity#threshold#)",
                "threshold#)#throws",
                ")#throws#non",
                "throws#non#square",
                "non#square#matrix",
                "square#matrix#exception",
                "matrix#exception#,",
                "exception#,#not",
                ",#not#symmetric",
                "not#symmetric#matrix",
                "symmetric#matrix#exception",
                "matrix#exception#,",
                "exception#,#not",
                ",#not#positive",
                "not#positive#definite",
                "positive#definite#matrix",
                "definite#matrix#exception",
                "matrix#exception#{",
                "exception#{#if",
                "{#if#(",
                "if#(#!",
                "(#!#matrix",
                "!#matrix#.",
                "matrix#.#is",
                ".#is#square",
                "is#square#(",
                "square#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#non",
                "new#non#square",
                "non#square#matrix",
                "square#matrix#exception",
                "matrix#exception#(",
                "exception#(#matrix",
                "(#matrix#.",
                "matrix#.#row",
                ".#row#dimension",
                "row#dimension#(",
                "dimension#(#)",
                "(#)#,",
                ")#,#matrix",
                ",#matrix#.",
                "matrix#.#column",
                ".#column#dimension",
                "column#dimension#(",
                "dimension#(#)",
                "(#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#final",
                "}#final#int",
                "final#int#order",
                "int#order#=",
                "order#=#matrix",
                "=#matrix#.",
                "matrix#.#row",
                ".#row#dimension",
                "row#dimension#(",
                "dimension#(#)",
                "(#)#;",
                ")#;#t",
                ";#t#data",
                "t#data#=",
                "data#=#matrix",
                "=#matrix#.",
                "matrix#.#get",
                ".#get#data",
                "get#data#(",
                "data#(#)",
                "(#)#;",
                ")#;#cached",
                ";#cached#l",
                "cached#l#=",
                "l#=#null",
                "=#null#;",
                "null#;#l",
                ";#l#t",
                "l#t#=",
                "t#=#null",
                "=#null#;",
                "null#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#order",
                "<#order#;",
                "order#;#++",
                ";#++#i",
                "++#i#)",
                "i#)#{",
                ")#{#final",
                "{#final#double",
                "final#double#[",
                "double#[#]",
                "[#]#l",
                "]#l#i",
                "l#i#=",
                "i#=#t",
                "=#t#data",
                "t#data#[",
                "data#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#j",
                "int#j#=",
                "j#=#i",
                "=#i#+",
                "i#+#1",
                "+#1#;",
                "1#;#j",
                ";#j#<",
                "j#<#order",
                "<#order#;",
                "order#;#++",
                ";#++#j",
                "++#j#)",
                "j#)#{",
                ")#{#final",
                "{#final#double",
                "final#double#[",
                "double#[#]",
                "[#]#l",
                "]#l#j",
                "l#j#=",
                "j#=#t",
                "=#t#data",
                "t#data#[",
                "data#[#j",
                "[#j#]",
                "j#]#;",
                "]#;#final",
                ";#final#double",
                "final#double#i",
                "double#i#j",
                "i#j#=",
                "j#=#l",
                "=#l#i",
                "l#i#[",
                "i#[#j",
                "[#j#]",
                "j#]#;",
                "]#;#final",
                ";#final#double",
                "final#double#j",
                "double#j#i",
                "j#i#=",
                "i#=#l",
                "=#l#j",
                "l#j#[",
                "j#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#final",
                ";#final#double",
                "final#double#max",
                "double#max#delta",
                "max#delta#=",
                "delta#=#symmetry",
                "=#symmetry#threshold",
                "symmetry#threshold#*",
                "threshold#*#Math",
                "*#Math#.",
                "Math#.#max",
                ".#max#(",
                "max#(#Math",
                "(#Math#.",
                "Math#.#abs",
                ".#abs#(",
                "abs#(#i",
                "(#i#j",
                "i#j#)",
                "j#)#,",
                ")#,#Math",
                ",#Math#.",
                "Math#.#abs",
                ".#abs#(",
                "abs#(#j",
                "(#j#i",
                "j#i#)",
                "i#)#)",
                ")#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#Math",
                "(#Math#.",
                "Math#.#abs",
                ".#abs#(",
                "abs#(#i",
                "(#i#j",
                "i#j#-",
                "j#-#j",
                "-#j#i",
                "j#i#)",
                "i#)#>",
                ")#>#max",
                ">#max#delta",
                "max#delta#)",
                "delta#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#not",
                "new#not#symmetric",
                "not#symmetric#matrix",
                "symmetric#matrix#exception",
                "matrix#exception#(",
                "exception#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#l",
                "}#l#j",
                "l#j#[",
                "j#[#i",
                "[#i#]",
                "i#]#=",
                "]#=#0",
                "=#0#;",
                "0#;#}",
                ";#}#}",
                "}#}#for",
                "}#for#(",
                "for#(#int",
                "(#int#i",
                "int#i#=",
                "i#=#0",
                "=#0#;",
                "0#;#i",
                ";#i#<",
                "i#<#order",
                "<#order#;",
                "order#;#++",
                ";#++#i",
                "++#i#)",
                "i#)#{",
                ")#{#final",
                "{#final#double",
                "final#double#[",
                "double#[#]",
                "[#]#lt",
                "]#lt#i",
                "lt#i#=",
                "i#=#t",
                "=#t#data",
                "t#data#[",
                "data#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#if",
                ";#if#(",
                "if#(#t",
                "(#t#data",
                "t#data#[",
                "data#[#i",
                "[#i#]",
                "i#]#[",
                "]#[#i",
                "[#i#]",
                "i#]#<",
                "]#<#positivity",
                "<#positivity#threshold",
                "positivity#threshold#)",
                "threshold#)#throw",
                ")#throw#new",
                "throw#new#not",
                "new#not#positive",
                "not#positive#definite",
                "positive#definite#matrix",
                "definite#matrix#exception",
                "matrix#exception#(",
                "exception#(#)",
                "(#)#;",
                ")#;#lt",
                ";#lt#i",
                "lt#i#[",
                "i#[#i",
                "[#i#]",
                "i#]#=",
                "]#=#Math",
                "=#Math#.",
                "Math#.#sqrt",
                ".#sqrt#(",
                "sqrt#(#lt",
                "(#lt#i",
                "lt#i#[",
                "i#[#i",
                "[#i#]",
                "i#]#)",
                "]#)#;",
                ")#;#final",
                ";#final#double",
                "final#double#inverse",
                "double#inverse#=",
                "inverse#=#1.0",
                "=#1.0#/",
                "1.0#/#lt",
                "/#lt#i",
                "lt#i#[",
                "i#[#i",
                "[#i#]",
                "i#]#;",
                "]#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#q",
                "int#q#=",
                "q#=#order",
                "=#order#-",
                "order#-#1",
                "-#1#;",
                "1#;#q",
                ";#q#>",
                "q#>#i",
                ">#i#;",
                "i#;#--",
                ";#--#q",
                "--#q#)",
                "q#)#{",
                ")#{#lt",
                "{#lt#i",
                "lt#i#[",
                "i#[#q",
                "[#q#]",
                "q#]#*=",
                "]#*=#inverse",
                "*=#inverse#;",
                "inverse#;#final",
                ";#final#double",
                "final#double#[",
                "double#[#]",
                "[#]#lt",
                "]#lt#q",
                "lt#q#=",
                "q#=#t",
                "=#t#data",
                "t#data#[",
                "data#[#q",
                "[#q#]",
                "q#]#;",
                "]#;#for",
                ";#for#(",
                "for#(#int",
                "(#int#p",
                "int#p#=",
                "p#=#q",
                "=#q#;",
                "q#;#p",
                ";#p#<",
                "p#<#order",
                "<#order#;",
                "order#;#++",
                ";#++#p",
                "++#p#)",
                "p#)#{",
                ")#{#lt",
                "{#lt#q",
                "lt#q#[",
                "q#[#p",
                "[#p#]",
                "p#]#-=",
                "]#-=#lt",
                "-=#lt#i",
                "lt#i#[",
                "i#[#q",
                "[#q#]",
                "q#]#*",
                "]#*#lt",
                "*#lt#i",
                "lt#i#[",
                "i#[#p",
                "[#p#]",
                "p#]#;",
                "]#;#}",
                ";#}#}",
                "}#}#}",
                "}#}#}",
                "}#}#}"
            ]
        }
    }
}