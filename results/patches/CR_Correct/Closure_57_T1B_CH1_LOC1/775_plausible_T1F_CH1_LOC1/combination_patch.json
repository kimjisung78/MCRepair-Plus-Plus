{
    "ClosureCodingConvention": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "private static String extractClassNameIfGoog ( Node node , Node parent , String functionName ) { String className = null ; if ( NodeUtil . isExprCall ( parent ) ) { Node callee = node . getFirstChild ( ) ; if ( callee != null && callee . getType ( ) == Token . GETPROP ) { String qualifiedName = callee . getQualifiedName ( ) ; if ( functionName . equals ( qualifiedName ) ) { Node target = callee . getNext ( ) ;  if ( target != null ) {  className = target . getString ( ) ; } } } } return className ; }",
            "buggy_dir": "",
            "criteria_token_length": 133,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#static",
                "private#static#String",
                "static#String#class",
                "String#class#name",
                "class#name#if",
                "name#if#goog",
                "if#goog#(",
                "goog#(#Node",
                "(#Node#node",
                "Node#node#,",
                "node#,#Node",
                ",#Node#parent",
                "Node#parent#,",
                "parent#,#String",
                ",#String#function",
                "String#function#name",
                "function#name#)",
                "name#)#{",
                ")#{#String",
                "{#String#class",
                "String#class#name",
                "class#name#=",
                "name#=#null",
                "=#null#;",
                "null#;#if",
                ";#if#(",
                "if#(#node",
                "(#node#util",
                "node#util#.",
                "util#.#expr",
                ".#expr#call",
                "expr#call#(",
                "call#(#parent",
                "(#parent#)",
                "parent#)#)",
                ")#)#{",
                ")#{#Node",
                "{#Node#callee",
                "Node#callee#=",
                "callee#=#node",
                "=#node#.",
                "node#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#callee",
                "(#callee#!=",
                "callee#!=#null",
                "!=#null#&&",
                "null#&&#callee",
                "&&#callee#.",
                "callee#.#get",
                ".#get#type",
                "get#type#(",
                "type#(#)",
                "(#)#==",
                ")#==#Token",
                "==#Token#.",
                "Token#.#g",
                ".#g#e",
                "g#e#t",
                "e#t#p",
                "t#p#r",
                "p#r#o",
                "r#o#p",
                "o#p#)",
                "p#)#{",
                ")#{#String",
                "{#String#qualified",
                "String#qualified#name",
                "qualified#name#=",
                "name#=#callee",
                "=#callee#.",
                "callee#.#qualified",
                ".#qualified#name",
                "qualified#name#(",
                "name#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#function",
                "(#function#name",
                "function#name#.",
                "name#.#equals",
                ".#equals#(",
                "equals#(#qualified",
                "(#qualified#name",
                "qualified#name#)",
                "name#)#)",
                ")#)#{",
                ")#{#Node",
                "{#Node#target",
                "Node#target#=",
                "target#=#callee",
                "=#callee#.",
                "callee#.#get",
                ".#get#next",
                "get#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#target",
                "(#target#!=",
                "target#!=#null",
                "!=#null#)",
                "null#)#{",
                ")#{#class",
                "{#class#name",
                "class#name#=",
                "name#=#target",
                "=#target#.",
                "target#.#get",
                ".#get#string",
                "get#string#(",
                "string#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}",
                "}#}#}",
                "}#}#return",
                "}#return#class",
                "return#class#name",
                "class#name#;",
                "name#;#}",
                ";#}#}"
            ],
            "diffs": {
                "10": {
                    "action": "CHANGE",
                    "buggy_end_line": 10,
                    "buggy_size": 1,
                    "buggy_start_line": 10,
                    "fixed_end_line": 10,
                    "fixed_size": 1,
                    "fixed_start_line": 10
                }
            },
            "end_line": 204,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Closure_57_src_com_google_javascript_jscomp_ClosureCodingConvention",
            "file_name": "ClosureCodingConvention",
            "module_dir": "src/com/google/javascript/jscomp",
            "module_id": "Closure_57",
            "module_name": "Closure",
            "module_num": "57",
            "multi_chunk_key": "Closure_57_src_com_google_javascript_jscomp_ClosureCodingConvention_method1_extractClassNameIfGoog_Node_Node_String",
            "ngram_score": 0.7651006711409396,
            "patch": "private static String extractClassNameIfGoog ( Node node , Node parent , String functionName ) { String className = null ; if ( NodeUtil . isExprCall ( parent ) ) { Node callee = node . getFirstChild ( ) ; if ( callee != null && callee . getType ( ) == Token . GETPROP ) { String qualifiedName = callee . getQualifiedName ( ) ; if ( functionName . equals ( qualifiedName ) ) { Node target = callee . getNext ( ) ; if ( target != null && target . getType ( ) == Token . STRING ) { className = target . getString ( ) ; } } } } return className ; }",
            "patch_index": 498,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.883,
            "set_index": null,
            "start_line": 188,
            "tf_token_length": 149,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#private",
                "{#private#static",
                "private#static#String",
                "static#String#class",
                "String#class#name",
                "class#name#if",
                "name#if#goog",
                "if#goog#(",
                "goog#(#Node",
                "(#Node#node",
                "Node#node#,",
                "node#,#Node",
                ",#Node#parent",
                "Node#parent#,",
                "parent#,#String",
                ",#String#function",
                "String#function#name",
                "function#name#)",
                "name#)#{",
                ")#{#String",
                "{#String#class",
                "String#class#name",
                "class#name#=",
                "name#=#null",
                "=#null#;",
                "null#;#if",
                ";#if#(",
                "if#(#node",
                "(#node#util",
                "node#util#.",
                "util#.#expr",
                ".#expr#call",
                "expr#call#(",
                "call#(#parent",
                "(#parent#)",
                "parent#)#)",
                ")#)#{",
                ")#{#Node",
                "{#Node#callee",
                "Node#callee#=",
                "callee#=#node",
                "=#node#.",
                "node#.#first",
                ".#first#child",
                "first#child#(",
                "child#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#callee",
                "(#callee#!=",
                "callee#!=#null",
                "!=#null#&&",
                "null#&&#callee",
                "&&#callee#.",
                "callee#.#get",
                ".#get#type",
                "get#type#(",
                "type#(#)",
                "(#)#==",
                ")#==#Token",
                "==#Token#.",
                "Token#.#g",
                ".#g#e",
                "g#e#t",
                "e#t#p",
                "t#p#r",
                "p#r#o",
                "r#o#p",
                "o#p#)",
                "p#)#{",
                ")#{#String",
                "{#String#qualified",
                "String#qualified#name",
                "qualified#name#=",
                "name#=#callee",
                "=#callee#.",
                "callee#.#qualified",
                ".#qualified#name",
                "qualified#name#(",
                "name#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#function",
                "(#function#name",
                "function#name#.",
                "name#.#equals",
                ".#equals#(",
                "equals#(#qualified",
                "(#qualified#name",
                "qualified#name#)",
                "name#)#)",
                ")#)#{",
                ")#{#Node",
                "{#Node#target",
                "Node#target#=",
                "target#=#callee",
                "=#callee#.",
                "callee#.#get",
                ".#get#next",
                "get#next#(",
                "next#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#target",
                "(#target#!=",
                "target#!=#null",
                "!=#null#&&",
                "null#&&#target",
                "&&#target#.",
                "target#.#get",
                ".#get#type",
                "get#type#(",
                "type#(#)",
                "(#)#==",
                ")#==#Token",
                "==#Token#.",
                "Token#.#s",
                ".#s#t",
                "s#t#r",
                "t#r#i",
                "r#i#n",
                "i#n#g",
                "n#g#)",
                "g#)#{",
                ")#{#class",
                "{#class#name",
                "class#name#=",
                "name#=#target",
                "=#target#.",
                "target#.#get",
                ".#get#string",
                "get#string#(",
                "string#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}",
                "}#}#}",
                "}#}#return",
                "}#return#class",
                "return#class#name",
                "class#name#;",
                "name#;#}",
                ";#}#}"
            ]
        }
    }
}