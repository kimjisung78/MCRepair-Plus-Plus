{
    "CommandLineRunner": {
        "0": {
            "action_judgements": null,
            "action_score": 0.5,
            "buggy_code": "@ Override protected CompilerOptions createOptions ( ) { CompilerOptions options = new CompilerOptions ( ) ; if ( flags . processJqueryPrimitives ) { options . setCodingConvention ( new JqueryCodingConvention ( ) ) ; } else { options . setCodingConvention ( new ClosureCodingConvention ( ) ) ; } options . setExtraAnnotationNames ( flags . extraAnnotationName ) ; CompilationLevel level = flags . compilationLevel ; level . setOptionsForCompilationLevel ( options ) ; if ( flags . debug ) { level . setDebugOptionsForCompilationLevel ( options ) ; } if ( flags . useTypesForOptimization ) { level . setTypeBasedOptimizationOptions ( options ) ; } if ( flags . generateExports ) { options . setGenerateExports ( flags . generateExports ) ; } WarningLevel wLevel = flags . warningLevel ; wLevel . setOptionsForWarningLevel ( options ) ; for ( FormattingOption formattingOption : flags . formatting ) { formattingOption . applyToOptions ( options ) ; } options . closurePass = flags . processClosurePrimitives ; options . jqueryPass = CompilationLevel . ADVANCED_OPTIMIZATIONS == level && flags . processJqueryPrimitives ; options . angularPass = flags . angularPass ; if ( ! flags . translationsFile . isEmpty ( ) ) { try { options . messageBundle = new XtbMessageBundle ( new FileInputStream ( flags . translationsFile ) , flags . translationsProject ) ; } catch ( IOException e ) { throw new RuntimeException ( \"Reading XTB file\" , e ) ; } } else if ( CompilationLevel . ADVANCED_OPTIMIZATIONS == level ) { options . messageBundle = new EmptyMessageBundle ( ) ;  }  return options ; }",
            "buggy_dir": "",
            "criteria_token_length": 366,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#@",
                "{#@#Override",
                "@#Override#protected",
                "Override#protected#compiler",
                "protected#compiler#options",
                "compiler#options#create",
                "options#create#options",
                "create#options#(",
                "options#(#)",
                "(#)#{",
                ")#{#compiler",
                "{#compiler#options",
                "compiler#options#options",
                "options#options#=",
                "options#=#new",
                "=#new#compiler",
                "new#compiler#options",
                "compiler#options#(",
                "options#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#flags",
                "(#flags#.",
                "flags#.#jquery",
                ".#jquery#primitives",
                "jquery#primitives#)",
                "primitives#)#{",
                ")#{#options",
                "{#options#.",
                "options#.#coding",
                ".#coding#convention",
                "coding#convention#(",
                "convention#(#new",
                "(#new#jquery",
                "new#jquery#coding",
                "jquery#coding#convention",
                "coding#convention#(",
                "convention#(#)",
                "(#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#options",
                "{#options#.",
                "options#.#coding",
                ".#coding#convention",
                "coding#convention#(",
                "convention#(#new",
                "(#new#closure",
                "new#closure#coding",
                "closure#coding#convention",
                "coding#convention#(",
                "convention#(#)",
                "(#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#options",
                "}#options#.",
                "options#.#extra",
                ".#extra#annotation",
                "extra#annotation#names",
                "annotation#names#(",
                "names#(#flags",
                "(#flags#.",
                "flags#.#annotation",
                ".#annotation#name",
                "annotation#name#)",
                "name#)#;",
                ")#;#compilation",
                ";#compilation#level",
                "compilation#level#level",
                "level#level#=",
                "level#=#flags",
                "=#flags#.",
                "flags#.#compilation",
                ".#compilation#level",
                "compilation#level#;",
                "level#;#level",
                ";#level#.",
                "level#.#options",
                ".#options#for",
                "options#for#compilation",
                "for#compilation#level",
                "compilation#level#(",
                "level#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#flags",
                "(#flags#.",
                "flags#.#debug",
                ".#debug#)",
                "debug#)#{",
                ")#{#level",
                "{#level#.",
                "level#.#debug",
                ".#debug#options",
                "debug#options#for",
                "options#for#compilation",
                "for#compilation#level",
                "compilation#level#(",
                "level#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#flags",
                "(#flags#.",
                "flags#.#types",
                ".#types#for",
                "types#for#optimization",
                "for#optimization#)",
                "optimization#)#{",
                ")#{#level",
                "{#level#.",
                "level#.#type",
                ".#type#based",
                "type#based#optimization",
                "based#optimization#options",
                "optimization#options#(",
                "options#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#flags",
                "(#flags#.",
                "flags#.#generate",
                ".#generate#exports",
                "generate#exports#)",
                "exports#)#{",
                ")#{#options",
                "{#options#.",
                "options#.#generate",
                ".#generate#exports",
                "generate#exports#(",
                "exports#(#flags",
                "(#flags#.",
                "flags#.#generate",
                ".#generate#exports",
                "generate#exports#)",
                "exports#)#;",
                ")#;#}",
                ";#}#warning",
                "}#warning#level",
                "warning#level#w",
                "level#w#level",
                "w#level#=",
                "level#=#flags",
                "=#flags#.",
                "flags#.#warning",
                ".#warning#level",
                "warning#level#;",
                "level#;#w",
                ";#w#level",
                "w#level#.",
                "level#.#options",
                ".#options#for",
                "options#for#warning",
                "for#warning#level",
                "warning#level#(",
                "level#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#for",
                ";#for#(",
                "for#(#formatting",
                "(#formatting#option",
                "formatting#option#formatting",
                "option#formatting#option",
                "formatting#option#:",
                "option#:#flags",
                ":#flags#.",
                "flags#.#formatting",
                ".#formatting#)",
                "formatting#)#{",
                ")#{#formatting",
                "{#formatting#option",
                "formatting#option#.",
                "option#.#to",
                ".#to#options",
                "to#options#(",
                "options#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#}",
                ";#}#options",
                "}#options#.",
                "options#.#closure",
                ".#closure#pass",
                "closure#pass#=",
                "pass#=#flags",
                "=#flags#.",
                "flags#.#closure",
                ".#closure#primitives",
                "closure#primitives#;",
                "primitives#;#options",
                ";#options#.",
                "options#.#jquery",
                ".#jquery#pass",
                "jquery#pass#=",
                "pass#=#compilation",
                "=#compilation#level",
                "compilation#level#.",
                "level#.#a",
                ".#a#d",
                "a#d#v",
                "d#v#a",
                "v#a#n",
                "a#n#c",
                "n#c#e",
                "c#e#d",
                "e#d#o",
                "d#o#p",
                "o#p#t",
                "p#t#i",
                "t#i#m",
                "i#m#i",
                "m#i#z",
                "i#z#a",
                "z#a#t",
                "a#t#i",
                "t#i#o",
                "i#o#n",
                "o#n#s",
                "n#s#==",
                "s#==#level",
                "==#level#&&",
                "level#&&#flags",
                "&&#flags#.",
                "flags#.#jquery",
                ".#jquery#primitives",
                "jquery#primitives#;",
                "primitives#;#options",
                ";#options#.",
                "options#.#angular",
                ".#angular#pass",
                "angular#pass#=",
                "pass#=#flags",
                "=#flags#.",
                "flags#.#angular",
                ".#angular#pass",
                "angular#pass#;",
                "pass#;#if",
                ";#if#(",
                "if#(#!",
                "(#!#flags",
                "!#flags#.",
                "flags#.#translations",
                ".#translations#file",
                "translations#file#.",
                "file#.#is",
                ".#is#empty",
                "is#empty#(",
                "empty#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#try",
                "{#try#{",
                "try#{#options",
                "{#options#.",
                "options#.#message",
                ".#message#bundle",
                "message#bundle#=",
                "bundle#=#new",
                "=#new#xtb",
                "new#xtb#message",
                "xtb#message#bundle",
                "message#bundle#(",
                "bundle#(#new",
                "(#new#file",
                "new#file#input",
                "file#input#stream",
                "input#stream#(",
                "stream#(#flags",
                "(#flags#.",
                "flags#.#translations",
                ".#translations#file",
                "translations#file#)",
                "file#)#,",
                ")#,#flags",
                ",#flags#.",
                "flags#.#translations",
                ".#translations#project",
                "translations#project#)",
                "project#)#;",
                ")#;#}",
                ";#}#catch",
                "}#catch#(",
                "catch#(#i",
                "(#i#o",
                "i#o#exception",
                "o#exception#e",
                "exception#e#)",
                "e#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#runtime",
                "new#runtime#exception",
                "runtime#exception#(",
                "exception#(#reading ",
                "(#reading #x",
                "reading #x#t",
                "x#t#b file\"",
                "t#b file\"#,",
                "b file\"#,#e",
                ",#e#)",
                "e#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#else",
                "}#else#if",
                "else#if#(",
                "if#(#compilation",
                "(#compilation#level",
                "compilation#level#.",
                "level#.#a",
                ".#a#d",
                "a#d#v",
                "d#v#a",
                "v#a#n",
                "a#n#c",
                "n#c#e",
                "c#e#d",
                "e#d#o",
                "d#o#p",
                "o#p#t",
                "p#t#i",
                "t#i#m",
                "i#m#i",
                "m#i#z",
                "i#z#a",
                "z#a#t",
                "a#t#i",
                "t#i#o",
                "i#o#n",
                "o#n#s",
                "n#s#==",
                "s#==#level",
                "==#level#)",
                "level#)#{",
                ")#{#options",
                "{#options#.",
                "options#.#message",
                ".#message#bundle",
                "message#bundle#=",
                "bundle#=#new",
                "=#new#empty",
                "new#empty#message",
                "empty#message#bundle",
                "message#bundle#(",
                "bundle#(#)",
                "(#)#;",
                ")#;#}",
                ";#}#return",
                "}#return#options",
                "return#options#;",
                "options#;#}",
                ";#}#}"
            ],
            "diffs": {
                "36": {
                    "action": "DELETE",
                    "buggy_end_line": 37,
                    "buggy_size": 2,
                    "buggy_start_line": 36,
                    "fixed_end_line": 36,
                    "fixed_size": 0,
                    "fixed_start_line": 36
                }
            },
            "end_line": 865,
            "exp_ins": 1,
            "exp_other": 0,
            "file_ext": ".java",
            "file_key": "Closure_107_src_com_google_javascript_jscomp_CommandLineRunner",
            "file_name": "CommandLineRunner",
            "module_dir": "src/com/google/javascript/jscomp",
            "module_id": "Closure_107",
            "module_name": "Closure",
            "module_num": "107",
            "multi_chunk_key": "Closure_107_src_com_google_javascript_jscomp_CommandLineRunner_method1_createOptions",
            "ngram_score": 0.674863387978142,
            "patch": "@ Override protected CompilerOptions createOptions ( ) { CompilerOptions options = new CompilerOptions ( ) ; if ( flags . processJqueryPrimitives ) { options . setCodingConvention ( new JqueryCodingConvention ( ) ) ; } else { options . setCodingConvention ( new ClosureCodingConvention ( ) ) ; } options . setExtraAnnotationNames ( flags . extraAnnotationName ) ; CompilationLevel level = flags . compilationLevel ; level . setOptionsForCompilationLevel ( options ) ; if ( flags . debug ) { level . setDebugOptionsForCompilationLevel ( options ) ; } if ( flags . useTypesForOptimization ) { level . setTypeBasedOptimizationOptions ( options ) ; } if ( flags . generateExports ) { options . setGenerateExports ( flags . generateExports ) ; } WarningLevel wLevel = flags . warningLevel ; wLevel . setOptionsForWarningLevel ( options ) ; for ( FormattingOption formattingOption : flags . formatting ) { formattingOption . applyToOptions ( options ) ; } options . closurePass = flags . processClosurePrimitives ; options . jqueryPass = CompilationLevel . ADVANCED_OPTIMIZATIONS == level && flags . processJqueryPrimitives ; options . angularPass = flags . angularPass ; if ( ! flags . translationsFile . isEmpty ( ) ) { try { options . messageBundle = new XtbMessageBundle ( new FileInputStream ( flags . translationsFile ) , flags . translationsProject ) ; } catch ( IOException e ) { throw new RuntimeException ( \"Reading XTB file\" , e ) ; } } return options ; }",
            "patch_index": 531,
            "per_ins": 0,
            "per_other": 2,
            "score_total": 0.587,
            "set_index": null,
            "start_line": 805,
            "tf_token_length": 322,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#@",
                "{#@#Override",
                "@#Override#protected",
                "Override#protected#compiler",
                "protected#compiler#options",
                "compiler#options#create",
                "options#create#options",
                "create#options#(",
                "options#(#)",
                "(#)#{",
                ")#{#compiler",
                "{#compiler#options",
                "compiler#options#options",
                "options#options#=",
                "options#=#new",
                "=#new#compiler",
                "new#compiler#options",
                "compiler#options#(",
                "options#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#flags",
                "(#flags#.",
                "flags#.#jquery",
                ".#jquery#primitives",
                "jquery#primitives#)",
                "primitives#)#{",
                ")#{#options",
                "{#options#.",
                "options#.#coding",
                ".#coding#convention",
                "coding#convention#(",
                "convention#(#new",
                "(#new#jquery",
                "new#jquery#coding",
                "jquery#coding#convention",
                "coding#convention#(",
                "convention#(#)",
                "(#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#options",
                "{#options#.",
                "options#.#coding",
                ".#coding#convention",
                "coding#convention#(",
                "convention#(#new",
                "(#new#closure",
                "new#closure#coding",
                "closure#coding#convention",
                "coding#convention#(",
                "convention#(#)",
                "(#)#)",
                ")#)#;",
                ")#;#}",
                ";#}#options",
                "}#options#.",
                "options#.#extra",
                ".#extra#annotation",
                "extra#annotation#names",
                "annotation#names#(",
                "names#(#flags",
                "(#flags#.",
                "flags#.#annotation",
                ".#annotation#name",
                "annotation#name#)",
                "name#)#;",
                ")#;#compilation",
                ";#compilation#level",
                "compilation#level#level",
                "level#level#=",
                "level#=#flags",
                "=#flags#.",
                "flags#.#compilation",
                ".#compilation#level",
                "compilation#level#;",
                "level#;#level",
                ";#level#.",
                "level#.#options",
                ".#options#for",
                "options#for#compilation",
                "for#compilation#level",
                "compilation#level#(",
                "level#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#flags",
                "(#flags#.",
                "flags#.#debug",
                ".#debug#)",
                "debug#)#{",
                ")#{#level",
                "{#level#.",
                "level#.#debug",
                ".#debug#options",
                "debug#options#for",
                "options#for#compilation",
                "for#compilation#level",
                "compilation#level#(",
                "level#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#flags",
                "(#flags#.",
                "flags#.#types",
                ".#types#for",
                "types#for#optimization",
                "for#optimization#)",
                "optimization#)#{",
                ")#{#level",
                "{#level#.",
                "level#.#type",
                ".#type#based",
                "type#based#optimization",
                "based#optimization#options",
                "optimization#options#(",
                "options#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#flags",
                "(#flags#.",
                "flags#.#generate",
                ".#generate#exports",
                "generate#exports#)",
                "exports#)#{",
                ")#{#options",
                "{#options#.",
                "options#.#generate",
                ".#generate#exports",
                "generate#exports#(",
                "exports#(#flags",
                "(#flags#.",
                "flags#.#generate",
                ".#generate#exports",
                "generate#exports#)",
                "exports#)#;",
                ")#;#}",
                ";#}#warning",
                "}#warning#level",
                "warning#level#w",
                "level#w#level",
                "w#level#=",
                "level#=#flags",
                "=#flags#.",
                "flags#.#warning",
                ".#warning#level",
                "warning#level#;",
                "level#;#w",
                ";#w#level",
                "w#level#.",
                "level#.#options",
                ".#options#for",
                "options#for#warning",
                "for#warning#level",
                "warning#level#(",
                "level#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#for",
                ";#for#(",
                "for#(#formatting",
                "(#formatting#option",
                "formatting#option#formatting",
                "option#formatting#option",
                "formatting#option#:",
                "option#:#flags",
                ":#flags#.",
                "flags#.#formatting",
                ".#formatting#)",
                "formatting#)#{",
                ")#{#formatting",
                "{#formatting#option",
                "formatting#option#.",
                "option#.#to",
                ".#to#options",
                "to#options#(",
                "options#(#options",
                "(#options#)",
                "options#)#;",
                ")#;#}",
                ";#}#options",
                "}#options#.",
                "options#.#closure",
                ".#closure#pass",
                "closure#pass#=",
                "pass#=#flags",
                "=#flags#.",
                "flags#.#closure",
                ".#closure#primitives",
                "closure#primitives#;",
                "primitives#;#options",
                ";#options#.",
                "options#.#jquery",
                ".#jquery#pass",
                "jquery#pass#=",
                "pass#=#compilation",
                "=#compilation#level",
                "compilation#level#.",
                "level#.#a",
                ".#a#d",
                "a#d#v",
                "d#v#a",
                "v#a#n",
                "a#n#c",
                "n#c#e",
                "c#e#d",
                "e#d#o",
                "d#o#p",
                "o#p#t",
                "p#t#i",
                "t#i#m",
                "i#m#i",
                "m#i#z",
                "i#z#a",
                "z#a#t",
                "a#t#i",
                "t#i#o",
                "i#o#n",
                "o#n#s",
                "n#s#==",
                "s#==#level",
                "==#level#&&",
                "level#&&#flags",
                "&&#flags#.",
                "flags#.#jquery",
                ".#jquery#primitives",
                "jquery#primitives#;",
                "primitives#;#options",
                ";#options#.",
                "options#.#angular",
                ".#angular#pass",
                "angular#pass#=",
                "pass#=#flags",
                "=#flags#.",
                "flags#.#angular",
                ".#angular#pass",
                "angular#pass#;",
                "pass#;#if",
                ";#if#(",
                "if#(#!",
                "(#!#flags",
                "!#flags#.",
                "flags#.#translations",
                ".#translations#file",
                "translations#file#.",
                "file#.#is",
                ".#is#empty",
                "is#empty#(",
                "empty#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#try",
                "{#try#{",
                "try#{#options",
                "{#options#.",
                "options#.#message",
                ".#message#bundle",
                "message#bundle#=",
                "bundle#=#new",
                "=#new#xtb",
                "new#xtb#message",
                "xtb#message#bundle",
                "message#bundle#(",
                "bundle#(#new",
                "(#new#file",
                "new#file#input",
                "file#input#stream",
                "input#stream#(",
                "stream#(#flags",
                "(#flags#.",
                "flags#.#translations",
                ".#translations#file",
                "translations#file#)",
                "file#)#,",
                ")#,#flags",
                ",#flags#.",
                "flags#.#translations",
                ".#translations#project",
                "translations#project#)",
                "project#)#;",
                ")#;#}",
                ";#}#catch",
                "}#catch#(",
                "catch#(#i",
                "(#i#o",
                "i#o#exception",
                "o#exception#e",
                "exception#e#)",
                "e#)#{",
                ")#{#throw",
                "{#throw#new",
                "throw#new#runtime",
                "new#runtime#exception",
                "runtime#exception#(",
                "exception#(#reading ",
                "(#reading #x",
                "reading #x#t",
                "x#t#b file\"",
                "t#b file\"#,",
                "b file\"#,#e",
                ",#e#)",
                "e#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#return",
                "}#return#options",
                "return#options#;",
                "options#;#}",
                ";#}#}"
            ]
        }
    }
}