--- "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Closure_107/78/CommandLineRunner_Origin.java"	2023-02-22 15:09:10.077638753 +0900
+++ "/home/selab/\353\260\224\355\203\225\355\231\224\353\251\264/MCRepair2/APR_Resources/repair/combination_patches/Closure_107/78/CommandLineRunner.java"	2023-02-22 15:09:10.077638753 +0900
@@ -802,68 +802,7 @@
     }
   }
 
-  @Override
-  protected CompilerOptions createOptions() {
-    CompilerOptions options = new CompilerOptions();
-    if (flags.processJqueryPrimitives) {
-      options.setCodingConvention(new JqueryCodingConvention());
-    } else {
-      options.setCodingConvention(new ClosureCodingConvention());
-    }
-
-    options.setExtraAnnotationNames(flags.extraAnnotationName);
-
-    CompilationLevel level = flags.compilationLevel;
-    level.setOptionsForCompilationLevel(options);
-
-    if (flags.debug) {
-      level.setDebugOptionsForCompilationLevel(options);
-    }
-
-    if (flags.useTypesForOptimization) {
-      level.setTypeBasedOptimizationOptions(options);
-    }
-
-    if (flags.generateExports) {
-      options.setGenerateExports(flags.generateExports);
-    }
-
-    WarningLevel wLevel = flags.warningLevel;
-    wLevel.setOptionsForWarningLevel(options);
-    for (FormattingOption formattingOption : flags.formatting) {
-      formattingOption.applyToOptions(options);
-    }
-
-    options.closurePass = flags.processClosurePrimitives;
-
-    options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&
-        flags.processJqueryPrimitives;
-
-    options.angularPass = flags.angularPass;
-
-    if (!flags.translationsFile.isEmpty()) {
-      try {
-        options.messageBundle = new XtbMessageBundle(
-            new FileInputStream(flags.translationsFile),
-            flags.translationsProject);
-      } catch (IOException e) {
-        throw new RuntimeException("Reading XTB file", e);
-      }
-    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {
-      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a
-      // translations file, they might reasonably try to write their own
-      // implementation of goog.getMsg that makes the substitution at
-      // run-time.
-      //
-      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,
-      // so we might as well inline it. But shut off the i18n warnings,
-      // because the user didn't really ask for i18n.
-      options.messageBundle = new EmptyMessageBundle();
-    }
-
-    return options;
-  }
-
+@ Override protected CompilerOptions createOptions ( ) { CompilerOptions options = new CompilerOptions ( ) ; if ( flags . processJqueryPrimitives ) { options . setCodingConvention ( new JqueryCodingConvention ( ) ) ; } else { options . setCodingConvention ( new ClosureCodingConvention ( ) ) ; } options . setExtraAnnotationNames ( flags . extraAnnotationName ) ; CompilationLevel level = flags . compilationLevel ; level . setOptionsForCompilationLevel ( options ) ; if ( flags . debug ) { level . setDebugOptionsForCompilationLevel ( options ) ; } if ( flags . useTypesForOptimization ) { level . setTypeBasedOptimizationOptions ( options ) ; } if ( flags . generateExports ) { options . setGenerateExports ( flags . generateExports ) ; } WarningLevel wLevel = flags . warningLevel ; wLevel . setOptionsForWarningLevel ( options ) ; for ( FormattingOption formattingOption : flags . formatting ) { formattingOption . applyToOptions ( options ) ; } options . closurePass = flags . processClosurePrimitives ; options . jqueryPass = CompilationLevel . ADVANCED_OPTIMIZATIONS == level && flags . processJqueryPrimitives ; options . angularPass = flags . angularPass ; if ( ! flags . translationsFile . isEmpty ( ) ) { try { options . messageBundle = new XtbMessageBundle ( new FileInputStream ( flags . translationsFile ) , flags . translationsProject ) ; } catch ( IOException e ) { throw new RuntimeException ( "Reading XTB file" , e ) ; } } else if ( CompilationLevel . ADVANCED_OPTIMIZATIONS == level ) { options . messageBundle = new EmptyMessageBundle ( ) ; options . messageBundle = null ; } return options ; }
   @Override
   protected Compiler createCompiler() {
     return new Compiler(getErrorPrintStream());
