{
    "Complex": {
        "0": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "public Complex divide ( Complex divisor ) throws NullArgumentException { MathUtils . checkNotNull ( divisor ) ; if ( isNaN || divisor . isNaN ) { return NaN ; } if ( divisor . isZero ) {  return isZero ? NaN : INF ;  } if ( divisor . isInfinite ( ) && ! isInfinite ( ) ) { return ZERO ; } final double c = divisor . getReal ( ) ; final double d = divisor . getImaginary ( ) ; if ( FastMath . abs ( c ) < FastMath . abs ( d ) ) { double q = c / d ; double denominator = c * q + d ; return createComplex ( ( real * q + imaginary ) / denominator , ( imaginary * q - real ) / denominator ) ; } else { double q = d / c ; double denominator = d * q + c ; return createComplex ( ( imaginary * q + real ) / denominator , ( imaginary - real * q ) / denominator ) ; } }",
            "buggy_dir": "",
            "criteria_token_length": 211,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#Complex",
                "public#Complex#divide",
                "Complex#divide#(",
                "divide#(#Complex",
                "(#Complex#divisor",
                "Complex#divisor#)",
                "divisor#)#throws",
                ")#throws#null",
                "throws#null#argument",
                "null#argument#exception",
                "argument#exception#{",
                "exception#{#math",
                "{#math#utils",
                "math#utils#.",
                "utils#.#not",
                ".#not#null",
                "not#null#(",
                "null#(#divisor",
                "(#divisor#)",
                "divisor#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#na",
                "(#na#n",
                "na#n#||",
                "n#||#divisor",
                "||#divisor#.",
                "divisor#.#na",
                ".#na#n",
                "na#n#)",
                "n#)#{",
                ")#{#return",
                "{#return#na",
                "return#na#n",
                "na#n#;",
                "n#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#divisor",
                "(#divisor#.",
                "divisor#.#is",
                ".#is#zero",
                "is#zero#)",
                "zero#)#{",
                ")#{#return",
                "{#return#is",
                "return#is#zero",
                "is#zero#?",
                "zero#?#na",
                "?#na#n",
                "na#n#:",
                "n#:#i",
                ":#i#n",
                "i#n#f",
                "n#f#;",
                "f#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#divisor",
                "(#divisor#.",
                "divisor#.#is",
                ".#is#infinite",
                "is#infinite#(",
                "infinite#(#)",
                "(#)#&&",
                ")#&&#!",
                "&&#!#is",
                "!#is#infinite",
                "is#infinite#(",
                "infinite#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#z",
                "return#z#e",
                "z#e#r",
                "e#r#o",
                "r#o#;",
                "o#;#}",
                ";#}#final",
                "}#final#double",
                "final#double#c",
                "double#c#=",
                "c#=#divisor",
                "=#divisor#.",
                "divisor#.#get",
                ".#get#real",
                "get#real#(",
                "real#(#)",
                "(#)#;",
                ")#;#final",
                ";#final#double",
                "final#double#d",
                "double#d#=",
                "d#=#divisor",
                "=#divisor#.",
                "divisor#.#get",
                ".#get#imaginary",
                "get#imaginary#(",
                "imaginary#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#fast",
                "(#fast#math",
                "fast#math#.",
                "math#.#abs",
                ".#abs#(",
                "abs#(#c",
                "(#c#)",
                "c#)#<",
                ")#<#fast",
                "<#fast#math",
                "fast#math#.",
                "math#.#abs",
                ".#abs#(",
                "abs#(#d",
                "(#d#)",
                "d#)#)",
                ")#)#{",
                ")#{#double",
                "{#double#q",
                "double#q#=",
                "q#=#c",
                "=#c#/",
                "c#/#d",
                "/#d#;",
                "d#;#double",
                ";#double#denominator",
                "double#denominator#=",
                "denominator#=#c",
                "=#c#*",
                "c#*#q",
                "*#q#+",
                "q#+#d",
                "+#d#;",
                "d#;#return",
                ";#return#create",
                "return#create#complex",
                "create#complex#(",
                "complex#(#(",
                "(#(#real",
                "(#real#*",
                "real#*#q",
                "*#q#+",
                "q#+#imaginary",
                "+#imaginary#)",
                "imaginary#)#/",
                ")#/#denominator",
                "/#denominator#,",
                "denominator#,#(",
                ",#(#imaginary",
                "(#imaginary#*",
                "imaginary#*#q",
                "*#q#-",
                "q#-#real",
                "-#real#)",
                "real#)#/",
                ")#/#denominator",
                "/#denominator#)",
                "denominator#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#double",
                "{#double#q",
                "double#q#=",
                "q#=#d",
                "=#d#/",
                "d#/#c",
                "/#c#;",
                "c#;#double",
                ";#double#denominator",
                "double#denominator#=",
                "denominator#=#d",
                "=#d#*",
                "d#*#q",
                "*#q#+",
                "q#+#c",
                "+#c#;",
                "c#;#return",
                ";#return#create",
                "return#create#complex",
                "create#complex#(",
                "complex#(#(",
                "(#(#imaginary",
                "(#imaginary#*",
                "imaginary#*#q",
                "*#q#+",
                "q#+#real",
                "+#real#)",
                "real#)#/",
                ")#/#denominator",
                "/#denominator#,",
                "denominator#,#(",
                ",#(#imaginary",
                "(#imaginary#-",
                "imaginary#-#real",
                "-#real#*",
                "real#*#q",
                "*#q#)",
                "q#)#/",
                ")#/#denominator",
                "/#denominator#)",
                "denominator#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}"
            ],
            "diffs": {
                "8": {
                    "action": "CHANGE",
                    "buggy_end_line": 8,
                    "buggy_size": 1,
                    "buggy_start_line": 8,
                    "fixed_end_line": 8,
                    "fixed_size": 1,
                    "fixed_start_line": 8
                }
            },
            "end_line": 281,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Math_46_src_main_java_org_apache_commons_math_complex_Complex",
            "file_name": "Complex",
            "module_dir": "src/main/java/org/apache/commons/math/complex",
            "module_id": "Math_46",
            "module_name": "Math",
            "module_num": "46",
            "multi_chunk_key": "Math_46_src_main_java_org_apache_commons_math_complex_Complex_method1_divide_Complex",
            "ngram_score": 0.7772511848341233,
            "patch": "public Complex divide ( Complex divisor ) throws NullArgumentException { MathUtils . checkNotNull ( divisor ) ; if ( isNaN || divisor . isNaN ) { return NaN ; } if ( divisor . isZero ) { return isZero ? NaN : NaN ; } if ( divisor . isInfinite ( ) && ! isInfinite ( ) ) { return ZERO ; } final double c = divisor . getReal ( ) ; final double d = divisor . getImaginary ( ) ; if ( FastMath . abs ( c ) < FastMath . abs ( d ) ) { double q = c / d ; double denominator = c * q + d ; return createComplex ( ( real * q + imaginary ) / denominator , ( imaginary * q - real ) / denominator ) ; } else { double q = d / c ; double denominator = d * q + c ; return createComplex ( ( imaginary * q + real ) / denominator , ( imaginary - real * q ) / denominator ) ; } }",
            "patch_index": 494,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.889,
            "set_index": null,
            "start_line": 251,
            "tf_token_length": 210,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#Complex",
                "public#Complex#divide",
                "Complex#divide#(",
                "divide#(#Complex",
                "(#Complex#divisor",
                "Complex#divisor#)",
                "divisor#)#throws",
                ")#throws#null",
                "throws#null#argument",
                "null#argument#exception",
                "argument#exception#{",
                "exception#{#math",
                "{#math#utils",
                "math#utils#.",
                "utils#.#not",
                ".#not#null",
                "not#null#(",
                "null#(#divisor",
                "(#divisor#)",
                "divisor#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#na",
                "(#na#n",
                "na#n#||",
                "n#||#divisor",
                "||#divisor#.",
                "divisor#.#na",
                ".#na#n",
                "na#n#)",
                "n#)#{",
                ")#{#return",
                "{#return#na",
                "return#na#n",
                "na#n#;",
                "n#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#divisor",
                "(#divisor#.",
                "divisor#.#is",
                ".#is#zero",
                "is#zero#)",
                "zero#)#{",
                ")#{#return",
                "{#return#is",
                "return#is#zero",
                "is#zero#?",
                "zero#?#na",
                "?#na#n",
                "na#n#:",
                "n#:#na",
                ":#na#n",
                "na#n#;",
                "n#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#divisor",
                "(#divisor#.",
                "divisor#.#is",
                ".#is#infinite",
                "is#infinite#(",
                "infinite#(#)",
                "(#)#&&",
                ")#&&#!",
                "&&#!#is",
                "!#is#infinite",
                "is#infinite#(",
                "infinite#(#)",
                "(#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#z",
                "return#z#e",
                "z#e#r",
                "e#r#o",
                "r#o#;",
                "o#;#}",
                ";#}#final",
                "}#final#double",
                "final#double#c",
                "double#c#=",
                "c#=#divisor",
                "=#divisor#.",
                "divisor#.#get",
                ".#get#real",
                "get#real#(",
                "real#(#)",
                "(#)#;",
                ")#;#final",
                ";#final#double",
                "final#double#d",
                "double#d#=",
                "d#=#divisor",
                "=#divisor#.",
                "divisor#.#get",
                ".#get#imaginary",
                "get#imaginary#(",
                "imaginary#(#)",
                "(#)#;",
                ")#;#if",
                ";#if#(",
                "if#(#fast",
                "(#fast#math",
                "fast#math#.",
                "math#.#abs",
                ".#abs#(",
                "abs#(#c",
                "(#c#)",
                "c#)#<",
                ")#<#fast",
                "<#fast#math",
                "fast#math#.",
                "math#.#abs",
                ".#abs#(",
                "abs#(#d",
                "(#d#)",
                "d#)#)",
                ")#)#{",
                ")#{#double",
                "{#double#q",
                "double#q#=",
                "q#=#c",
                "=#c#/",
                "c#/#d",
                "/#d#;",
                "d#;#double",
                ";#double#denominator",
                "double#denominator#=",
                "denominator#=#c",
                "=#c#*",
                "c#*#q",
                "*#q#+",
                "q#+#d",
                "+#d#;",
                "d#;#return",
                ";#return#create",
                "return#create#complex",
                "create#complex#(",
                "complex#(#(",
                "(#(#real",
                "(#real#*",
                "real#*#q",
                "*#q#+",
                "q#+#imaginary",
                "+#imaginary#)",
                "imaginary#)#/",
                ")#/#denominator",
                "/#denominator#,",
                "denominator#,#(",
                ",#(#imaginary",
                "(#imaginary#*",
                "imaginary#*#q",
                "*#q#-",
                "q#-#real",
                "-#real#)",
                "real#)#/",
                ")#/#denominator",
                "/#denominator#)",
                "denominator#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#double",
                "{#double#q",
                "double#q#=",
                "q#=#d",
                "=#d#/",
                "d#/#c",
                "/#c#;",
                "c#;#double",
                ";#double#denominator",
                "double#denominator#=",
                "denominator#=#d",
                "=#d#*",
                "d#*#q",
                "*#q#+",
                "q#+#c",
                "+#c#;",
                "c#;#return",
                ";#return#create",
                "return#create#complex",
                "create#complex#(",
                "complex#(#(",
                "(#(#imaginary",
                "(#imaginary#*",
                "imaginary#*#q",
                "*#q#+",
                "q#+#real",
                "+#real#)",
                "real#)#/",
                ")#/#denominator",
                "/#denominator#,",
                "denominator#,#(",
                ",#(#imaginary",
                "(#imaginary#-",
                "imaginary#-#real",
                "-#real#*",
                "real#*#q",
                "*#q#)",
                "q#)#/",
                ")#/#denominator",
                "/#denominator#)",
                "denominator#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}"
            ]
        },
        "1": {
            "action_judgements": null,
            "action_score": 1.0,
            "buggy_code": "public Complex divide ( double divisor ) { if ( isNaN || Double . isNaN ( divisor ) ) { return NaN ; } if ( divisor == 0d ) {  return isZero ? NaN : INF ;  } if ( Double . isInfinite ( divisor ) ) { return ! isInfinite ( ) ? ZERO : NaN ; } return createComplex ( real / divisor , imaginary / divisor ) ; }",
            "buggy_dir": "",
            "criteria_token_length": 90,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#Complex",
                "public#Complex#divide",
                "Complex#divide#(",
                "divide#(#double",
                "(#double#divisor",
                "double#divisor#)",
                "divisor#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#na",
                "(#na#n",
                "na#n#||",
                "n#||#Double",
                "||#Double#.",
                "Double#.#na",
                ".#na#n",
                "na#n#(",
                "n#(#divisor",
                "(#divisor#)",
                "divisor#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#na",
                "return#na#n",
                "na#n#;",
                "n#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#divisor",
                "(#divisor#==",
                "divisor#==#0d",
                "==#0d#)",
                "0d#)#{",
                ")#{#return",
                "{#return#is",
                "return#is#zero",
                "is#zero#?",
                "zero#?#na",
                "?#na#n",
                "na#n#:",
                "n#:#i",
                ":#i#n",
                "i#n#f",
                "n#f#;",
                "f#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#Double",
                "(#Double#.",
                "Double#.#is",
                ".#is#infinite",
                "is#infinite#(",
                "infinite#(#divisor",
                "(#divisor#)",
                "divisor#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#!",
                "return#!#is",
                "!#is#infinite",
                "is#infinite#(",
                "infinite#(#)",
                "(#)#?",
                ")#?#z",
                "?#z#e",
                "z#e#r",
                "e#r#o",
                "r#o#:",
                "o#:#na",
                ":#na#n",
                "na#n#;",
                "n#;#}",
                ";#}#return",
                "}#return#create",
                "return#create#complex",
                "create#complex#(",
                "complex#(#real",
                "(#real#/",
                "real#/#divisor",
                "/#divisor#,",
                "divisor#,#imaginary",
                ",#imaginary#/",
                "imaginary#/#divisor",
                "/#divisor#)",
                "divisor#)#;",
                ")#;#}",
                ";#}#}"
            ],
            "diffs": {
                "7": {
                    "action": "CHANGE",
                    "buggy_end_line": 7,
                    "buggy_size": 1,
                    "buggy_start_line": 7,
                    "fixed_end_line": 7,
                    "fixed_size": 1,
                    "fixed_start_line": 7
                }
            },
            "end_line": 304,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Math_46_src_main_java_org_apache_commons_math_complex_Complex",
            "file_name": "Complex",
            "module_dir": "src/main/java/org/apache/commons/math/complex",
            "module_id": "Math_46",
            "module_name": "Math",
            "module_num": "46",
            "multi_chunk_key": "Math_46_src_main_java_org_apache_commons_math_complex_Complex_method1_divide_double",
            "ngram_score": 0.8444444444444444,
            "patch": "public Complex divide ( double divisor ) { if ( isNaN || Double . isNaN ( divisor ) ) { return NaN ; } if ( divisor == 0d ) { return true ? NaN : INF ; } if ( Double . isInfinite ( divisor ) ) { return ! isInfinite ( ) ? ZERO : NaN ; } return createComplex ( real / divisor , imaginary / divisor ) ; }",
            "patch_index": 74,
            "per_ins": 0,
            "per_other": 1,
            "score_total": 0.922,
            "set_index": null,
            "start_line": 291,
            "tf_token_length": 89,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#Complex",
                "public#Complex#divide",
                "Complex#divide#(",
                "divide#(#double",
                "(#double#divisor",
                "double#divisor#)",
                "divisor#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#na",
                "(#na#n",
                "na#n#||",
                "n#||#Double",
                "||#Double#.",
                "Double#.#na",
                ".#na#n",
                "na#n#(",
                "n#(#divisor",
                "(#divisor#)",
                "divisor#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#na",
                "return#na#n",
                "na#n#;",
                "n#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#divisor",
                "(#divisor#==",
                "divisor#==#0d",
                "==#0d#)",
                "0d#)#{",
                ")#{#return",
                "{#return#true",
                "return#true#?",
                "true#?#na",
                "?#na#n",
                "na#n#:",
                "n#:#i",
                ":#i#n",
                "i#n#f",
                "n#f#;",
                "f#;#}",
                ";#}#if",
                "}#if#(",
                "if#(#Double",
                "(#Double#.",
                "Double#.#is",
                ".#is#infinite",
                "is#infinite#(",
                "infinite#(#divisor",
                "(#divisor#)",
                "divisor#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#!",
                "return#!#is",
                "!#is#infinite",
                "is#infinite#(",
                "infinite#(#)",
                "(#)#?",
                ")#?#z",
                "?#z#e",
                "z#e#r",
                "e#r#o",
                "r#o#:",
                "o#:#na",
                ":#na#n",
                "na#n#;",
                "n#;#}",
                ";#}#return",
                "}#return#create",
                "return#create#complex",
                "create#complex#(",
                "complex#(#real",
                "(#real#/",
                "real#/#divisor",
                "/#divisor#,",
                "divisor#,#imaginary",
                ",#imaginary#/",
                "imaginary#/#divisor",
                "/#divisor#)",
                "divisor#)#;",
                ")#;#}",
                ";#}#}"
            ]
        }
    }
}