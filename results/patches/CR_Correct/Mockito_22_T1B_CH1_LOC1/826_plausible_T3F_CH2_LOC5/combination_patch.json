{
    "Equality": {
        "0": {
            "action_judgements": null,
            "action_score": 0.75,
            "buggy_code": "public static boolean areEqual ( Object o1 , Object o2 ) {  if ( o1 == null || o2 == null ) {  return o1 == null && o2 == null ; } else if ( isArray ( o1 ) ) { return isArray ( o2 ) && areArraysEqual ( o1 , o2 ) ; } else { return o1 . equals ( o2 ) ; } }",
            "buggy_dir": "",
            "criteria_token_length": 75,
            "criteria_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#static",
                "public#static#boolean",
                "static#boolean#are",
                "boolean#are#equal",
                "are#equal#(",
                "equal#(#Object",
                "(#Object#o1",
                "Object#o1#,",
                "o1#,#Object",
                ",#Object#o2",
                "Object#o2#)",
                "o2#)#{",
                ")#{#if",
                "{#if#(",
                "if#(#o1",
                "(#o1#==",
                "o1#==#null",
                "==#null#||",
                "null#||#o2",
                "||#o2#==",
                "o2#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#return",
                "{#return#o1",
                "return#o1#==",
                "o1#==#null",
                "==#null#&&",
                "null#&&#o2",
                "&&#o2#==",
                "o2#==#null",
                "==#null#;",
                "null#;#}",
                ";#}#else",
                "}#else#if",
                "else#if#(",
                "if#(#is",
                "(#is#array",
                "is#array#(",
                "array#(#o1",
                "(#o1#)",
                "o1#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#is",
                "return#is#array",
                "is#array#(",
                "array#(#o2",
                "(#o2#)",
                "o2#)#&&",
                ")#&&#arrays",
                "&&#arrays#equal",
                "arrays#equal#(",
                "equal#(#o1",
                "(#o1#,",
                "o1#,#o2",
                ",#o2#)",
                "o2#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#return",
                "{#return#o1",
                "return#o1#.",
                "o1#.#equals",
                ".#equals#(",
                "equals#(#o2",
                "(#o2#)",
                "o2#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#}"
            ],
            "diffs": {
                "3": {
                    "action": "CHANGE",
                    "buggy_end_line": 3,
                    "buggy_size": 1,
                    "buggy_start_line": 3,
                    "fixed_end_line": 4,
                    "fixed_size": 2,
                    "fixed_start_line": 3
                },
                "9": {
                    "action": "INSERT",
                    "buggy_end_line": 9,
                    "buggy_size": 0,
                    "buggy_start_line": 9,
                    "fixed_end_line": 12,
                    "fixed_size": 3,
                    "fixed_start_line": 10
                }
            },
            "end_line": 20,
            "exp_ins": 0,
            "exp_other": 1,
            "file_ext": ".java",
            "file_key": "Mockito_22_src_org_mockito_internal_matchers_Equality",
            "file_name": "Equality",
            "module_dir": "src/org/mockito/internal/matchers",
            "module_id": "Mockito_22",
            "module_name": "Mockito",
            "module_num": "22",
            "multi_chunk_key": "Mockito_22_src_org_mockito_internal_matchers_Equality_method1_areEqual_Object_Object",
            "ngram_score": 0.7380952380952381,
            "patch": "public static boolean areEqual ( Object o1 , Object o2 ) { try { if ( o1 == null ) { return o1 == null && o2 == null ; } else if ( isArray ( o1 ) ) { return isArray ( o2 ) && areArraysEqual ( o1 , o2 ) ; } else { return o1 . equals ( o2 ) ; } } catch ( Exception e ) { return true ; } }",
            "patch_index": 260,
            "per_ins": 1,
            "per_other": 1,
            "score_total": 0.744,
            "set_index": null,
            "start_line": 12,
            "tf_token_length": 84,
            "tf_tokens": [
                "class#source#code",
                "source#code#{",
                "code#{#public",
                "{#public#static",
                "public#static#boolean",
                "static#boolean#are",
                "boolean#are#equal",
                "are#equal#(",
                "equal#(#Object",
                "(#Object#o1",
                "Object#o1#,",
                "o1#,#Object",
                ",#Object#o2",
                "Object#o2#)",
                "o2#)#{",
                ")#{#try",
                "{#try#{",
                "try#{#if",
                "{#if#(",
                "if#(#o1",
                "(#o1#==",
                "o1#==#null",
                "==#null#)",
                "null#)#{",
                ")#{#return",
                "{#return#o1",
                "return#o1#==",
                "o1#==#null",
                "==#null#&&",
                "null#&&#o2",
                "&&#o2#==",
                "o2#==#null",
                "==#null#;",
                "null#;#}",
                ";#}#else",
                "}#else#if",
                "else#if#(",
                "if#(#is",
                "(#is#array",
                "is#array#(",
                "array#(#o1",
                "(#o1#)",
                "o1#)#)",
                ")#)#{",
                ")#{#return",
                "{#return#is",
                "return#is#array",
                "is#array#(",
                "array#(#o2",
                "(#o2#)",
                "o2#)#&&",
                ")#&&#arrays",
                "&&#arrays#equal",
                "arrays#equal#(",
                "equal#(#o1",
                "(#o1#,",
                "o1#,#o2",
                ",#o2#)",
                "o2#)#;",
                ")#;#}",
                ";#}#else",
                "}#else#{",
                "else#{#return",
                "{#return#o1",
                "return#o1#.",
                "o1#.#equals",
                ".#equals#(",
                "equals#(#o2",
                "(#o2#)",
                "o2#)#;",
                ")#;#}",
                ";#}#}",
                "}#}#catch",
                "}#catch#(",
                "catch#(#Exception",
                "(#Exception#e",
                "Exception#e#)",
                "e#)#{",
                ")#{#return",
                "{#return#true",
                "return#true#;",
                "true#;#}",
                ";#}#}",
                "}#}#}"
            ]
        }
    }
}